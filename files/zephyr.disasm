
files/zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

70000000 <_vector_table>:
#include "macro_priv.inc"

_ASM_FILE_PROLOGUE

SECTION_SUBSEC_FUNC(exc_vector_table,_vector_table_section,_vector_table)
	ldr pc, =z_arm_reset             /*                   offset 0 */
70000000:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
	ldr pc, =z_arm_undef_instruction /* undef instruction offset 4 */
	ldr pc, =z_arm_svc               /* svc               offset 8 */
	ldr pc, =z_arm_prefetch_abort    /* prefetch abort offset  0xc */
	ldr pc, =z_arm_data_abort        /* data abort     offset 0x10 */
70000010:	18 f0 9f e5 00 f0 20 e3 14 f0 9f e5 14 f0 9f e5     ...... .........
	ldr pc, =z_arm_reset             /*                   offset 0 */
70000020:	04 08 00 70 ec 05 00 70 98 0a 00 70 30 06 00 70     ...p...p...p0..p
	ldr pc, =z_arm_data_abort        /* data abort     offset 0x10 */
70000030:	60 06 00 70 f0 08 00 70 cd 05 00 70                 `..p...p...p

Disassembly of section text:

70000040 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
70000040:	4770      	bx	lr
70000042:	bf00      	nop

70000044 <main>:

int main(void)
{
#ifdef USING_ZEPHYR
   extern int rtos_main_zephyr(void);
   return rtos_main_zephyr();
70000044:	f000 b830 	b.w	700000a8 <rtos_main_zephyr>

70000048 <tm_interrupt_handler>:
void* test_interrupt_handler = NULL;

/* Define the interrupt handler */
void tm_interrupt_handler(void* args)
{
   if (test_interrupt_handler != NULL)
70000048:	f245 0348 	movw	r3, #20552	; 0x5048
7000004c:	f2c7 0300 	movt	r3, #28672	; 0x7000
70000050:	681b      	ldr	r3, [r3, #0]
70000052:	b103      	cbz	r3, 70000056 <tm_interrupt_handler+0xe>
   {
      /* Call the assigned handler function */
      ((void (*)(void)) test_interrupt_handler)();
70000054:	4718      	bx	r3
   }
}
70000056:	4770      	bx	lr

70000058 <main_task>:
}

void main_task(void* pvParameters)
{
   /* Start Thread-Metric tests */
   printk("Starting Thread-Metric tests...\r\n");
70000058:	f244 60c4 	movw	r0, #18116	; 0x46c4
{
7000005c:	b510      	push	{r4, lr}

   /* Initialize custom interrupts*/
   test_interrupt_handler = tm_isr_message_handler;
7000005e:	f240 04d5 	movw	r4, #213	; 0xd5
   printk("Starting Thread-Metric tests...\r\n");
70000062:	f2c7 0000 	movt	r0, #28672	; 0x7000
70000066:	f000 fa6f 	bl	70000548 <printk>
   test_interrupt_handler = tm_isr_message_handler;
7000006a:	f245 0348 	movw	r3, #20552	; 0x5048
7000006e:	f2c7 0300 	movt	r3, #28672	; 0x7000
   z_vim_irq_priority_set(irq, priority, IRQ_TYPE_EDGE);
70000072:	2204      	movs	r2, #4
   test_interrupt_handler = tm_isr_message_handler;
70000074:	f2c7 0400 	movt	r4, #28672	; 0x7000
   z_vim_irq_priority_set(irq, priority, IRQ_TYPE_EDGE);
70000078:	2101      	movs	r1, #1
7000007a:	200a      	movs	r0, #10
   test_interrupt_handler = tm_isr_message_handler;
7000007c:	601c      	str	r4, [r3, #0]
   z_vim_irq_priority_set(irq, priority, IRQ_TYPE_EDGE);
7000007e:	f000 fe41 	bl	70000d04 <z_vim_irq_priority_set>
   IRQ_CONNECT(SOFTWARE_INTERRUPT_ID, 1, tm_interrupt_handler, NULL, 0);
70000082:	2200      	movs	r2, #0
70000084:	2101      	movs	r1, #1
70000086:	200a      	movs	r0, #10
70000088:	f000 fa8e 	bl	700005a8 <z_soc_irq_priority_set>
   irq_enable(SOFTWARE_INTERRUPT_ID);
7000008c:	200a      	movs	r0, #10
7000008e:	f000 fa8d 	bl	700005ac <z_soc_irq_enable>
   z_vim_irq_enable(irq);
70000092:	200a      	movs	r0, #10
70000094:	f000 fe62 	bl	70000d5c <z_vim_irq_enable>
   setup_interrupt();

   /* Call the main Thread-Metric function */
   tm_main_four();
70000098:	f000 f878 	bl	7000018c <tm_main_four>
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_SCHED_CURRENT_THREAD_QUERY);
	}
#endif
	compiler_barrier();
	return z_impl_k_sched_current_thread_query();
7000009c:	f002 f928 	bl	700022f0 <z_impl_k_sched_current_thread_query>

   /* Delete thread after completion */
   k_thread_abort(k_current_get());
}
700000a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
700000a4:	f002 b92a 	b.w	700022fc <z_impl_k_thread_abort>

700000a8 <rtos_main_zephyr>:
/* Thread definition */
K_THREAD_DEFINE(main_thread, 512 /* STACKSIZE */, main_task, NULL, NULL, NULL, MAIN_TASK_PRI, K_USER, -1);

int rtos_main_zephyr(void)
{
   printk("Initializing Zephyr system...\r\n");
700000a8:	f244 60e8 	movw	r0, #18152	; 0x46e8
{
700000ac:	b508      	push	{r3, lr}
   printk("Initializing Zephyr system...\r\n");
700000ae:	f2c7 0000 	movt	r0, #28672	; 0x7000
700000b2:	f000 fa49 	bl	70000548 <printk>
	z_impl_k_wakeup(thread);
700000b6:	f644 1010 	movw	r0, #18704	; 0x4910
700000ba:	f2c7 0000 	movt	r0, #28672	; 0x7000
700000be:	f002 f8f1 	bl	700022a4 <z_impl_k_wakeup>

   /* Create main task */
   k_thread_start(main_thread);

   printk("Main task created and running...\r\n");
700000c2:	f244 7008 	movw	r0, #18184	; 0x4708
700000c6:	f2c7 0000 	movt	r0, #28672	; 0x7000
700000ca:	f000 fa3d 	bl	70000548 <printk>

   return 0;
}
700000ce:	2000      	movs	r0, #0
700000d0:	bd08      	pop	{r3, pc}
700000d2:	bf00      	nop

700000d4 <tm_isr_message_handler>:

/* Minimal ISR: No prints, no dynamic formatting */
void tm_isr_message_handler(void)
{
   int i;
   tm_isr_counter++;
700000d4:	f245 23d0 	movw	r3, #21200	; 0x52d0
   /* Generate message:
      [0] : Producer ID (1)
      [1] : Message counter (isr_message_counter)
      [2..MESSAGE_SIZE-2] : Pattern = 1000 + (isr_message_counter * 10) + index
      [MESSAGE_SIZE-1] : Checksum over first (MESSAGE_SIZE-1) words */
   message[0] = 1;
700000d8:	2001      	movs	r0, #1
   tm_isr_counter++;
700000da:	f2c7 0300 	movt	r3, #28672	; 0x7000
{
700000de:	b510      	push	{r4, lr}
   tm_isr_counter++;
700000e0:	681a      	ldr	r2, [r3, #0]
   message[1] = isr_message_counter;
700000e2:	f245 24cc 	movw	r4, #21196	; 0x52cc
   message[0] = 1;
700000e6:	f245 2c4c 	movw	ip, #21068	; 0x524c
   message[1] = isr_message_counter;
700000ea:	f2c7 0400 	movt	r4, #28672	; 0x7000
   tm_isr_counter++;
700000ee:	4402      	add	r2, r0
   message[0] = 1;
700000f0:	f2c7 0c00 	movt	ip, #28672	; 0x7000
   tm_isr_counter++;
700000f4:	601a      	str	r2, [r3, #0]
   message[1] = isr_message_counter;
700000f6:	4661      	mov	r1, ip
700000f8:	6823      	ldr	r3, [r4, #0]
   for (i = 2; i < MESSAGE_SIZE - 1; i++)
700000fa:	2202      	movs	r2, #2
   message[0] = 1;
700000fc:	f8cc 0000 	str.w	r0, [ip]
   message[1] = isr_message_counter;
70000100:	f841 3f04 	str.w	r3, [r1, #4]!
   {
      message[i] = 1000 + (isr_message_counter * 10) + i;
70000104:	6823      	ldr	r3, [r4, #0]
70000106:	eb03 0383 	add.w	r3, r3, r3, lsl #2
7000010a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   for (i = 2; i < MESSAGE_SIZE - 1; i++)
7000010e:	3201      	adds	r2, #1
      message[i] = 1000 + (isr_message_counter * 10) + i;
70000110:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   for (i = 2; i < MESSAGE_SIZE - 1; i++)
70000114:	2a1f      	cmp	r2, #31
      message[i] = 1000 + (isr_message_counter * 10) + i;
70000116:	f841 3f04 	str.w	r3, [r1, #4]!
   for (i = 2; i < MESSAGE_SIZE - 1; i++)
7000011a:	d1f3      	bne.n	70000104 <tm_isr_message_handler+0x30>
7000011c:	4b0f      	ldr	r3, [pc, #60]	; (7000015c <tm_isr_message_handler+0x88>)
   unsigned long checksum = 0;
7000011e:	2200      	movs	r2, #0
70000120:	f103 007c 	add.w	r0, r3, #124	; 0x7c
      checksum += msg[i];
70000124:	f853 1f04 	ldr.w	r1, [r3, #4]!
   for (int i = 0; i < size; i++)
70000128:	4283      	cmp	r3, r0
      checksum += msg[i];
7000012a:	440a      	add	r2, r1
   for (int i = 0; i < size; i++)
7000012c:	d1fa      	bne.n	70000124 <tm_isr_message_handler+0x50>
   }
   message[MESSAGE_SIZE - 1] = compute_checksum(message, MESSAGE_SIZE - 1);

   /* Measure send latency using a precomputed PMU name */
   tm_pmu_profile_start(pmu_send_names[isr_message_counter]);
7000012e:	6820      	ldr	r0, [r4, #0]
70000130:	f245 034c 	movw	r3, #20556	; 0x504c
   message[MESSAGE_SIZE - 1] = compute_checksum(message, MESSAGE_SIZE - 1);
70000134:	f8cc 207c 	str.w	r2, [ip, #124]	; 0x7c
   tm_pmu_profile_start(pmu_send_names[isr_message_counter]);
70000138:	f2c7 0300 	movt	r3, #28672	; 0x7000
7000013c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
70000140:	f000 f950 	bl	700003e4 <tm_pmu_profile_start>
   tm_queue_send_from_isr(0, message);
70000144:	f245 214c 	movw	r1, #21068	; 0x524c
70000148:	2000      	movs	r0, #0
7000014a:	f2c7 0100 	movt	r1, #28672	; 0x7000
7000014e:	f000 f903 	bl	70000358 <tm_queue_send_from_isr>
   // tm_pmu_profile_end(pmu_send_names[isr_message_counter]);

   isr_message_counter++; /* Prepare for next iteration */
70000152:	6823      	ldr	r3, [r4, #0]
70000154:	3301      	adds	r3, #1
70000156:	6023      	str	r3, [r4, #0]
}
70000158:	bd10      	pop	{r4, pc}
7000015a:	bf00      	nop
7000015c:	70005248 	.word	0x70005248

70000160 <tm_memory_allocation_thread_0_entry>:
   tm_memory_allocation_thread_report();
}

/* Define the memory allocation processing thread.  */
void tm_memory_allocation_thread_0_entry(void* p1, void* p2, void* p3)
{
70000160:	b510      	push	{r4, lr}
      {
         break;
      }

      /* Increment the number of memory allocations sent and received.  */
      tm_memory_allocation_counter++;
70000162:	f245 24d4 	movw	r4, #21204	; 0x52d4
{
70000166:	b082      	sub	sp, #8
      tm_memory_allocation_counter++;
70000168:	f2c7 0400 	movt	r4, #28672	; 0x7000
7000016c:	e002      	b.n	70000174 <tm_memory_allocation_thread_0_entry+0x14>
7000016e:	6823      	ldr	r3, [r4, #0]
70000170:	3301      	adds	r3, #1
70000172:	6023      	str	r3, [r4, #0]
      tm_memory_pool_allocate(0, &memory_ptr);
70000174:	2000      	movs	r0, #0
70000176:	a901      	add	r1, sp, #4
70000178:	f000 f914 	bl	700003a4 <tm_memory_pool_allocate>
      status = tm_memory_pool_deallocate(0, memory_ptr);
7000017c:	9901      	ldr	r1, [sp, #4]
7000017e:	2000      	movs	r0, #0
70000180:	f000 f922 	bl	700003c8 <tm_memory_pool_deallocate>
      if (status != TM_SUCCESS)
70000184:	2800      	cmp	r0, #0
70000186:	d0f2      	beq.n	7000016e <tm_memory_allocation_thread_0_entry+0xe>
   }
}
70000188:	b002      	add	sp, #8
7000018a:	bd10      	pop	{r4, pc}

7000018c <tm_main_four>:
   tm_initialize(tm_memory_allocation_initialize);
7000018c:	f240 10f5 	movw	r0, #501	; 0x1f5
70000190:	f2c7 0000 	movt	r0, #28672	; 0x7000
{
70000194:	b508      	push	{r3, lr}
   tm_initialize(tm_memory_allocation_initialize);
70000196:	f000 f899 	bl	700002cc <tm_initialize>
}
7000019a:	2000      	movs	r0, #0
7000019c:	bd08      	pop	{r3, pc}
7000019e:	bf00      	nop

700001a0 <tm_memory_allocation_thread_report>:

/* Define the memory allocation test reporting function.  */
void tm_memory_allocation_thread_report(void)
{
700001a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

   /* Initialize the last counter.  */
   last_counter = 0;

   /* Initialize the relative time.  */
   relative_time = 0;
700001a4:	2400      	movs	r4, #0
700001a6:	f245 26d4 	movw	r6, #21204	; 0x52d4

      /* Increment the relative time.  */
      relative_time = relative_time + TM_TEST_DURATION;

      /* Print results to the stdio window.  */
      printf("**** Thread-Metric Memory Allocation Test **** Relative Time: %lu\r\n", relative_time);
700001aa:	f244 7938 	movw	r9, #18232	; 0x4738

      /* See if there are any errors.  */
      if (tm_memory_allocation_counter == last_counter)
      {

         printf("ERROR: Invalid counter value(s). Error allocating/deallocating "
700001ae:	f244 787c 	movw	r8, #18300	; 0x477c
                "memory!\r\n");
      }

      /* Show the time period total.  */
      printf("Time Period Total:  %lu\r\n", tm_memory_allocation_counter - last_counter);
700001b2:	f244 77c8 	movw	r7, #18376	; 0x47c8
   last_counter = 0;
700001b6:	4625      	mov	r5, r4
700001b8:	f2c7 0600 	movt	r6, #28672	; 0x7000
      printf("**** Thread-Metric Memory Allocation Test **** Relative Time: %lu\r\n", relative_time);
700001bc:	f2c7 0900 	movt	r9, #28672	; 0x7000
         printf("ERROR: Invalid counter value(s). Error allocating/deallocating "
700001c0:	f2c7 0800 	movt	r8, #28672	; 0x7000
      printf("Time Period Total:  %lu\r\n", tm_memory_allocation_counter - last_counter);
700001c4:	f2c7 0700 	movt	r7, #28672	; 0x7000
      tm_thread_sleep(TM_TEST_DURATION);
700001c8:	201e      	movs	r0, #30
      relative_time = relative_time + TM_TEST_DURATION;
700001ca:	4404      	add	r4, r0
      tm_thread_sleep(TM_TEST_DURATION);
700001cc:	f000 f8bc 	bl	70000348 <tm_thread_sleep>
      printf("**** Thread-Metric Memory Allocation Test **** Relative Time: %lu\r\n", relative_time);
700001d0:	4621      	mov	r1, r4
700001d2:	4648      	mov	r0, r9
700001d4:	f000 f9b8 	bl	70000548 <printk>
      if (tm_memory_allocation_counter == last_counter)
700001d8:	6831      	ldr	r1, [r6, #0]
         printf("ERROR: Invalid counter value(s). Error allocating/deallocating "
700001da:	4640      	mov	r0, r8
      if (tm_memory_allocation_counter == last_counter)
700001dc:	42a9      	cmp	r1, r5
700001de:	d102      	bne.n	700001e6 <tm_memory_allocation_thread_report+0x46>
         printf("ERROR: Invalid counter value(s). Error allocating/deallocating "
700001e0:	f000 f9b2 	bl	70000548 <printk>
      printf("Time Period Total:  %lu\r\n", tm_memory_allocation_counter - last_counter);
700001e4:	6831      	ldr	r1, [r6, #0]
700001e6:	4638      	mov	r0, r7
700001e8:	1b49      	subs	r1, r1, r5
700001ea:	f000 f9ad 	bl	70000548 <printk>

      /* Save the last counter.  */
      last_counter = tm_memory_allocation_counter;
700001ee:	6835      	ldr	r5, [r6, #0]
      tm_thread_sleep(TM_TEST_DURATION);
700001f0:	e7ea      	b.n	700001c8 <tm_memory_allocation_thread_report+0x28>
700001f2:	bf00      	nop

700001f4 <tm_memory_allocation_initialize>:
{
700001f4:	b508      	push	{r3, lr}
   tm_memory_pool_create(0);
700001f6:	2000      	movs	r0, #0
700001f8:	f000 f8bc 	bl	70000374 <tm_memory_pool_create>
   tm_thread_create(0, 10, tm_memory_allocation_thread_0_entry);
700001fc:	f240 1261 	movw	r2, #353	; 0x161
70000200:	210a      	movs	r1, #10
70000202:	f2c7 0200 	movt	r2, #28672	; 0x7000
70000206:	2000      	movs	r0, #0
70000208:	f000 f862 	bl	700002d0 <tm_thread_create>
   tm_thread_resume(0);
7000020c:	2000      	movs	r0, #0
7000020e:	f000 f88d 	bl	7000032c <tm_thread_resume>
   tm_memory_allocation_thread_report();
70000212:	f7ff ffc5 	bl	700001a0 <tm_memory_allocation_thread_report>
70000216:	bf00      	nop

70000218 <tm_setup_pmu>:
/* --------------------------------------------------------------------------
 * PMU Initialization (called at system boot)
 * -------------------------------------------------------------------------- */
int tm_setup_pmu(void)
{
   printk("Initializing PMU...\r\n");
70000218:	f244 70e4 	movw	r0, #18404	; 0x47e4
{
7000021c:	b538      	push	{r3, r4, r5, lr}
   printk("Initializing PMU...\r\n");
7000021e:	f2c7 0000 	movt	r0, #28672	; 0x7000
70000222:	f000 f991 	bl	70000548 <printk>

/* Performance Monitor Control Register (PMCR) */
__STATIC_FORCEINLINE uint32_t pmu_read_pmcr(void)
{
    uint32_t val;
    __asm__ volatile ("mrc p15, 0, %0, c9, c12, 0" : "=r" (val));
70000226:	ee19 3f1c 	mrc	15, 0, r3, cr9, cr12, {0}

   /* Disable all counters (PMCR.E=0) */
   uint32_t pmcr = pmu_read_pmcr();
   pmcr &= ~0x1;
7000022a:	f023 0301 	bic.w	r3, r3, #1
    return val;
}

__STATIC_FORCEINLINE void pmu_write_pmcr(uint32_t val)
{
    __asm__ volatile ("mcr p15, 0, %0, c9, c12, 0" : : "r" (val));
7000022e:	ee09 3f1c 	mcr	15, 0, r3, cr9, cr12, {0}
}

/* Performance Monitor Count Enable Clear Register (PMCNTENCLR) */
__STATIC_FORCEINLINE void pmu_write_cntenclr(uint32_t val)
{
    __asm__ volatile ("mcr p15, 0, %0, c9, c12, 2" : : "r" (val));
70000232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
70000236:	ee09 3f5c 	mcr	15, 0, r3, cr9, cr12, {2}
    __asm__ volatile ("mcr p15, 0, %0, c9, c12, 0" : : "r" (val));
7000023a:	2306      	movs	r3, #6
7000023c:	ee09 3f1c 	mcr	15, 0, r3, cr9, cr12, {0}
    return val;
}

__STATIC_FORCEINLINE void pmu_write_pmccntr(uint32_t val)
{
    __asm__ volatile ("mcr p15, 0, %0, c9, c13, 0" : : "r" (val));
70000240:	2400      	movs	r4, #0
70000242:	ee09 4f1d 	mcr	15, 0, r4, cr9, cr13, {0}
}

/* Event Counter Selection Register (PMSELR) */
__STATIC_FORCEINLINE void pmu_select_event_counter(uint32_t counter_idx)
{
    __asm__ volatile ("mcr p15, 0, %0, c9, c12, 5" : : "r" (counter_idx & 0x1F));
70000246:	ee09 4fbc 	mcr	15, 0, r4, cr9, cr12, {5}

   /* Configure event counters */
   for (uint32_t i = 0; i < gPmuConfig.numEventCounters; i++)
   {
      pmu_select_event_counter(i);
      pmu_write_evtyper(gPmuConfig.eventCounters[i].type);
7000024a:	f64b 3350 	movw	r3, #47952	; 0xbb50
7000024e:	f2c7 0300 	movt	r3, #28672	; 0x7000
}

/* Event Type Register (PMXEVTYPER) */
__STATIC_FORCEINLINE void pmu_write_evtyper(uint32_t val)
{
    __asm__ volatile ("mcr p15, 0, %0, c9, c13, 1" : : "r" (val));
70000252:	685a      	ldr	r2, [r3, #4]
70000254:	ee09 2f3d 	mcr	15, 0, r2, cr9, cr13, {1}
    return val;
}

__STATIC_FORCEINLINE void pmu_write_evcounter(uint32_t val)
{
    __asm__ volatile ("mcr p15, 0, %0, c9, c13, 2" : : "r" (val));
70000258:	ee09 4f5d 	mcr	15, 0, r4, cr9, cr13, {2}
    __asm__ volatile ("mcr p15, 0, %0, c9, c12, 5" : : "r" (counter_idx & 0x1F));
7000025c:	2501      	movs	r5, #1
7000025e:	ee09 5fbc 	mcr	15, 0, r5, cr9, cr12, {5}
    __asm__ volatile ("mcr p15, 0, %0, c9, c13, 1" : : "r" (val));
70000262:	68da      	ldr	r2, [r3, #12]
70000264:	ee09 2f3d 	mcr	15, 0, r2, cr9, cr13, {1}
    __asm__ volatile ("mcr p15, 0, %0, c9, c13, 2" : : "r" (val));
70000268:	ee09 4f5d 	mcr	15, 0, r4, cr9, cr13, {2}
    __asm__ volatile ("mcr p15, 0, %0, c9, c12, 5" : : "r" (counter_idx & 0x1F));
7000026c:	2202      	movs	r2, #2
7000026e:	ee09 2fbc 	mcr	15, 0, r2, cr9, cr12, {5}
    __asm__ volatile ("mcr p15, 0, %0, c9, c13, 1" : : "r" (val));
70000272:	695b      	ldr	r3, [r3, #20]
70000274:	ee09 3f3d 	mcr	15, 0, r3, cr9, cr13, {1}
    __asm__ volatile ("mcr p15, 0, %0, c9, c13, 2" : : "r" (val));
70000278:	ee09 4f5d 	mcr	15, 0, r4, cr9, cr13, {2}
    __asm__ volatile ("mcr p15, 0, %0, c9, c12, 1" : : "r" (val));
7000027c:	2307      	movs	r3, #7
7000027e:	f2c8 0300 	movt	r3, #32768	; 0x8000
70000282:	ee09 3f3c 	mcr	15, 0, r3, cr9, cr12, {1}
    __asm__ volatile ("mrc p15, 0, %0, c9, c12, 0" : "=r" (val));
70000286:	ee19 3f1c 	mrc	15, 0, r3, cr9, cr12, {0}
   /*    bit31 => cycle counter, plus bits [0..(numEventCounters-1)] => event counters */
   pmu_write_cntenset((1 << 31) | ((1 << gPmuConfig.numEventCounters) - 1));

   /* Enable counters in PMCR (bit[0] = E=1) */
   pmcr = pmu_read_pmcr();
   pmcr |= 0x1;
7000028a:	432b      	orrs	r3, r5
    __asm__ volatile ("mcr p15, 0, %0, c9, c12, 0" : : "r" (val));
7000028c:	ee09 3f1c 	mcr	15, 0, r3, cr9, cr12, {0}

/* PMU User Access Enable Register (PMUSERENR) */
__STATIC_FORCEINLINE void pmu_enable_user_access(void)
{
    uint32_t val;
    __asm__ volatile ("mrc p15, 0, %0, c9, c14, 0" : "=r" (val));
70000290:	ee19 3f1e 	mrc	15, 0, r3, cr9, cr14, {0}
    val |= 1;  // Enable user mode access
70000294:	432b      	orrs	r3, r5
    __asm__ volatile ("mcr p15, 0, %0, c9, c14, 0" : : "r" (val));
70000296:	ee09 3f1e 	mcr	15, 0, r3, cr9, cr14, {0}
/* --------------------------------------------------------------------------
 * Init for the Chache Hits/Misses profile structure
 * -------------------------------------------------------------------------- */
void pmu_init_profile(void)
{
   memset(&gProfileObject, 0, sizeof(gProfileObject));
7000029a:	f245 23d8 	movw	r3, #21208	; 0x52d8
7000029e:	4621      	mov	r1, r4
700002a0:	f241 320c 	movw	r2, #4876	; 0x130c
700002a4:	f2c7 0300 	movt	r3, #28672	; 0x7000
700002a8:	4618      	mov	r0, r3
700002aa:	f002 fc51 	bl	70002b50 <memset>
   gProfileObject.logIndex = 0;
   gProfileObject.numEvents = PMU_MAX_EVENT_COUNTERS;
700002ae:	2203      	movs	r2, #3
700002b0:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
   printk("PMU Initialized.\r\n");
700002b4:	f244 70fc 	movw	r0, #18428	; 0x47fc
   gProfileObject.bCycleCounter = 1; /* We use cycle counter */
700002b8:	f883 5308 	strb.w	r5, [r3, #776]	; 0x308
   printk("PMU Initialized.\r\n");
700002bc:	f2c7 0000 	movt	r0, #28672	; 0x7000
   gProfileObject.numEvents = PMU_MAX_EVENT_COUNTERS;
700002c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   printk("PMU Initialized.\r\n");
700002c4:	f000 f940 	bl	70000548 <printk>
}
700002c8:	4620      	mov	r0, r4
700002ca:	bd38      	pop	{r3, r4, r5, pc}

700002cc <tm_initialize>:
   test_initialization_function();
700002cc:	4700      	bx	r0
700002ce:	bf00      	nop

700002d0 <tm_thread_create>:
{
700002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   tid = k_thread_create(&test_thread[thread_id], test_stack[thread_id], TM_TEST_STACK_SIZE, entry_function, NULL, NULL,
700002d2:	f644 1488 	movw	r4, #18824	; 0x4988
700002d6:	ebc0 1500 	rsb	r5, r0, r0, lsl #4
700002da:	f2c7 0400 	movt	r4, #28672	; 0x7000
{
700002de:	4613      	mov	r3, r2
700002e0:	b089      	sub	sp, #36	; 0x24
700002e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   tid = k_thread_create(&test_thread[thread_id], test_stack[thread_id], TM_TEST_STACK_SIZE, entry_function, NULL, NULL,
700002e6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
700002ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
700002ee:	2500      	movs	r5, #0
700002f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
700002f4:	9103      	str	r1, [sp, #12]
700002f6:	f647 1150 	movw	r1, #31056	; 0x7950
700002fa:	9504      	str	r5, [sp, #16]
700002fc:	f2c7 0100 	movt	r1, #28672	; 0x7000
70000300:	e9cd 5501 	strd	r5, r5, [sp, #4]
70000304:	eb01 2180 	add.w	r1, r1, r0, lsl #10
70000308:	9500      	str	r5, [sp, #0]
7000030a:	4620      	mov	r0, r4
7000030c:	e9cd 6706 	strd	r6, r7, [sp, #24]
70000310:	f001 fc38 	bl	70001b84 <z_impl_k_thread_create>
70000314:	4605      	mov	r5, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
70000316:	4620      	mov	r0, r4
70000318:	f001 fdde 	bl	70001ed8 <z_impl_k_thread_suspend>
	z_impl_k_wakeup(thread);
7000031c:	4620      	mov	r0, r4
7000031e:	f001 ffc1 	bl	700022a4 <z_impl_k_wakeup>
}
70000322:	1b60      	subs	r0, r4, r5
70000324:	bf18      	it	ne
70000326:	2001      	movne	r0, #1
70000328:	b009      	add	sp, #36	; 0x24
7000032a:	bdf0      	pop	{r4, r5, r6, r7, pc}

7000032c <tm_thread_resume>:
{
7000032c:	b508      	push	{r3, lr}
   k_thread_resume(&test_thread[thread_id]);
7000032e:	f644 1388 	movw	r3, #18824	; 0x4988
70000332:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
70000336:	f2c7 0300 	movt	r3, #28672	; 0x7000
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_RESUME);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_resume(thread);
7000033a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
7000033e:	f001 fe9f 	bl	70002080 <z_impl_k_thread_resume>
}
70000342:	2000      	movs	r0, #0
70000344:	bd08      	pop	{r3, pc}
70000346:	bf00      	nop

70000348 <tm_thread_sleep>:
   k_sleep(K_SECONDS(seconds));
70000348:	2100      	movs	r1, #0
7000034a:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
7000034e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
70000352:	00c0      	lsls	r0, r0, #3
	return z_impl_k_sleep(timeout);
70000354:	f001 bf98 	b.w	70002288 <z_impl_k_sleep>

70000358 <tm_queue_send_from_isr>:
{
70000358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
7000035c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   return k_msgq_put(&test_msgq[queue_id], message_ptr, K_FOREVER);
70000360:	f247 6c54 	movw	ip, #30292	; 0x7654
70000364:	eb00 0040 	add.w	r0, r0, r0, lsl #1
70000368:	f2c7 0c00 	movt	ip, #28672	; 0x7000
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
7000036c:	eb0c 1000 	add.w	r0, ip, r0, lsl #4
70000370:	f001 bb1e 	b.w	700019b0 <z_impl_k_msgq_put>

70000374 <tm_memory_pool_create>:
{
70000374:	b508      	push	{r3, lr}
   status = k_mem_slab_init(&test_slab[pool_id], &test_slab_buffer[pool_id][0], 128, 8);
70000376:	f246 51e4 	movw	r1, #26084	; 0x65e4
7000037a:	ebc0 0ec0 	rsb	lr, r0, r0, lsl #3
7000037e:	f247 5ce4 	movw	ip, #30180	; 0x75e4
70000382:	f2c7 0100 	movt	r1, #28672	; 0x7000
70000386:	f2c7 0c00 	movt	ip, #28672	; 0x7000
7000038a:	2308      	movs	r3, #8
7000038c:	eb01 2180 	add.w	r1, r1, r0, lsl #10
70000390:	2280      	movs	r2, #128	; 0x80
70000392:	eb0c 008e 	add.w	r0, ip, lr, lsl #2
70000396:	f001 fa6d 	bl	70001874 <k_mem_slab_init>
}
7000039a:	3800      	subs	r0, #0
7000039c:	bf18      	it	ne
7000039e:	2001      	movne	r0, #1
700003a0:	bd08      	pop	{r3, pc}
700003a2:	bf00      	nop

700003a4 <tm_memory_pool_allocate>:
   status = k_mem_slab_alloc(&test_slab[pool_id], (void**) memory_ptr, K_NO_WAIT);
700003a4:	f247 5ce4 	movw	ip, #30180	; 0x75e4
700003a8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
700003ac:	f2c7 0c00 	movt	ip, #28672	; 0x7000
{
700003b0:	b508      	push	{r3, lr}
   status = k_mem_slab_alloc(&test_slab[pool_id], (void**) memory_ptr, K_NO_WAIT);
700003b2:	2200      	movs	r2, #0
700003b4:	2300      	movs	r3, #0
700003b6:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
700003ba:	f001 fa87 	bl	700018cc <k_mem_slab_alloc>
}
700003be:	3800      	subs	r0, #0
700003c0:	bf18      	it	ne
700003c2:	2001      	movne	r0, #1
700003c4:	bd08      	pop	{r3, pc}
700003c6:	bf00      	nop

700003c8 <tm_memory_pool_deallocate>:
{
700003c8:	b508      	push	{r3, lr}
   k_mem_slab_free(&test_slab[pool_id], (void*) memory_ptr);
700003ca:	f247 53e4 	movw	r3, #30180	; 0x75e4
700003ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
700003d2:	f2c7 0300 	movt	r3, #28672	; 0x7000
700003d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
700003da:	f001 faa7 	bl	7000192c <k_mem_slab_free>
}
700003de:	2000      	movs	r0, #0
700003e0:	bd08      	pop	{r3, pc}
700003e2:	bf00      	nop

700003e4 <tm_pmu_profile_start>:
 * - Read "start" values
 * - Store them in the next free slot
 * -------------------------------------------------------------------------- */
void tm_pmu_profile_start(const char* name)
{
   uint32_t idx = gProfileObject.logIndex;
700003e4:	f245 2cd8 	movw	ip, #21208	; 0x52d8
700003e8:	f2c7 0c00 	movt	ip, #28672	; 0x7000
{
700003ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   uint32_t idx = gProfileObject.logIndex;
700003f0:	f8dc 4000 	ldr.w	r4, [ip]
   if (idx >= PMU_MAX_LOG_ENTRIES)
700003f4:	2c3f      	cmp	r4, #63	; 0x3f
700003f6:	d833      	bhi.n	70000460 <tm_pmu_profile_start+0x7c>
      /* no more space */
      return;
   }

   TM_PMUProfilePoint* p = &gProfileObject.point[idx];
   p->name = name;
700003f8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3

   for (uint32_t i = 0; i < gProfileObject.numEvents; i++)
700003fc:	f50c 5380 	add.w	r3, ip, #4096	; 0x1000
   p->name = name;
70000400:	eb04 0242 	add.w	r2, r4, r2, lsl #1
70000404:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
   for (uint32_t i = 0; i < gProfileObject.numEvents; i++)
70000408:	f8d3 5304 	ldr.w	r5, [r3, #772]	; 0x304
   p->name = name;
7000040c:	eb0c 0182 	add.w	r1, ip, r2, lsl #2
70000410:	0092      	lsls	r2, r2, #2
70000412:	6048      	str	r0, [r1, #4]
   for (uint32_t i = 0; i < gProfileObject.numEvents; i++)
70000414:	b1dd      	cbz	r5, 7000044e <tm_pmu_profile_start+0x6a>
70000416:	f64b 3650 	movw	r6, #47952	; 0xbb50
7000041a:	3234      	adds	r2, #52	; 0x34
7000041c:	2300      	movs	r3, #0
7000041e:	f2c7 0600 	movt	r6, #28672	; 0x7000
70000422:	4462      	add	r2, ip
    __asm__ volatile ("mcr p15, 0, %0, c9, c13, 2" : : "r" (val));
70000424:	461f      	mov	r7, r3
70000426:	f106 0804 	add.w	r8, r6, #4
    __asm__ volatile ("mcr p15, 0, %0, c9, c12, 5" : : "r" (counter_idx & 0x1F));
7000042a:	ee09 3fbc 	mcr	15, 0, r3, cr9, cr12, {5}
    __asm__ volatile ("mcr p15, 0, %0, c9, c13, 2" : : "r" (val));
7000042e:	ee09 7f5d 	mcr	15, 0, r7, cr9, cr13, {2}
    __asm__ volatile ("mrc p15, 0, %0, c9, c13, 2" : "=r" (val));
70000432:	ee19 0f5d 	mrc	15, 0, r0, cr9, cr13, {2}
   {
      pmu_select_event_counter(i);
      /* Reset the counters to 0 */
      pmu_write_evcounter(0);
      p->eventStart[i] = pmu_read_evcounter();
70000436:	f842 0f04 	str.w	r0, [r2, #4]!
   for (uint32_t i = 0; i < gProfileObject.numEvents; i++)
7000043a:	310c      	adds	r1, #12

      /* Also store name & type */
      p->events[i].name = gPmuEventCfg[i].name;
7000043c:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
70000440:	6088      	str	r0, [r1, #8]
      p->events[i].type = gPmuEventCfg[i].type;
70000442:	f858 0033 	ldr.w	r0, [r8, r3, lsl #3]
   for (uint32_t i = 0; i < gProfileObject.numEvents; i++)
70000446:	3301      	adds	r3, #1
      p->events[i].type = gPmuEventCfg[i].type;
70000448:	60c8      	str	r0, [r1, #12]
   for (uint32_t i = 0; i < gProfileObject.numEvents; i++)
7000044a:	42ab      	cmp	r3, r5
7000044c:	d1ed      	bne.n	7000042a <tm_pmu_profile_start+0x46>
    __asm__ volatile ("mrc p15, 0, %0, c9, c13, 0" : "=r" (val));
7000044e:	ee19 3f1d 	mrc	15, 0, r3, cr9, cr13, {0}
   }
   /* Immediately read them as "start" values */
   p->cycleCountStart = pmu_read_pmccntr();
70000452:	44a6      	add	lr, r4
70000454:	eb04 044e 	add.w	r4, r4, lr, lsl #1
70000458:	eb0c 0c84 	add.w	ip, ip, r4, lsl #2
7000045c:	f8cc 3008 	str.w	r3, [ip, #8]
}
70000460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

70000464 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
70000464:	b530      	push	{r4, r5, lr}
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
70000466:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
7000046a:	8863      	ldrh	r3, [r4, #2]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
7000046c:	085b      	lsrs	r3, r3, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
7000046e:	fab3 f383 	clz	r3, r3
70000472:	f1c3 031f 	rsb	r3, r3, #31
	void *cmem = &buf[c];
70000476:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
	if (b->next == 0U) {
7000047a:	eb00 0583 	add.w	r5, r0, r3, lsl #2
		((uint16_t *)cmem)[f] = val;
7000047e:	f10c 0c04 	add.w	ip, ip, #4
70000482:	fa1f fe81 	uxth.w	lr, r1
70000486:	692a      	ldr	r2, [r5, #16]
70000488:	b962      	cbnz	r2, 700004a4 <free_list_add+0x40>
		h->avail_buckets |= BIT(bidx);
7000048a:	2401      	movs	r4, #1
7000048c:	f36e 020f 	bfi	r2, lr, #0, #16
70000490:	f36e 421f 	bfi	r2, lr, #16, #16
70000494:	409c      	lsls	r4, r3
70000496:	68c3      	ldr	r3, [r0, #12]
70000498:	4323      	orrs	r3, r4
7000049a:	60c3      	str	r3, [r0, #12]
		b->next = c;
7000049c:	6129      	str	r1, [r5, #16]
7000049e:	f840 200c 	str.w	r2, [r0, ip]
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
	}
}
700004a2:	bd30      	pop	{r4, r5, pc}
	void *cmem = &buf[c];
700004a4:	00d3      	lsls	r3, r2, #3
		return ((uint16_t *)cmem)[f];
700004a6:	3304      	adds	r3, #4
700004a8:	5ac1      	ldrh	r1, [r0, r3]
		((uint16_t *)cmem)[f] = val;
700004aa:	f820 100c 	strh.w	r1, [r0, ip]
700004ae:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
700004b2:	80e2      	strh	r2, [r4, #6]
700004b4:	f8a1 e006 	strh.w	lr, [r1, #6]
700004b8:	f820 e003 	strh.w	lr, [r0, r3]
700004bc:	bd30      	pop	{r4, r5, pc}
700004be:	bf00      	nop

700004c0 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
700004c0:	3a04      	subs	r2, #4
{
700004c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
700004c6:	188d      	adds	r5, r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
700004c8:	1dcc      	adds	r4, r1, #7
700004ca:	f024 0407 	bic.w	r4, r4, #7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
700004ce:	f04f 0800 	mov.w	r8, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
700004d2:	f025 0507 	bic.w	r5, r5, #7
	heap->heap = h;
700004d6:	6004      	str	r4, [r0, #0]
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
700004d8:	1b2d      	subs	r5, r5, r4
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
700004da:	4641      	mov	r1, r8
700004dc:	f104 0010 	add.w	r0, r4, #16
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
700004e0:	08ef      	lsrs	r7, r5, #3
	return 31 - __builtin_clz(usable_sz);
700004e2:	fab7 f287 	clz	r2, r7
	h->avail_buckets = 0;
700004e6:	e9c4 7802 	strd	r7, r8, [r4, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
700004ea:	f1c2 0624 	rsb	r6, r2, #36	; 0x24
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
700004ee:	f1c2 0220 	rsb	r2, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
700004f2:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
700004f4:	3607      	adds	r6, #7
		h->buckets[i].next = 0;
700004f6:	0092      	lsls	r2, r2, #2
700004f8:	08f6      	lsrs	r6, r6, #3
700004fa:	f002 fb29 	bl	70002b50 <memset>
		((uint16_t *)cmem)[f] = val;
700004fe:	f8a4 8000 	strh.w	r8, [r4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
70000502:	1bbb      	subs	r3, r7, r6
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
70000504:	4620      	mov	r0, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
70000506:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
70000508:	f042 0201 	orr.w	r2, r2, #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
7000050c:	0059      	lsls	r1, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
7000050e:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
70000510:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
70000514:	8051      	strh	r1, [r2, #2]
70000516:	1962      	adds	r2, r4, r5
70000518:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
7000051c:	4631      	mov	r1, r6
7000051e:	5363      	strh	r3, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
70000520:	2301      	movs	r3, #1
70000522:	8053      	strh	r3, [r2, #2]
}
70000524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
70000528:	f7ff bf9c 	b.w	70000464 <free_list_add>

7000052c <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
7000052c:	2000      	movs	r0, #0
7000052e:	4770      	bx	lr

70000530 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	ARG_UNUSED(ctx_p);
	return _char_out(c);
70000530:	f64b 3368 	movw	r3, #47976	; 0xbb68
70000534:	f2c7 0300 	movt	r3, #28672	; 0x7000
70000538:	681b      	ldr	r3, [r3, #0]
7000053a:	4718      	bx	r3

7000053c <__printk_hook_install>:
	_char_out = fn;
7000053c:	f64b 3368 	movw	r3, #47976	; 0xbb68
70000540:	f2c7 0300 	movt	r3, #28672	; 0x7000
70000544:	6018      	str	r0, [r3, #0]
}
70000546:	4770      	bx	lr

70000548 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
70000548:	b40f      	push	{r0, r1, r2, r3}
7000054a:	b500      	push	{lr}
		FILE console = FDEV_SETUP_STREAM((int(*)(char, FILE *))char_out,
7000054c:	f240 5031 	movw	r0, #1329	; 0x531
{
70000550:	b087      	sub	sp, #28
		FILE console = FDEV_SETUP_STREAM((int(*)(char, FILE *))char_out,
70000552:	2300      	movs	r3, #0
{
70000554:	aa08      	add	r2, sp, #32
		FILE console = FDEV_SETUP_STREAM((int(*)(char, FILE *))char_out,
70000556:	f04f 0c02 	mov.w	ip, #2
7000055a:	f2c7 0000 	movt	r0, #28672	; 0x7000
7000055e:	e9cd 3304 	strd	r3, r3, [sp, #16]
70000562:	e9cd 3002 	strd	r3, r0, [sp, #8]
		(void) vfprintf(&console, fmt, ap);
70000566:	a802      	add	r0, sp, #8
{
70000568:	f852 1b04 	ldr.w	r1, [r2], #4
		FILE console = FDEV_SETUP_STREAM((int(*)(char, FILE *))char_out,
7000056c:	f88d c00a 	strb.w	ip, [sp, #10]
	va_list ap;

	va_start(ap, fmt);
70000570:	9201      	str	r2, [sp, #4]
		(void) vfprintf(&console, fmt, ap);
70000572:	f002 fc91 	bl	70002e98 <__l_vfprintf>

	vprintk(fmt, ap);

	va_end(ap);
}
70000576:	b007      	add	sp, #28
70000578:	f85d eb04 	ldr.w	lr, [sp], #4
7000057c:	b004      	add	sp, #16
7000057e:	4770      	bx	lr

70000580 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
70000580:	468c      	mov	ip, r1
70000582:	4604      	mov	r4, r0
70000584:	4611      	mov	r1, r2

	sys_rand_get((uint8_t *)&stack_guard, sizeof(stack_guard));
	__stack_chk_guard = stack_guard;
	__stack_chk_guard <<= 8;
#endif	/* CONFIG_STACK_CANARIES */
	entry(p1, p2, p3);
70000586:	4660      	mov	r0, ip
70000588:	461a      	mov	r2, r3
{
7000058a:	b508      	push	{r3, lr}
	entry(p1, p2, p3);
7000058c:	47a0      	blx	r4
	return z_impl_k_sched_current_thread_query();
7000058e:	f001 feaf 	bl	700022f0 <z_impl_k_sched_current_thread_query>
	z_impl_k_thread_abort(thread);
70000592:	f001 feb3 	bl	700022fc <z_impl_k_thread_abort>
70000596:	bf00      	nop

70000598 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_GENERATED_INCLUDE_PATH, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BENCHMARK_NUM_ITERATIONS, 1000);

GEN_ABS_SYM_END
70000598:	4770      	bx	lr
7000059a:	bf00      	nop

7000059c <z_soc_irq_get_active>:

#include "soc.h"

unsigned int z_soc_irq_get_active(void)
{
	return z_vim_irq_get_active();
7000059c:	f000 bb4c 	b.w	70000c38 <z_vim_irq_get_active>

700005a0 <z_soc_irq_eoi>:
}

void z_soc_irq_eoi(unsigned int irq)
{
	z_vim_irq_eoi(irq);
700005a0:	f000 bb70 	b.w	70000c84 <z_vim_irq_eoi>

700005a4 <z_soc_irq_init>:
}

void z_soc_irq_init(void)
{
	z_vim_irq_init();
700005a4:	f000 bb76 	b.w	70000c94 <z_vim_irq_init>

700005a8 <z_soc_irq_priority_set>:
}

void z_soc_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
	/* Configure interrupt type and priority */
	z_vim_irq_priority_set(irq, prio, flags);
700005a8:	f000 bbac 	b.w	70000d04 <z_vim_irq_priority_set>

700005ac <z_soc_irq_enable>:
}

void z_soc_irq_enable(unsigned int irq)
{
	/* Enable interrupt */
	z_vim_irq_enable(irq);
700005ac:	f000 bbd6 	b.w	70000d5c <z_vim_irq_enable>

700005b0 <soc_reset_hook>:
	/* Check if interrupt is enabled */
	return z_vim_irq_is_enabled(irq);
}

void soc_reset_hook(void)
{
700005b0:	b508      	push	{r3, lr}
 *
 */
static ALWAYS_INLINE void sys_cache_instr_enable(void)
{
#if defined(CONFIG_CACHE_MANAGEMENT) && defined(CONFIG_ICACHE)
	cache_instr_enable();
700005b2:	f000 fa35 	bl	70000a20 <arch_icache_enable>
	/*
	 * Enable the caches only if configured to do so.
	 */
	sys_cache_instr_enable();
	sys_cache_data_enable();
700005b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cache_data_enable();
700005ba:	f000 ba23 	b.w	70000a04 <arch_dcache_enable>
700005be:	bf00      	nop

700005c0 <z_arm_fatal_error>:

		LOG_ERR("Unhandled IRQn: %d", irqn);
	}
#endif

	z_fatal_error(reason, esf);
700005c0:	f000 bff8 	b.w	700015b4 <z_fatal_error>

700005c4 <z_do_kernel_oops>:
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 */
void z_do_kernel_oops(const struct arch_esf *esf, _callee_saved_t *callee_regs, uint32_t exc_return)
{
700005c4:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
700005c6:	6800      	ldr	r0, [r0, #0]
700005c8:	f000 bff4 	b.w	700015b4 <z_fatal_error>

700005cc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
700005cc:	b508      	push	{r3, lr}
	handler();
700005ce:	f64b 33c8 	movw	r3, #48072	; 0xbbc8
700005d2:	f2c7 0300 	movt	r3, #28672	; 0x7000
700005d6:	681b      	ldr	r3, [r3, #0]
700005d8:	4798      	blx	r3
	z_arm_int_exit();
}
700005da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
700005de:	f002 bff3 	b.w	700035c8 <__z_arm_int_exit_from_thumb>
700005e2:	bf00      	nop

700005e4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
700005e4:	e320f003 	wfi
    b z_SysNmiOnReset
700005e8:	eafffffd 	b	700005e4 <z_SysNmiOnReset>

700005ec <z_arm_undef_instruction>:
SECTION_SUBSEC_FUNC(TEXT, __exc, z_arm_undef_instruction)
	/*
	 * The undefined instruction address is offset by 2 if the previous
	 * mode is Thumb; otherwise, it is offset by 4.
	 */
	push {r0}
700005ec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
	mrs r0, spsr
700005f0:	e14f0000 	mrs	r0, SPSR
	tst r0, #T_BIT
700005f4:	e3100020 	tst	r0, #32
	subeq lr, #4	/* ARM   (!T_BIT) */
700005f8:	024ee004 	subeq	lr, lr, #4
	subne lr, #2	/* Thumb (T_BIT) */
700005fc:	124ee002 	subne	lr, lr, #2
	pop {r0}
70000600:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)

	/*
	 * Store r0-r3, r12, lr, lr_und and spsr_und into the stack to
	 * construct an exception stack frame.
	 */
	srsdb sp!, #MODE_UND
70000604:	f96d051b 	srsdb	sp!, #27
	stmfd sp, {r0-r3, r12, lr}^
70000608:	e94d500f 	stmdb	sp, {r0, r1, r2, r3, ip, lr}^
	sub sp, #24
7000060c:	e24dd018 	sub	sp, sp, #24

	/* Increment exception nesting count */
	get_cpu r2
70000610:	ee1d2f70 	mrc	15, 0, r2, cr13, cr0, {3}
70000614:	e3c22003 	bic	r2, r2, #3
	ldr r1, [r2, #___cpu_t_nested_OFFSET]
70000618:	e5921000 	ldr	r1, [r2]
	add r1, r1, #1
7000061c:	e2811001 	add	r1, r1, #1
	str r1, [r2, #___cpu_t_nested_OFFSET]
70000620:	e5821000 	str	r1, [r2]
	cps #MODE_UND

	mov r0, sp
	mov sp, r1
#else
	mov r0, sp
70000624:	e1a0000d 	mov	r0, sp
#endif

	bl z_arm_fault_undef_instruction
70000628:	fa00001b 	blx	7000069c <z_arm_fault_undef_instruction>
	exception_exit

	b z_arm_exc_exit
7000062c:	ea000153 	b	70000b80 <z_arm_exc_exit>

70000630 <z_arm_prefetch_abort>:
SECTION_SUBSEC_FUNC(TEXT, __exc, z_arm_prefetch_abort)
	/*
	 * The faulting instruction address is always offset by 4 for the
	 * prefetch abort exceptions.
	 */
	sub lr, #4
70000630:	e24ee004 	sub	lr, lr, #4

	exception_entry MODE_ABT
70000634:	f96d0517 	srsdb	sp!, #23
70000638:	e94d500f 	stmdb	sp, {r0, r1, r2, r3, ip, lr}^
7000063c:	e24dd018 	sub	sp, sp, #24
70000640:	e1a0000d 	mov	r0, sp
70000644:	ee1d2f70 	mrc	15, 0, r2, cr13, cr0, {3}
70000648:	e3c22003 	bic	r2, r2, #3
7000064c:	e5921000 	ldr	r1, [r2]
70000650:	e2811001 	add	r1, r1, #1
70000654:	e5821000 	str	r1, [r2]
	bl z_arm_fault_prefetch
70000658:	fa000013 	blx	700006ac <z_arm_fault_prefetch>
	exception_exit

	b z_arm_exc_exit
7000065c:	ea000147 	b	70000b80 <z_arm_exc_exit>

70000660 <z_arm_data_abort>:
SECTION_SUBSEC_FUNC(TEXT, __exc, z_arm_data_abort)
	/*
	 * The faulting instruction address is always offset by 8 for the data
	 * abort exceptions.
	 */
	sub lr, #8
70000660:	e24ee008 	sub	lr, lr, #8

	exception_entry MODE_ABT
70000664:	f96d0517 	srsdb	sp!, #23
70000668:	e94d500f 	stmdb	sp, {r0, r1, r2, r3, ip, lr}^
7000066c:	e24dd018 	sub	sp, sp, #24
70000670:	e1a0000d 	mov	r0, sp
70000674:	ee1d2f70 	mrc	15, 0, r2, cr13, cr0, {3}
70000678:	e3c22003 	bic	r2, r2, #3
7000067c:	e5921000 	ldr	r1, [r2]
70000680:	e2811001 	add	r1, r1, #1
70000684:	e5821000 	str	r1, [r2]
	bl z_arm_fault_data
70000688:	fa00002c 	blx	70000740 <z_arm_fault_data>
	/*
	 * If z_arm_fault_data returns false, then we recovered from
	 * the error.  It may have updated $pc, so copy $pc back to
	 * the true esf from the one passed to z_arm_fault_data.
	 */
	cmp r0, #0
7000068c:	e3500000 	cmp	r0, #0
	ldreq r1, [sp, #24 + FPU_SF_SIZE]
70000690:	059d1018 	ldreq	r1, [sp, #24]

	exception_exit

	streq r1, [sp, #24 + FPU_SF_SIZE]
70000694:	058d1018 	streq	r1, [sp, #24]

	b z_arm_exc_exit
70000698:	ea000138 	b	70000b80 <z_arm_exc_exit>

7000069c <z_arm_fault_undef_instruction>:
 * @brief Undefined instruction fault handler
 *
 * @return Returns true if the fault is fatal
 */
bool z_arm_fault_undef_instruction(struct arch_esf *esf)
{
7000069c:	4601      	mov	r1, r0
	uint32_t reason = IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) ?
			  K_ERR_CPU_EXCEPTION :
			  K_ERR_ARM_UNDEFINED_INSTRUCTION;

	/* Invoke kernel fatal exception handler */
	z_arm_fatal_error(reason, esf);
7000069e:	202d      	movs	r0, #45	; 0x2d
{
700006a0:	b508      	push	{r3, lr}
	z_arm_fatal_error(reason, esf);
700006a2:	f7ff ff8d 	bl	700005c0 <z_arm_fatal_error>

	/* All undefined instructions are treated as fatal for now */
	return true;
}
700006a6:	2001      	movs	r0, #1
700006a8:	bd08      	pop	{r3, pc}
700006aa:	bf00      	nop

700006ac <z_arm_fault_prefetch>:
 * @brief Prefetch abort fault handler
 *
 * @return Returns true if the fault is fatal
 */
bool z_arm_fault_prefetch(struct arch_esf *esf)
{
700006ac:	4601      	mov	r1, r0
700006ae:	b508      	push	{r3, lr}
    \return               Instruction Fault Status Register value
 */
__STATIC_FORCEINLINE uint32_t __get_IFSR(void)
{
  uint32_t result;
  __get_CP(15, 0, result, 5, 0, 1);
700006b0:	ee15 2f30 	mrc	15, 0, r2, cr5, cr0, {1}
	__get_CP(15, 0, result, 6, 0, 2);
700006b4:	ee16 3f50 	mrc	15, 0, r3, cr6, cr0, {2}
	/* Read and parse Instruction Fault Status Register (IFSR) */
	uint32_t ifsr = __get_IFSR();
#if defined(CONFIG_AARCH32_ARMV8_R)
	uint32_t fs = ifsr & IFSR_STATUS_Msk;
#else
	uint32_t fs = ((ifsr & IFSR_FS1_Msk) >> 6) | (ifsr & IFSR_FS0_Msk);
700006b8:	0993      	lsrs	r3, r2, #6
700006ba:	f003 0310 	and.w	r3, r3, #16
700006be:	f002 020f 	and.w	r2, r2, #15
700006c2:	4313      	orrs	r3, r2
	switch (status) {
700006c4:	2b19      	cmp	r3, #25
700006c6:	d80e      	bhi.n	700006e6 <z_arm_fault_prefetch+0x3a>
700006c8:	e8df f003 	tbb	[pc, r3]
700006cc:	0d1c3717 	.word	0x0d1c3717
700006d0:	0d0d0d0d 	.word	0x0d0d0d0d
700006d4:	0d0d0d23 	.word	0x0d0d0d23
700006d8:	0d0d280d 	.word	0x0d0d280d
700006dc:	0d0d0d0d 	.word	0x0d0d0d0d
700006e0:	0d2d0d0d 	.word	0x0d2d0d0d
700006e4:	1232      	.short	0x1232
	uint32_t reason = K_ERR_CPU_EXCEPTION;
700006e6:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	/* Invoke kernel fatal exception handler */
	z_arm_fatal_error(reason, esf);
700006e8:	f7ff ff6a 	bl	700005c0 <z_arm_fatal_error>

	/* All prefetch aborts are treated as fatal for now */
	return true;
}
700006ec:	2001      	movs	r0, #1
700006ee:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_SYNC_PARITY_ERROR;
700006f0:	2033      	movs	r0, #51	; 0x33
	z_arm_fatal_error(reason, esf);
700006f2:	f7ff ff65 	bl	700005c0 <z_arm_fatal_error>
}
700006f6:	2001      	movs	r0, #1
700006f8:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_BACKGROUND_FAULT;
700006fa:	202f      	movs	r0, #47	; 0x2f
	z_arm_fatal_error(reason, esf);
700006fc:	f7ff ff60 	bl	700005c0 <z_arm_fatal_error>
}
70000700:	2001      	movs	r0, #1
70000702:	bd08      	pop	{r3, pc}
	__get_CP(14, 0, result, 0, 1, 0);
70000704:	ee10 3e11 	mrc	14, 0, r3, cr0, cr1, {0}
		reason = K_ERR_ARM_DEBUG_EVENT;
70000708:	2035      	movs	r0, #53	; 0x35
	z_arm_fatal_error(reason, esf);
7000070a:	f7ff ff59 	bl	700005c0 <z_arm_fatal_error>
}
7000070e:	2001      	movs	r0, #1
70000710:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_SYNC_EXTERNAL_ABORT;
70000712:	2031      	movs	r0, #49	; 0x31
	z_arm_fatal_error(reason, esf);
70000714:	f7ff ff54 	bl	700005c0 <z_arm_fatal_error>
}
70000718:	2001      	movs	r0, #1
7000071a:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_PERMISSION_FAULT;
7000071c:	2030      	movs	r0, #48	; 0x30
	z_arm_fatal_error(reason, esf);
7000071e:	f7ff ff4f 	bl	700005c0 <z_arm_fatal_error>
}
70000722:	2001      	movs	r0, #1
70000724:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_ASYNC_EXTERNAL_ABORT;
70000726:	2032      	movs	r0, #50	; 0x32
	z_arm_fatal_error(reason, esf);
70000728:	f7ff ff4a 	bl	700005c0 <z_arm_fatal_error>
}
7000072c:	2001      	movs	r0, #1
7000072e:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_ASYNC_PARITY_ERROR;
70000730:	2034      	movs	r0, #52	; 0x34
	z_arm_fatal_error(reason, esf);
70000732:	f7ff ff45 	bl	700005c0 <z_arm_fatal_error>
}
70000736:	2001      	movs	r0, #1
70000738:	bd08      	pop	{r3, pc}
	switch (status) {
7000073a:	202e      	movs	r0, #46	; 0x2e
7000073c:	e7d4      	b.n	700006e8 <z_arm_fault_prefetch+0x3c>
7000073e:	bf00      	nop

70000740 <z_arm_fault_data>:
 * @brief Data abort fault handler
 *
 * @return Returns true if the fault is fatal
 */
bool z_arm_fault_data(struct arch_esf *esf)
{
70000740:	4601      	mov	r1, r0
70000742:	b508      	push	{r3, lr}
  __get_CP(15, 0, result, 5, 0, 0);
70000744:	ee15 2f10 	mrc	15, 0, r2, cr5, cr0, {0}
	__get_CP(15, 0, result, 6, 0, 0);
70000748:	ee16 3f10 	mrc	15, 0, r3, cr6, cr0, {0}
	/* Read and parse Data Fault Status Register (DFSR) */
	uint32_t dfsr = __get_DFSR();
#if defined(CONFIG_AARCH32_ARMV8_R)
	uint32_t fs = dfsr & DFSR_STATUS_Msk;
#else
	uint32_t fs = ((dfsr & DFSR_FS1_Msk) >> 6) | (dfsr & DFSR_FS0_Msk);
7000074c:	0993      	lsrs	r3, r2, #6
7000074e:	f003 0310 	and.w	r3, r3, #16
70000752:	f002 020f 	and.w	r2, r2, #15
70000756:	4313      	orrs	r3, r2
	switch (status) {
70000758:	2b19      	cmp	r3, #25
7000075a:	d80e      	bhi.n	7000077a <z_arm_fault_data+0x3a>
7000075c:	e8df f003 	tbb	[pc, r3]
70000760:	0d1c3717 	.word	0x0d1c3717
70000764:	0d0d0d0d 	.word	0x0d0d0d0d
70000768:	0d0d0d23 	.word	0x0d0d0d23
7000076c:	0d0d280d 	.word	0x0d0d280d
70000770:	0d0d0d0d 	.word	0x0d0d0d0d
70000774:	0d2d0d0d 	.word	0x0d2d0d0d
70000778:	1232      	.short	0x1232
	uint32_t reason = K_ERR_CPU_EXCEPTION;
7000077a:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	/* Invoke kernel fatal exception handler */
	z_arm_fatal_error(reason, esf);
7000077c:	f7ff ff20 	bl	700005c0 <z_arm_fatal_error>

	/* All data aborts are treated as fatal for now */
	return true;
}
70000780:	2001      	movs	r0, #1
70000782:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_SYNC_PARITY_ERROR;
70000784:	2033      	movs	r0, #51	; 0x33
	z_arm_fatal_error(reason, esf);
70000786:	f7ff ff1b 	bl	700005c0 <z_arm_fatal_error>
}
7000078a:	2001      	movs	r0, #1
7000078c:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_BACKGROUND_FAULT;
7000078e:	202f      	movs	r0, #47	; 0x2f
	z_arm_fatal_error(reason, esf);
70000790:	f7ff ff16 	bl	700005c0 <z_arm_fatal_error>
}
70000794:	2001      	movs	r0, #1
70000796:	bd08      	pop	{r3, pc}
	__get_CP(14, 0, result, 0, 1, 0);
70000798:	ee10 3e11 	mrc	14, 0, r3, cr0, cr1, {0}
		reason = K_ERR_ARM_DEBUG_EVENT;
7000079c:	2035      	movs	r0, #53	; 0x35
	z_arm_fatal_error(reason, esf);
7000079e:	f7ff ff0f 	bl	700005c0 <z_arm_fatal_error>
}
700007a2:	2001      	movs	r0, #1
700007a4:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_SYNC_EXTERNAL_ABORT;
700007a6:	2031      	movs	r0, #49	; 0x31
	z_arm_fatal_error(reason, esf);
700007a8:	f7ff ff0a 	bl	700005c0 <z_arm_fatal_error>
}
700007ac:	2001      	movs	r0, #1
700007ae:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_PERMISSION_FAULT;
700007b0:	2030      	movs	r0, #48	; 0x30
	z_arm_fatal_error(reason, esf);
700007b2:	f7ff ff05 	bl	700005c0 <z_arm_fatal_error>
}
700007b6:	2001      	movs	r0, #1
700007b8:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_ASYNC_EXTERNAL_ABORT;
700007ba:	2032      	movs	r0, #50	; 0x32
	z_arm_fatal_error(reason, esf);
700007bc:	f7ff ff00 	bl	700005c0 <z_arm_fatal_error>
}
700007c0:	2001      	movs	r0, #1
700007c2:	bd08      	pop	{r3, pc}
		reason = K_ERR_ARM_ASYNC_PARITY_ERROR;
700007c4:	2034      	movs	r0, #52	; 0x34
	z_arm_fatal_error(reason, esf);
700007c6:	f7ff fefb 	bl	700005c0 <z_arm_fatal_error>
}
700007ca:	2001      	movs	r0, #1
700007cc:	bd08      	pop	{r3, pc}
	switch (status) {
700007ce:	202e      	movs	r0, #46	; 0x2e
700007d0:	e7d4      	b.n	7000077c <z_arm_fault_data+0x3c>
700007d2:	bf00      	nop

700007d4 <z_arm_interrupt_init>:
	/*
	 * Initialise interrupt controller.
	 */
#ifdef CONFIG_ARM_CUSTOM_INTERRUPT_CONTROLLER
	/* Invoke SoC-specific interrupt controller initialisation */
	z_soc_irq_init();
700007d4:	f7ff bee6 	b.w	700005a4 <z_soc_irq_init>

700007d8 <relocate_vector_table>:
		write_sysreg64(val, op1, CRm);				\
	}

MAKE_REG_HELPER(mpuir,	     0, 0, 0, 4);
MAKE_REG_HELPER(mpidr,	     0, 0, 0, 5);
MAKE_REG_HELPER(sctlr,	     0, 1, 0, 0);
700007d8:	ee11 3f10 	mrc	15, 0, r3, cr1, cr0, {0}

void __weak relocate_vector_table(void)
{
#if defined(CONFIG_XIP) && (CONFIG_FLASH_BASE_ADDRESS != 0) ||                                     \
	!defined(CONFIG_XIP) && (CONFIG_SRAM_BASE_ADDRESS != 0)
	write_sctlr(read_sctlr() & ~HIVECS);
700007dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
700007e0:	ee01 3f10 	mcr	15, 0, r3, cr1, cr0, {0}
	size_t vector_size = (size_t)_vector_end - (size_t)_vector_start;
700007e4:	f240 023c 	movw	r2, #60	; 0x3c
700007e8:	f240 0100 	movw	r1, #0
700007ec:	f2c7 0100 	movt	r1, #28672	; 0x7000
	(void)memcpy(VECTOR_ADDRESS, _vector_start, vector_size);
700007f0:	2000      	movs	r0, #0
	size_t vector_size = (size_t)_vector_end - (size_t)_vector_start;
700007f2:	f2c7 0200 	movt	r2, #28672	; 0x7000
	(void)memcpy(VECTOR_ADDRESS, _vector_start, vector_size);
700007f6:	1a52      	subs	r2, r2, r1
700007f8:	f002 b942 	b.w	70002a80 <memcpy>

700007fc <z_arm_relocate_vector_table>:
#endif

#endif /* !CONFIG_AARCH32_ARMV8_R */

void z_arm_relocate_vector_table(void)
{
700007fc:	b508      	push	{r3, lr}
	relocate_vector_table();
700007fe:	f7ff ffeb 	bl	700007d8 <relocate_vector_table>
}
70000802:	bd08      	pop	{r3, pc}

70000804 <__start>:
    ldr r0, =IMP_CSCTLR(CONFIG_CPU_CORTEX_R52_ICACHE_FLASH_WAY,
                        CONFIG_CPU_CORTEX_R52_DCACHE_FLASH_WAY)
    mcr p15, 1, r0, c9, c1, 0
#endif

    ldr r0, =arm_cpu_boot_params
70000804:	e59f0054 	ldr	r0, [pc, #84]	; 70000860 <__start+0x5c>
    b 2f

_primary_core:
#endif

    ldr r4, =z_prep_c
70000808:	e59f4054 	ldr	r4, [pc, #84]	; 70000864 <__start+0x60>
    ldr r5, =(z_arm_fiq_stack + CONFIG_ARMV7_FIQ_STACK_SIZE)
7000080c:	e59f5054 	ldr	r5, [pc, #84]	; 70000868 <__start+0x64>
    ldr r6, =(z_interrupt_stacks + CONFIG_ISR_STACK_SIZE)
70000810:	e59f6054 	ldr	r6, [pc, #84]	; 7000086c <__start+0x68>
    ldr r7, =(z_arm_abort_stack + CONFIG_ARMV7_EXCEPTION_STACK_SIZE)
70000814:	e59f7054 	ldr	r7, [pc, #84]	; 70000870 <__start+0x6c>
    ldr r8, =(z_arm_undef_stack + CONFIG_ARMV7_EXCEPTION_STACK_SIZE)
70000818:	e59f8054 	ldr	r8, [pc, #84]	; 70000874 <__start+0x70>
    ldr r9, =(z_arm_svc_stack + CONFIG_ARMV7_SVC_STACK_SIZE)
7000081c:	e59f9054 	ldr	r9, [pc, #84]	; 70000878 <__start+0x74>
    ldr r10, =(z_arm_sys_stack + CONFIG_ARMV7_SYS_STACK_SIZE)
70000820:	e59fa054 	ldr	sl, [pc, #84]	; 7000087c <__start+0x78>
    /*
     * Configure stack.
     */

    /* FIQ mode stack */
    msr CPSR_c, #(MODE_FIQ | I_BIT | F_BIT)
70000824:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
    mov sp, r5
70000828:	e1a0d005 	mov	sp, r5

    /* IRQ mode stack */
    msr CPSR_c, #(MODE_IRQ | I_BIT | F_BIT)
7000082c:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
    mov sp, r6
70000830:	e1a0d006 	mov	sp, r6

    /* ABT mode stack */
    msr CPSR_c, #(MODE_ABT | I_BIT | F_BIT)
70000834:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
    mov sp, r7
70000838:	e1a0d007 	mov	sp, r7

    /* UND mode stack */
    msr CPSR_c, #(MODE_UND | I_BIT | F_BIT)
7000083c:	e321f0db 	msr	CPSR_c, #219	; 0xdb
    mov sp, r8
70000840:	e1a0d008 	mov	sp, r8

    /* SVC mode stack */
    msr CPSR_c, #(MODE_SVC | I_BIT | F_BIT)
70000844:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
    mov sp, r9
70000848:	e1a0d009 	mov	sp, r9

    /* SYS mode stack */
    msr CPSR_c, #(MODE_SYS | I_BIT | F_BIT)
7000084c:	e321f0df 	msr	CPSR_c, #223	; 0xdf
    mov sp, r10
70000850:	e1a0d00a 	mov	sp, sl

#if defined(CONFIG_SOC_RESET_HOOK)
    /* Execute platform-specific initialisation if applicable */
    bl soc_reset_hook
70000854:	faffff55 	blx	700005b0 <soc_reset_hook>

#if defined(CONFIG_DISABLE_TCM_ECC)
    bl z_arm_tcm_disable_ecc
#endif

    bl z_arm_relocate_vector_table
70000858:	faffffe7 	blx	700007fc <z_arm_relocate_vector_table>

    bx r4
7000085c:	e12fff14 	bx	r4
    ldr r0, =arm_cpu_boot_params
70000860:	7000bbcc 	.word	0x7000bbcc
    ldr r4, =z_prep_c
70000864:	70000889 	.word	0x70000889
    ldr r5, =(z_arm_fiq_stack + CONFIG_ARMV7_FIQ_STACK_SIZE)
70000868:	7000aa50 	.word	0x7000aa50
    ldr r6, =(z_interrupt_stacks + CONFIG_ISR_STACK_SIZE)
7000086c:	7000b250 	.word	0x7000b250
    ldr r7, =(z_arm_abort_stack + CONFIG_ARMV7_EXCEPTION_STACK_SIZE)
70000870:	7000a950 	.word	0x7000a950
    ldr r8, =(z_arm_undef_stack + CONFIG_ARMV7_EXCEPTION_STACK_SIZE)
70000874:	7000a850 	.word	0x7000a850
    ldr r9, =(z_arm_svc_stack + CONFIG_ARMV7_SVC_STACK_SIZE)
70000878:	7000a750 	.word	0x7000a750
    ldr r10, =(z_arm_sys_stack + CONFIG_ARMV7_SYS_STACK_SIZE)
7000087c:	7000a550 	.word	0x7000a550

70000880 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
70000880:	2100      	movs	r1, #0
70000882:	2001      	movs	r0, #1
70000884:	f7ff be9c 	b.w	700005c0 <z_arm_fatal_error>

70000888 <z_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_prep_c(void)
{
70000888:	b508      	push	{r3, lr}
MAKE_REG_HELPER(prlar,	     0, 6, 3, 1);
MAKE_REG_HELPER(mair0,       0, 10, 2, 0);
MAKE_REG_HELPER(vbar,        0, 12, 0, 0);
MAKE_REG_HELPER(cntv_ctl,    0, 14,  3, 1);
MAKE_REG_HELPER(ctr,         0, 0, 0, 1);
MAKE_REG_HELPER(tpidruro,    0, 13, 0, 3);
7000088a:	f247 7328 	movw	r3, #30504	; 0x7728
7000088e:	f2c7 0300 	movt	r3, #28672	; 0x7000
70000892:	ee0d 3f70 	mcr	15, 0, r3, cr13, cr0, {3}
	write_tpidruro((uintptr_t)&_kernel.cpus[0]);

#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
70000896:	f000 ff3f 	bl	70001718 <z_bss_zero>
	z_data_copy();
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
7000089a:	f7ff ff9b 	bl	700007d4 <z_arm_interrupt_init>
#if CONFIG_ARCH_CACHE
	arch_cache_init();
7000089e:	f000 f8cf 	bl	70000a40 <arch_cache_init>
	z_arm_mpu_init();
	z_arm_configure_static_mpu_regions();
#elif defined(CONFIG_ARM_AARCH32_MMU)
	z_arm_mmu_init();
#endif
	z_cstart();
700008a2:	f000 ff47 	bl	70001734 <z_cstart>
700008a6:	bf00      	nop

700008a8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
700008a8:	b430      	push	{r4, r5}
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
#endif

	iframe->a1 = (uint32_t)entry;
700008aa:	f842 3c20 	str.w	r3, [r2, #-32]
#if defined(CONFIG_BIG_ENDIAN)
	iframe->xpsr |= E_BIT;
#endif /* CONFIG_BIG_ENDIAN */

#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
700008ae:	f240 153f 	movw	r5, #319	; 0x13f
{
700008b2:	9b02      	ldr	r3, [sp, #8]
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
700008b4:	f1a2 0420 	sub.w	r4, r2, #32
	iframe->a2 = (uint32_t)p1;
700008b8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc = (uint32_t)z_thread_entry;
700008bc:	f240 5381 	movw	r3, #1409	; 0x581
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
700008c0:	2100      	movs	r1, #0
	iframe->pc = (uint32_t)z_thread_entry;
700008c2:	f2c7 0300 	movt	r3, #28672	; 0x7000
	iframe->xpsr |= T_BIT;
700008c6:	f842 5c04 	str.w	r5, [r2, #-4]
	iframe->pc = (uint32_t)z_thread_entry;
700008ca:	f842 3c08 	str.w	r3, [r2, #-8]
{
700008ce:	9b03      	ldr	r3, [sp, #12]
	iframe->a3 = (uint32_t)p2;
700008d0:	f842 3c18 	str.w	r3, [r2, #-24]
{
700008d4:	9b04      	ldr	r3, [sp, #16]
	iframe->a4 = (uint32_t)p3;
700008d6:	f842 3c14 	str.w	r3, [r2, #-20]
	thread->callee_saved.psp = (uint32_t)iframe;
700008da:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
700008dc:	66c1      	str	r1, [r0, #108]	; 0x6c
	thread->switch_handle = thread;
	/* thread birth happens through the exception return path */
	thread->arch.exception_depth = 1;
	thread->callee_saved.lr = (uint32_t)z_arm_cortex_ar_exit_exc;
#endif
}
700008de:	bc30      	pop	{r4, r5}
700008e0:	4770      	bx	lr
700008e2:	bf00      	nop

700008e4 <arch_cpu_idle>:

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
700008e4:	f1080080 	cpsie	i
	isb
700008e8:	f57ff06f 	isb	sy

	bx	lr
700008ec:	e12fff1e 	bx	lr

700008f0 <_isr_wrapper>:
	 * Save away r0-r3, r12 and lr_irq for the previous context to the
	 * process stack since they are clobbered here.  Also, save away lr
	 * and spsr_irq since we may swap processes and return to a different
	 * thread.
	 */
	sub lr, lr, #4
700008f0:	e24ee004 	sub	lr, lr, #4
	srsdb #MODE_SYS!
700008f4:	f96d051f 	srsdb	sp!, #31
	cps #MODE_SYS
700008f8:	f102001f 	cps	#31
	push {r0-r3, r12, lr}
700008fc:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	 * threads have high stack usage.
	 *
	 * When userspace is enabled, this also prevents leaking privileged
	 * information to the user mode.
	 */
	cps #MODE_SVC
70000900:	f1020013 	cps	#19
	/*
	 * Preserve lr_svc which may contain the branch return address of the
	 * interrupted context in case of a nested interrupt. This value will
	 * be restored prior to exiting the interrupt in z_arm_int_exit.
	 */
	push {lr}
70000904:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	/* Align stack at double-word boundary */
	and r3, sp, #4
70000908:	e20d3004 	and	r3, sp, #4
	sub sp, sp, r3
7000090c:	e04dd003 	sub	sp, sp, r3
	push {r2, r3}
70000910:	e92d000c 	push	{r2, r3}

	/* Increment interrupt nesting count */
	get_cpu r2
70000914:	ee1d2f70 	mrc	15, 0, r2, cr13, cr0, {3}
70000918:	e3c22003 	bic	r2, r2, #3
	ldr r0, [r2, #___cpu_t_nested_OFFSET]
7000091c:	e5920000 	ldr	r0, [r2]
	add r0, r0, #1
70000920:	e2800001 	add	r0, r0, #1
	str r0, [r2, #___cpu_t_nested_OFFSET]
70000924:	e5820000 	str	r0, [r2]

	/* Get active IRQ number from the interrupt controller */
#if !defined(CONFIG_ARM_CUSTOM_INTERRUPT_CONTROLLER)
	bl arm_gic_get_active
#else
	bl z_soc_irq_get_active
70000928:	faffff1b 	blx	7000059c <z_soc_irq_get_active>
#endif /* !CONFIG_ARM_CUSTOM_INTERRUPT_CONTROLLER */
	push {r0, r1}
7000092c:	e92d0003 	push	{r0, r1}
	lsl r0, r0, #3	/* table is 8-byte wide */
70000930:	e1a00180 	lsl	r0, r0, #3
	 * to note that most interrupt controllers require that the nested
	 * interrupts are handled after the active interrupt is acknowledged;
	 * this is be done through the `get_active` interrupt controller
	 * interface function.
	 */
	cpsie i
70000934:	f1080080 	cpsie	i

	/*
	 * Skip calling the isr if it is a spurious interrupt.
	 */
	mov r1, #CONFIG_NUM_IRQS
70000938:	e3a01c02 	mov	r1, #512	; 0x200
	lsl r1, r1, #3
7000093c:	e1a01181 	lsl	r1, r1, #3
	cmp r0, r1
70000940:	e1500001 	cmp	r0, r1
	bge spurious_continue
70000944:	aa000003 	bge	70000958 <spurious_continue>

	ldr r1, =_sw_isr_table
70000948:	e59f1018 	ldr	r1, [pc, #24]	; 70000968 <spurious_continue+0x10>
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
7000094c:	e0811000 	add	r1, r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
70000950:	e8b10009 	ldm	r1!, {r0, r3}
	blx r3		/* call ISR */
70000954:	e12fff33 	blx	r3

70000958 <spurious_continue>:

spurious_continue:
	/* Signal end-of-interrupt */
	pop {r0, r1}
70000958:	e8bd0003 	pop	{r0, r1}
#if !defined(CONFIG_ARM_CUSTOM_INTERRUPT_CONTROLLER)
	bl arm_gic_eoi
#else
	bl z_soc_irq_eoi
7000095c:	faffff0f 	blx	700005a0 <z_soc_irq_eoi>
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
70000960:	e59f1004 	ldr	r1, [pc, #4]	; 7000096c <spurious_continue+0x14>
	bx r1
70000964:	e12fff11 	bx	r1
	ldr r1, =_sw_isr_table
70000968:	70003640 	.word	0x70003640
	ldr r1, =z_arm_int_exit
7000096c:	70000b28 	.word	0x70000b28

70000970 <arch_dcache_invd_all>:

	return 0;
}

int arch_dcache_invd_all(void)
{
70000970:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_CLIDR(void)
{
  uint32_t result;
//  __ASM volatile("MRC p15, 1, %0, c0, c0, 1" : "=r"(result) : : "memory");
  __get_CP(15, 1, result, 0, 0, 1);
70000972:	ee30 6f30 	mrc	15, 1, r6, cr0, cr0, {1}
*/
__STATIC_FORCEINLINE void L1C_CleanInvalidateCache(uint32_t op) {
  uint32_t clidr;
  uint32_t cache_type;
  clidr =  __get_CLIDR();
  for(uint32_t i = 0U; i<7U; i++)
70000976:	2400      	movs	r4, #0
  {
    cache_type = (clidr >> i*3U) & 0x7UL;
70000978:	eb04 0344 	add.w	r3, r4, r4, lsl #1
7000097c:	fa26 f303 	lsr.w	r3, r6, r3
70000980:	f003 0307 	and.w	r3, r3, #7
    if ((cache_type >= 2U) && (cache_type <= 4U))
70000984:	3b02      	subs	r3, #2
70000986:	2b02      	cmp	r3, #2
    cache_type = (clidr >> i*3U) & 0x7UL;
70000988:	ea4f 0544 	mov.w	r5, r4, lsl #1
    if ((cache_type >= 2U) && (cache_type <= 4U))
7000098c:	d831      	bhi.n	700009f2 <arch_dcache_invd_all+0x82>
  __set_CP(15, 2, value, 0, 0, 0);
7000098e:	ee40 5f10 	mcr	15, 2, r5, cr0, cr0, {0}
  __get_CP(15, 1, result, 0, 0, 0);
70000992:	ee30 7f10 	mrc	15, 1, r7, cr0, cr0, {0}
  num_ways = ((ccsidr & 0x00001FF8U) >> 3U) + 1U;
70000996:	f3c7 0cc9 	ubfx	ip, r7, #3, #10
7000099a:	f10c 0e01 	add.w	lr, ip, #1
  if (n < 2U) {
7000099e:	f1bc 0f00 	cmp.w	ip, #0
700009a2:	d02b      	beq.n	700009fc <arch_dcache_invd_all+0x8c>
700009a4:	4672      	mov	r2, lr
  uint8_t log = 0U;
700009a6:	2300      	movs	r3, #0
    t >>= 1U;
700009a8:	0852      	lsrs	r2, r2, #1
    log++;
700009aa:	1c59      	adds	r1, r3, #1
700009ac:	4618      	mov	r0, r3
  while(t > 1U)
700009ae:	2a01      	cmp	r2, #1
    log++;
700009b0:	b2cb      	uxtb	r3, r1
  while(t > 1U)
700009b2:	d1f9      	bne.n	700009a8 <arch_dcache_invd_all+0x38>
  if (n & 1U) { log++; }
700009b4:	f01e 0f01 	tst.w	lr, #1
700009b8:	bf1c      	itt	ne
700009ba:	3002      	addne	r0, #2
700009bc:	b2c3      	uxtbne	r3, r0
  if ((log2_num_ways < 0) || (log2_num_ways > 32)) {
700009be:	2b20      	cmp	r3, #32
  shift_way = 32U - (uint32_t)log2_num_ways;
700009c0:	bf98      	it	ls
700009c2:	f1c3 0e20 	rsbls	lr, r3, #32
  if ((log2_num_ways < 0) || (log2_num_ways > 32)) {
700009c6:	d814      	bhi.n	700009f2 <arch_dcache_invd_all+0x82>
  log2_linesize = (ccsidr & 0x00000007U) + 2U + 2U;
700009c8:	f007 0007 	and.w	r0, r7, #7
700009cc:	3004      	adds	r0, #4
  num_sets = ((ccsidr & 0x0FFFE000U) >> 13U) + 1U;
700009ce:	f3c7 374e 	ubfx	r7, r7, #13, #15
    for(int32_t set = num_sets-1; set >= 0; set--)
700009d2:	463b      	mov	r3, r7
      Dummy = (level << 1U) | (((uint32_t)set) << log2_linesize) | (((uint32_t)way) << shift_way);
700009d4:	fa0c f10e 	lsl.w	r1, ip, lr
700009d8:	4329      	orrs	r1, r5
700009da:	fa03 f200 	lsl.w	r2, r3, r0
700009de:	430a      	orrs	r2, r1
/** \brief  Set DCISW
 */
__STATIC_FORCEINLINE void __set_DCISW(uint32_t value)
{
//  __ASM volatile("MCR p15, 0, %0, c7, c6, 2" : : "r"(value) : "memory")
  __set_CP(15, 0, value, 7, 6, 2);
700009e0:	ee07 2f56 	mcr	15, 0, r2, cr7, cr6, {2}
    for(int32_t set = num_sets-1; set >= 0; set--)
700009e4:	3b01      	subs	r3, #1
700009e6:	d2f8      	bcs.n	700009da <arch_dcache_invd_all+0x6a>
  for(int32_t way = num_ways-1; way >= 0; way--)
700009e8:	f1bc 0c01 	subs.w	ip, ip, #1
700009ec:	d2f1      	bcs.n	700009d2 <arch_dcache_invd_all+0x62>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE  void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
700009ee:	f3bf 8f5f 	dmb	sy
  for(uint32_t i = 0U; i<7U; i++)
700009f2:	3401      	adds	r4, #1
700009f4:	2c07      	cmp	r4, #7
700009f6:	d1bf      	bne.n	70000978 <arch_dcache_invd_all+0x8>
	L1C_InvalidateDCacheAll();

	return 0;
}
700009f8:	2000      	movs	r0, #0
700009fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
700009fc:	f04f 0e20 	mov.w	lr, #32
70000a00:	e7e2      	b.n	700009c8 <arch_dcache_invd_all+0x58>
70000a02:	bf00      	nop

70000a04 <arch_dcache_enable>:
{
70000a04:	b508      	push	{r3, lr}
	arch_dcache_invd_all();
70000a06:	f7ff ffb3 	bl	70000970 <arch_dcache_invd_all>
  __get_CP(15, 0, result, 1, 0, 0);
70000a0a:	ee11 3f10 	mrc	15, 0, r3, cr1, cr0, {0}
  __ASM volatile ("dsb 0xF":::"memory");
70000a0e:	f3bf 8f4f 	dsb	sy
	val |= SCTLR_C_Msk;
70000a12:	f043 0304 	orr.w	r3, r3, #4
  __set_CP(15, 0, sctlr, 1, 0, 0);
70000a16:	ee01 3f10 	mcr	15, 0, r3, cr1, cr0, {0}
  __ASM volatile ("isb 0xF":::"memory");
70000a1a:	f3bf 8f6f 	isb	sy
}
70000a1e:	bd08      	pop	{r3, pc}

70000a20 <arch_icache_enable>:
  __set_CP(15, 0, value, 7, 5, 0);
70000a20:	2300      	movs	r3, #0
70000a22:	ee07 3f15 	mcr	15, 0, r3, cr7, cr5, {0}
  __ASM volatile ("dsb 0xF":::"memory");
70000a26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
70000a2a:	f3bf 8f6f 	isb	sy
  __get_CP(15, 0, result, 1, 0, 0);
70000a2e:	ee11 3f10 	mrc	15, 0, r3, cr1, cr0, {0}
#ifdef CONFIG_ICACHE

void arch_icache_enable(void)
{
	arch_icache_invd_all();
	__set_SCTLR(__get_SCTLR() | SCTLR_I_Msk);
70000a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  __set_CP(15, 0, sctlr, 1, 0, 0);
70000a36:	ee01 3f10 	mcr	15, 0, r3, cr1, cr0, {0}
70000a3a:	f3bf 8f6f 	isb	sy
	barrier_isync_fence_full();
}
70000a3e:	4770      	bx	lr

70000a40 <arch_cache_init>:

#endif

void arch_cache_init(void)
{
}
70000a40:	4770      	bx	lr
70000a42:	bf00      	nop

70000a44 <z_arm_do_swap>:
    bl z_thread_mark_switched_out
    pop {r0, lr}
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load current _cpu into r1 and current k_thread into r2 */
    get_cpu r1
70000a44:	ee1d1f70 	mrc	15, 0, r1, cr13, cr0, {3}
70000a48:	e3c11003 	bic	r1, r1, #3
    ldr r2, [r1, #___cpu_t_current_OFFSET]
70000a4c:	e5912008 	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
70000a50:	e3a00030 	mov	r0, #48	; 0x30
    add r0, r2
70000a54:	e0800002 	add	r0, r0, r2

    /* Store rest of process context */
    cps #MODE_SYS
70000a58:	f102001f 	cps	#31
    stm r0, {r4-r11, sp}
70000a5c:	e8802ff0 	stm	r0, {r4, r5, r6, r7, r8, r9, sl, fp, sp}
    cps #MODE_SVC
70000a60:	f1020013 	cps	#19
    mov r0, #0
    str r0, [r1, #___cpu_t_fp_ctx_OFFSET]
#endif /* CONFIG_FPU_SHARING */

    /* fetch the thread to run from the ready queue cache */
    ldr r3, =_kernel
70000a64:	e59f3028 	ldr	r3, [pc, #40]	; 70000a94 <z_arm_do_swap+0x50>
    ldr r2, [r3, #_kernel_offset_to_ready_q_cache]
70000a68:	e5932014 	ldr	r2, [r3, #20]

    str r2, [r1, #___cpu_t_current_OFFSET]
70000a6c:	e5812008 	str	r2, [r1, #8]
#endif

    /* Restore previous interrupt disable state (irq_lock key)
     * (We clear the arch.basepri field after restoring state)
     */
    ldr r0, [r2, #_thread_offset_to_basepri]
70000a70:	e592006c 	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
70000a74:	e3b03000 	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
70000a78:	e582306c 	str	r3, [r2, #108]	; 0x6c

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
70000a7c:	e3a00030 	mov	r0, #48	; 0x30
    add r0, r2
70000a80:	e0800002 	add	r0, r0, r2

    /* restore r4-r11 and sp for incoming thread */
    cps #MODE_SYS
70000a84:	f102001f 	cps	#31
    ldm r0, {r4-r11, sp}
70000a88:	e8902ff0 	ldm	r0, {r4, r5, r6, r7, r8, r9, sl, fp, sp}
    cps #MODE_SVC
70000a8c:	f1020013 	cps	#19
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /*
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
70000a90:	e12fff1e 	bx	lr
    ldr r3, =_kernel
70000a94:	70007728 	.word	0x70007728

70000a98 <z_arm_svc>:
    /*
     * Switch to system mode to store r0-r3 to the process stack pointer.
     * Save r12 and the lr as we could be swapping in another process and
     * returning to a different location.
     */
    srsdb #MODE_SYS!
70000a98:	f96d051f 	srsdb	sp!, #31
    cps #MODE_SYS
70000a9c:	f102001f 	cps	#31
    push {r0-r3, r12, lr}
70000aa0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
    ldr r0, [r2, #___cpu_t_fp_ctx_OFFSET]
    cmp r0, #0
    streq sp, [r2, #___cpu_t_fp_ctx_OFFSET]
#endif /* CONFIG_FPU_SHARING */

    mov ip, sp
70000aa4:	e1a0c00d 	mov	ip, sp

    cps #MODE_SVC
70000aa8:	f1020013 	cps	#19

    /*
     * Store lr_svc to the SVC mode stack. This value will be restored prior to
     * exiting the SVC call in z_arm_int_exit.
     */
    push {lr}
70000aac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

    /* Align stack at double-word boundary */
    /* TODO: Question, why push {r2, r3} here */
    and r3, sp, #4
70000ab0:	e20d3004 	and	r3, sp, #4
    sub sp, sp, r3
70000ab4:	e04dd003 	sub	sp, sp, r3
    push {r2, r3}
70000ab8:	e92d000c 	push	{r2, r3}

    /* Increment interrupt nesting count */
    get_cpu r2
70000abc:	ee1d2f70 	mrc	15, 0, r2, cr13, cr0, {3}
70000ac0:	e3c22003 	bic	r2, r2, #3
    ldr r0, [r2, #___cpu_t_nested_OFFSET]
70000ac4:	e5920000 	ldr	r0, [r2]
    add r0, r0, #1
70000ac8:	e2800001 	add	r0, r0, #1
    str r0, [r2, #___cpu_t_nested_OFFSET]
70000acc:	e5820000 	str	r0, [r2]

    /* Get SVC number */
    mrs r0, spsr
70000ad0:	e14f0000 	mrs	r0, SPSR
    tst r0, #0x20
70000ad4:	e3100020 	tst	r0, #32

    ldreq r1, [lr, #-4]
70000ad8:	051e1004 	ldreq	r1, [lr, #-4]
    biceq r1, #0xff000000
70000adc:	03c114ff 	biceq	r1, r1, #-16777216	; 0xff000000
    beq demux
70000ae0:	0a000001 	beq	70000aec <demux>

    ldr r1, [lr, #-2]
70000ae4:	e51e1002 	ldr	r1, [lr, #-2]
    and r1, #0xff
70000ae8:	e20110ff 	and	r1, r1, #255	; 0xff

70000aec <demux>:
#if defined(CONFIG_USERSPACE)
    cmp r1, #_SVC_CALL_SYSTEM_CALL
    beq _do_syscall
#endif

    cmp r1, #_SVC_CALL_CONTEXT_SWITCH
70000aec:	e3510000 	cmp	r1, #0
    beq _context_switch
70000af0:	0a000001 	beq	70000afc <_context_switch>

    cmp r1, #_SVC_CALL_RUNTIME_EXCEPT
70000af4:	e3510002 	cmp	r1, #2
    beq _oops
70000af8:	0a000001 	beq	70000b04 <_oops>

70000afc <_context_switch>:
    b z_arm_int_exit
#endif

_context_switch:
    /* handler mode exit, to PendSV */
    bl z_arm_do_swap
70000afc:	ebffffd0 	bl	70000a44 <z_arm_do_swap>

    b z_arm_int_exit
70000b00:	ea000008 	b	70000b28 <z_arm_int_exit>

70000b04 <_oops>:

_oops:
    /*
     * Pass the exception frame to z_do_kernel_oops.
     */
    cps #MODE_SYS
70000b04:	f102001f 	cps	#31
    mov r0, sp
70000b08:	e1a0000d 	mov	r0, sp
    cps #MODE_SVC
70000b0c:	f1020013 	cps	#19
    /* Zero callee_regs and exc_return (only used on Cortex-M) */
    mov r1, #0
70000b10:	e3a01000 	mov	r1, #0
    mov r2, #0
70000b14:	e3a02000 	mov	r2, #0
    bl z_do_kernel_oops
70000b18:	fafffea9 	blx	700005c4 <z_do_kernel_oops>
    b z_arm_int_exit
70000b1c:	ea000001 	b	70000b28 <z_arm_int_exit>

70000b20 <z_arm_cortex_r_svc>:
    b z_arm_int_exit
#endif

GTEXT(z_arm_cortex_r_svc)
SECTION_FUNC(TEXT, z_arm_cortex_r_svc)
    svc #_SVC_CALL_CONTEXT_SWITCH
70000b20:	ef000000 	svc	0x00000000
    bx lr
70000b24:	e12fff1e 	bx	lr

70000b28 <z_arm_int_exit>:
#endif /* CONFIG_STACK_SENTINEL */

	/* Disable nested interrupts while exiting, this should happens
	 * before context switch also, to ensure interrupts are disabled.
	 */
	cpsid i
70000b28:	f10c0080 	cpsid	i

#ifdef CONFIG_PREEMPT_ENABLED
	/* Do not context switch if exiting a nested interrupt */
	get_cpu r3
70000b2c:	ee1d3f70 	mrc	15, 0, r3, cr13, cr0, {3}
70000b30:	e3c33003 	bic	r3, r3, #3
	ldr r0, [r3, #___cpu_t_nested_OFFSET]
70000b34:	e5930000 	ldr	r0, [r3]
	cmp r0, #1
70000b38:	e3500001 	cmp	r0, #1
	bhi __EXIT_INT
70000b3c:	8a000004 	bhi	70000b54 <__EXIT_INT>

	ldr r1, [r3, #___cpu_t_current_OFFSET]
70000b40:	e5931008 	ldr	r1, [r3, #8]
	ldr r2, =_kernel
70000b44:	e59f2094 	ldr	r2, [pc, #148]	; 70000be0 <__EXIT_EXC+0x18>
	ldr r0, [r2, #_kernel_offset_to_ready_q_cache]
70000b48:	e5920014 	ldr	r0, [r2, #20]
	cmp r0, r1
70000b4c:	e1500001 	cmp	r0, r1
	blne z_arm_do_swap
70000b50:	1bffffbb 	blne	70000a44 <z_arm_do_swap>

70000b54 <__EXIT_INT>:
__EXIT_INT:
#endif /* CONFIG_PREEMPT_ENABLED */

	/* Decrement interrupt nesting count */
	get_cpu r2
70000b54:	ee1d2f70 	mrc	15, 0, r2, cr13, cr0, {3}
70000b58:	e3c22003 	bic	r2, r2, #3
	ldr r0, [r2, #___cpu_t_nested_OFFSET]
70000b5c:	e5920000 	ldr	r0, [r2]
	sub r0, r0, #1
70000b60:	e2400001 	sub	r0, r0, #1
	str r0, [r2, #___cpu_t_nested_OFFSET]
70000b64:	e5820000 	str	r0, [r2]

	/* Restore previous stack pointer */
	pop {r2, r3}
70000b68:	e8bd000c 	pop	{r2, r3}
	add sp, sp, r3
70000b6c:	e08dd003 	add	sp, sp, r3
	/*
	 * Restore lr_svc stored into the SVC mode stack by the mode entry
	 * function. This ensures that the return address of the interrupted
	 * context is preserved in case of interrupt nesting.
	 */
	pop {lr}
70000b70:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	 * IRQ mode and z_arm_svc for SVC mode.
	 *
	 * r0-r3 are either the values from the thread before it was switched
	 * out or they are the args to _new_thread for a new thread.
	 */
	cps #MODE_SYS
70000b74:	f102001f 	cps	#31

#if defined(CONFIG_FPU_SHARING)
	fpu_exc_exit
#endif

	pop {r0-r3, r12, lr}
70000b78:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	userspace_exc_exit
	rfeia sp!
70000b7c:	f8bd0a00 	rfeia	sp!

70000b80 <z_arm_exc_exit>:
 *
 * @param fatal True if exiting from a fatal fault; otherwise, false
 */
SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)
	/* Do not context switch if exiting a nested exception */
	get_cpu r3
70000b80:	ee1d3f70 	mrc	15, 0, r3, cr13, cr0, {3}
70000b84:	e3c33003 	bic	r3, r3, #3
	ldr r1, [r3, #___cpu_t_nested_OFFSET]
70000b88:	e5931000 	ldr	r1, [r3]
	cmp r1, #1
70000b8c:	e3510001 	cmp	r1, #1
	bhi __EXIT_EXC
70000b90:	8a00000c 	bhi	70000bc8 <__EXIT_EXC>

	/* If the fault is not fatal, return to the current thread context */
	cmp r0, #0
70000b94:	e3500000 	cmp	r0, #0
	beq __EXIT_EXC
70000b98:	0a00000a 	beq	70000bc8 <__EXIT_EXC>

	/* Clean up exception stack frame */
#if defined(CONFIG_FPU_SHARING)
	add sp, sp, #___fpu_t_SIZEOF
#endif
	add sp, #32
70000b9c:	e28dd020 	add	sp, sp, #32
	 *
	 * Note that z_arm_do_swap must be called in the SVC mode because it
	 * switches to the SVC mode during context switch and returns to the
	 * caller using lr_svc.
	 */
	cps #MODE_SVC
70000ba0:	f1020013 	cps	#19
	bl z_arm_do_swap
70000ba4:	ebffffa6 	bl	70000a44 <z_arm_do_swap>

	/* Decrement exception nesting count */
	get_cpu r3
70000ba8:	ee1d3f70 	mrc	15, 0, r3, cr13, cr0, {3}
70000bac:	e3c33003 	bic	r3, r3, #3
	ldr r0, [r3, #___cpu_t_nested_OFFSET]
70000bb0:	e5930000 	ldr	r0, [r3]
	sub r0, r0, #1
70000bb4:	e2400001 	sub	r0, r0, #1
	str r0, [r3, #___cpu_t_nested_OFFSET]
70000bb8:	e5830000 	str	r0, [r3]

	/* Return to the switched thread */
	cps #MODE_SYS
70000bbc:	f102001f 	cps	#31
#if defined(CONFIG_FPU_SHARING)
	fpu_exc_exit
#endif
	pop {r0-r3, r12, lr}
70000bc0:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	userspace_exc_exit
	rfeia sp!
70000bc4:	f8bd0a00 	rfeia	sp!

70000bc8 <__EXIT_EXC>:

__EXIT_EXC:
	/* Decrement exception nesting count */
	ldr r0, [r3, #___cpu_t_nested_OFFSET]
70000bc8:	e5930000 	ldr	r0, [r3]
	sub r0, r0, #1
70000bcc:	e2400001 	sub	r0, r0, #1
	str r0, [r3, #___cpu_t_nested_OFFSET]
70000bd0:	e5830000 	str	r0, [r3]
#endif
	/*
	 * Restore r0-r3, r12, lr, lr_und and spsr_und from the exception stack
	 * and return to the current thread.
	 */
	ldmia sp, {r0-r3, r12, lr}^
70000bd4:	e8dd500f 	ldm	sp, {r0, r1, r2, r3, ip, lr}^
	add sp, #24
70000bd8:	e28dd018 	add	sp, sp, #24
	rfeia sp!
70000bdc:	f8bd0a00 	rfeia	sp!
	ldr r2, =_kernel
70000be0:	70007728 	.word	0x70007728

70000be4 <picolibc_put>:
}
#include <zephyr/syscalls/zephyr_fputc_mrsh.c>
#endif

static int picolibc_put(char a, FILE *f)
{
70000be4:	b508      	push	{r3, lr}
	(*_stdout_hook)(a);
70000be6:	f247 7314 	movw	r3, #30484	; 0x7714
70000bea:	f2c7 0300 	movt	r3, #28672	; 0x7000
70000bee:	681b      	ldr	r3, [r3, #0]
70000bf0:	4798      	blx	r3
	zephyr_fputc(a, f);
	return 0;
}
70000bf2:	2000      	movs	r0, #0
70000bf4:	bd08      	pop	{r3, pc}
70000bf6:	bf00      	nop

70000bf8 <__stdout_hook_install>:
FILE *const stdout = &__stdout;
STDIO_ALIAS(stderr);

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
70000bf8:	f247 7114 	movw	r1, #30484	; 0x7714
	__stdout.flags |= _FDEV_SETUP_WRITE;
70000bfc:	f64b 33f8 	movw	r3, #48120	; 0xbbf8
70000c00:	f2c7 0300 	movt	r3, #28672	; 0x7000
70000c04:	789a      	ldrb	r2, [r3, #2]
	_stdout_hook = hook;
70000c06:	f2c7 0100 	movt	r1, #28672	; 0x7000
	__stdout.flags |= _FDEV_SETUP_WRITE;
70000c0a:	f042 0202 	orr.w	r2, r2, #2
	_stdout_hook = hook;
70000c0e:	6008      	str	r0, [r1, #0]
	__stdout.flags |= _FDEV_SETUP_WRITE;
70000c10:	709a      	strb	r2, [r3, #2]
}
70000c12:	4770      	bx	lr

70000c14 <malloc_prepare>:
			break;
		}
		heap_size >>= 1;
	}
#else
	heap_base = UINT_TO_POINTER(HEAP_BASE);
70000c14:	4907      	ldr	r1, [pc, #28]	; (70000c34 <malloc_prepare+0x20>)
	z_malloc_partition.start = POINTER_TO_UINT(heap_base);
	z_malloc_partition.size = heap_size;
	z_malloc_partition.attr = K_MEM_PARTITION_P_RW_U_RW;
#endif

	sys_heap_init(&z_malloc_heap, heap_base, heap_size);
70000c16:	f247 7018 	movw	r0, #30488	; 0x7718
70000c1a:	f2c7 0000 	movt	r0, #28672	; 0x7000
	heap_base = UINT_TO_POINTER(HEAP_BASE);
70000c1e:	f021 0107 	bic.w	r1, r1, #7
	sys_heap_init(&z_malloc_heap, heap_base, heap_size);
70000c22:	f1c1 42e0 	rsb	r2, r1, #1879048192	; 0x70000000
70000c26:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
{
70000c2a:	b508      	push	{r3, lr}
	sys_heap_init(&z_malloc_heap, heap_base, heap_size);
70000c2c:	f7ff fc48 	bl	700004c0 <sys_heap_init>

	return 0;
}
70000c30:	2000      	movs	r0, #0
70000c32:	bd08      	pop	{r3, pc}
70000c34:	7000bc33 	.word	0x7000bc33

70000c38 <z_vim_irq_get_active>:

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	uint32_t val;

	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70000c38:	2318      	movs	r3, #24
70000c3a:	f6c2 73ff 	movt	r3, #12287	; 0x2fff
70000c3e:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70000c40:	f3bf 8f5f 	dmb	sy
70000c44:	2320      	movs	r3, #32
70000c46:	f6c2 73ff 	movt	r3, #12287	; 0x2fff
70000c4a:	681b      	ldr	r3, [r3, #0]
70000c4c:	f3bf 8f5f 	dmb	sy
	actirq = sys_read32(VIM_ACTIRQ);

	/* Check if the irq number is valid, else return invalid irq number.
	 * which will be considered as spurious interrupt
	 */
	if ((actirq & (VIM_ACTIRQ_VALID_MASK)) == 0) {
70000c50:	2b00      	cmp	r3, #0
70000c52:	da14      	bge.n	70000c7e <z_vim_irq_get_active+0x46>
		return CONFIG_NUM_IRQS + 1;
	}

	irq_group_num = VIM_GET_IRQ_GROUP_NUM(actirq & VIM_PRIIRQ_NUM_MASK);
70000c54:	f3c3 0009 	ubfx	r0, r3, #0, #10
70000c58:	f3bf 8f5f 	dmb	sy
	irq_bit_num = VIM_GET_IRQ_BIT_NUM(actirq & VIM_PRIIRQ_NUM_MASK);

	/* Ack the interrupt in IRQSTS register */
	sys_write32(BIT(irq_bit_num), VIM_IRQSTS(irq_group_num));
70000c5c:	2101      	movs	r1, #1
70000c5e:	f44f 6282 	mov.w	r2, #1040	; 0x410
	irq_bit_num = VIM_GET_IRQ_BIT_NUM(actirq & VIM_PRIIRQ_NUM_MASK);
70000c62:	f003 0c1f 	and.w	ip, r3, #31
	sys_write32(BIT(irq_bit_num), VIM_IRQSTS(irq_group_num));
70000c66:	f6c2 72ff 	movt	r2, #12287	; 0x2fff
70000c6a:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
70000c6e:	fa01 f10c 	lsl.w	r1, r1, ip
70000c72:	441a      	add	r2, r3
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	barrier_dmem_fence_full();
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70000c74:	6011      	str	r1, [r2, #0]

	if (irq_group_num > VIM_MAX_GROUP_NUM) {
70000c76:	f5b0 7f08 	cmp.w	r0, #544	; 0x220
70000c7a:	d200      	bcs.n	70000c7e <z_vim_irq_get_active+0x46>
		return (CONFIG_NUM_IRQS + 1);
	}

	return (actirq & VIM_ACTIRQ_NUM_MASK);
}
70000c7c:	4770      	bx	lr
		return CONFIG_NUM_IRQS + 1;
70000c7e:	f240 2001 	movw	r0, #513	; 0x201
70000c82:	4770      	bx	lr

70000c84 <z_vim_irq_eoi>:
70000c84:	f3bf 8f5f 	dmb	sy
70000c88:	2318      	movs	r3, #24
70000c8a:	2200      	movs	r2, #0
70000c8c:	f6c2 73ff 	movt	r3, #12287	; 0x2fff
70000c90:	601a      	str	r2, [r3, #0]

void z_vim_irq_eoi(unsigned int irq)
{
	sys_write32(0, VIM_IRQVEC);
}
70000c92:	4770      	bx	lr

70000c94 <z_vim_irq_init>:
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70000c94:	2004      	movs	r0, #4
70000c96:	f6c2 70ff 	movt	r0, #12287	; 0x2fff

void z_vim_irq_init(void)
{
70000c9a:	b500      	push	{lr}
70000c9c:	6800      	ldr	r0, [r0, #0]
70000c9e:	f3bf 8f5f 	dmb	sy
	uint32_t num_of_irqs = sys_read32(VIM_INFO) & VIM_INFO_INTERRUPTS_MASK;
70000ca2:	f3c0 000a 	ubfx	r0, r0, #0, #11
	unsigned int irq;

	LOG_DBG("VIM: Number of IRQs = %u\n", num_of_irqs);

	/* make sure all IRQs are initially disabled and cleared */
	for (irq = 0; irq < num_of_irqs; irq+=32)
70000ca6:	b1b8      	cbz	r0, 70000cd8 <z_vim_irq_init+0x44>
	{
		sys_write32(BIT_MASK(31), VIM_INTR_EN_CLR(VIM_GET_IRQ_GROUP_NUM(irq)));
70000ca8:	f240 4e0c 	movw	lr, #1036	; 0x40c
		sys_write32(BIT_MASK(31), VIM_STS(VIM_GET_IRQ_GROUP_NUM(irq)));
70000cac:	f240 4c04 	movw	ip, #1028	; 0x404
	for (irq = 0; irq < num_of_irqs; irq+=32)
70000cb0:	2300      	movs	r3, #0
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70000cb2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
		sys_write32(BIT_MASK(31), VIM_INTR_EN_CLR(VIM_GET_IRQ_GROUP_NUM(irq)));
70000cb6:	f6c2 7eff 	movt	lr, #12287	; 0x2fff
		sys_write32(BIT_MASK(31), VIM_STS(VIM_GET_IRQ_GROUP_NUM(irq)));
70000cba:	f6c2 7cff 	movt	ip, #12287	; 0x2fff
70000cbe:	f3bf 8f5f 	dmb	sy
		sys_write32(BIT_MASK(31), VIM_INTR_EN_CLR(VIM_GET_IRQ_GROUP_NUM(irq)));
70000cc2:	eb03 010e 	add.w	r1, r3, lr
70000cc6:	600a      	str	r2, [r1, #0]
70000cc8:	f3bf 8f5f 	dmb	sy
		sys_write32(BIT_MASK(31), VIM_STS(VIM_GET_IRQ_GROUP_NUM(irq)));
70000ccc:	eb03 010c 	add.w	r1, r3, ip
70000cd0:	600a      	str	r2, [r1, #0]
	for (irq = 0; irq < num_of_irqs; irq+=32)
70000cd2:	3320      	adds	r3, #32
70000cd4:	4298      	cmp	r0, r3
70000cd6:	d8f2      	bhi.n	70000cbe <z_vim_irq_init+0x2a>
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70000cd8:	2318      	movs	r3, #24
70000cda:	f6c2 73ff 	movt	r3, #12287	; 0x2fff
70000cde:	681a      	ldr	r2, [r3, #0]
70000ce0:	f3bf 8f5f 	dmb	sy
70000ce4:	f3bf 8f5f 	dmb	sy
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70000ce8:	2200      	movs	r2, #0
70000cea:	601a      	str	r2, [r3, #0]
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70000cec:	231c      	movs	r3, #28
70000cee:	f6c2 73ff 	movt	r3, #12287	; 0x2fff
70000cf2:	6819      	ldr	r1, [r3, #0]
70000cf4:	f3bf 8f5f 	dmb	sy
70000cf8:	f3bf 8f5f 	dmb	sy
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70000cfc:	601a      	str	r2, [r3, #0]
	/* ACK and clear pending IRQs */
	(void) sys_read32(VIM_IRQVEC);
	sys_write32(0, VIM_IRQVEC);
	(void) sys_read32(VIM_FIQVEC);
	sys_write32(0, VIM_FIQVEC);
}
70000cfe:	f85d fb04 	ldr.w	pc, [sp], #4
70000d02:	bf00      	nop

70000d04 <z_vim_irq_priority_set>:

void z_vim_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
	uint32_t irq_group_num, irq_bit_num, regval;

	if (irq > CONFIG_NUM_IRQS || prio > VIM_PRI_INT_MAX ||
70000d04:	290f      	cmp	r1, #15
70000d06:	bf98      	it	ls
70000d08:	f5b0 7f00 	cmpls.w	r0, #512	; 0x200
70000d0c:	d824      	bhi.n	70000d58 <z_vim_irq_priority_set+0x54>
	    (flags != IRQ_TYPE_EDGE && flags != IRQ_TYPE_LEVEL)) {
70000d0e:	1e93      	subs	r3, r2, #2
	if (irq > CONFIG_NUM_IRQS || prio > VIM_PRI_INT_MAX ||
70000d10:	f033 0302 	bics.w	r3, r3, #2
70000d14:	d120      	bne.n	70000d58 <z_vim_irq_priority_set+0x54>
70000d16:	f3bf 8f5f 	dmb	sy
		LOG_ERR("%s: Invalid argument irq = %u prio = %u flags = %u\n",
			__func__, irq, prio, flags);
		return;
	}

	sys_write8(prio, VIM_PRI_INT(irq));
70000d1a:	f100 6340 	add.w	r3, r0, #201326592	; 0xc000000
70000d1e:	f5a3 5370 	sub.w	r3, r3, #15360	; 0x3c00
70000d22:	009b      	lsls	r3, r3, #2
	__asm__ volatile("strb %0, [%1]" : : "r" (data), "r" (addr));
70000d24:	7019      	strb	r1, [r3, #0]

	irq_group_num = VIM_GET_IRQ_GROUP_NUM(irq);
	irq_bit_num = VIM_GET_IRQ_BIT_NUM(irq);

	regval = sys_read32(VIM_INTTYPE(irq_group_num));
70000d26:	f240 431c 	movw	r3, #1052	; 0x41c
70000d2a:	f020 011f 	bic.w	r1, r0, #31
70000d2e:	f6c2 73ff 	movt	r3, #12287	; 0x2fff
70000d32:	440b      	add	r3, r1
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70000d34:	6819      	ldr	r1, [r3, #0]
70000d36:	f3bf 8f5f 	dmb	sy

	if (flags == IRQ_TYPE_EDGE) {
		regval |= (BIT(irq_bit_num));
70000d3a:	f04f 0c01 	mov.w	ip, #1
	irq_bit_num = VIM_GET_IRQ_BIT_NUM(irq);
70000d3e:	f000 001f 	and.w	r0, r0, #31
	if (flags == IRQ_TYPE_EDGE) {
70000d42:	2a04      	cmp	r2, #4
		regval |= (BIT(irq_bit_num));
70000d44:	fa0c f000 	lsl.w	r0, ip, r0
70000d48:	bf0c      	ite	eq
70000d4a:	ea40 0201 	orreq.w	r2, r0, r1
	} else {
		regval &= ~(BIT(irq_bit_num));
70000d4e:	ea21 0200 	bicne.w	r2, r1, r0
70000d52:	f3bf 8f5f 	dmb	sy
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70000d56:	601a      	str	r2, [r3, #0]
	}

	sys_write32(regval, VIM_INTTYPE(irq_group_num));
}
70000d58:	4770      	bx	lr
70000d5a:	bf00      	nop

70000d5c <z_vim_irq_enable>:

void z_vim_irq_enable(unsigned int irq)
{
	uint32_t irq_group_num, irq_bit_num;

	if (irq > CONFIG_NUM_IRQS) {
70000d5c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
70000d60:	d80d      	bhi.n	70000d7e <z_vim_irq_enable+0x22>
70000d62:	f3bf 8f5f 	dmb	sy
	}

	irq_group_num = VIM_GET_IRQ_GROUP_NUM(irq);
	irq_bit_num = VIM_GET_IRQ_BIT_NUM(irq);

	sys_write32(BIT(irq_bit_num), VIM_INTR_EN_SET(irq_group_num));
70000d66:	2201      	movs	r2, #1
70000d68:	f44f 6381 	mov.w	r3, #1032	; 0x408
	irq_bit_num = VIM_GET_IRQ_BIT_NUM(irq);
70000d6c:	f000 011f 	and.w	r1, r0, #31
	sys_write32(BIT(irq_bit_num), VIM_INTR_EN_SET(irq_group_num));
70000d70:	f6c2 73ff 	movt	r3, #12287	; 0x2fff
70000d74:	f020 001f 	bic.w	r0, r0, #31
70000d78:	408a      	lsls	r2, r1
70000d7a:	4403      	add	r3, r0
70000d7c:	601a      	str	r2, [r3, #0]
}
70000d7e:	4770      	bx	lr

70000d80 <console_out>:
		 * function MUST return the byte output.
		 */
		return c;
	}

	if ('\n' == c) {
70000d80:	280a      	cmp	r0, #10
{
70000d82:	b538      	push	{r3, r4, r5, lr}
70000d84:	4604      	mov	r4, r0
	if ('\n' == c) {
70000d86:	d00d      	beq.n	70000da4 <console_out+0x24>
70000d88:	f243 652c 	movw	r5, #13868	; 0x362c
70000d8c:	f2c7 0500 	movt	r5, #28672	; 0x7000

static inline void z_impl_uart_poll_out(const struct device *dev, unsigned char out_char)
{
	const struct uart_driver_api *api = (const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
70000d90:	68ab      	ldr	r3, [r5, #8]
70000d92:	f243 602c 	movw	r0, #13868	; 0x362c
70000d96:	b2e1      	uxtb	r1, r4
70000d98:	f2c7 0000 	movt	r0, #28672	; 0x7000
70000d9c:	685b      	ldr	r3, [r3, #4]
70000d9e:	4798      	blx	r3
	 * As errors cannot be returned, ignore the return value
	 */
	(void)pm_device_runtime_put_async(uart_console_dev, K_MSEC(1));

	return c;
}
70000da0:	4620      	mov	r0, r4
70000da2:	bd38      	pop	{r3, r4, r5, pc}
70000da4:	f243 652c 	movw	r5, #13868	; 0x362c
70000da8:	210d      	movs	r1, #13
70000daa:	f2c7 0500 	movt	r5, #28672	; 0x7000
70000dae:	4628      	mov	r0, r5
70000db0:	68ab      	ldr	r3, [r5, #8]
70000db2:	685b      	ldr	r3, [r3, #4]
70000db4:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
70000db6:	e7eb      	b.n	70000d90 <console_out+0x10>

70000db8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
70000db8:	b508      	push	{r3, lr}
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_IS_READY);
	}
#endif
	compiler_barrier();
	return z_impl_device_is_ready(dev);
70000dba:	f243 602c 	movw	r0, #13868	; 0x362c
70000dbe:	f2c7 0000 	movt	r0, #28672	; 0x7000
70000dc2:	f000 fbe1 	bl	70001588 <z_impl_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
70000dc6:	b168      	cbz	r0, 70000de4 <uart_console_init+0x2c>
	__stdout_hook_install(console_out);
70000dc8:	f640 5081 	movw	r0, #3457	; 0xd81
70000dcc:	f2c7 0000 	movt	r0, #28672	; 0x7000
70000dd0:	f7ff ff12 	bl	70000bf8 <__stdout_hook_install>
	__printk_hook_install(console_out);
70000dd4:	f640 5081 	movw	r0, #3457	; 0xd81
70000dd8:	f2c7 0000 	movt	r0, #28672	; 0x7000
70000ddc:	f7ff fbae 	bl	7000053c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
70000de0:	2000      	movs	r0, #0
}
70000de2:	bd08      	pop	{r3, pc}
		return -ENODEV;
70000de4:	f06f 0012 	mvn.w	r0, #18
}
70000de8:	bd08      	pop	{r3, pc}
70000dea:	bf00      	nop

70000dec <pinctrl_lookup_state>:
#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
	*state = &config->states[0];
70000dec:	6803      	ldr	r3, [r0, #0]
70000dee:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
70000df0:	f890 c004 	ldrb.w	ip, [r0, #4]
70000df4:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
70000df8:	4563      	cmp	r3, ip
70000dfa:	d21f      	bcs.n	70000e3c <pinctrl_lookup_state+0x50>
		if (id == (*state)->id) {
70000dfc:	f893 c005 	ldrb.w	ip, [r3, #5]
70000e00:	458c      	cmp	ip, r1
			return 0;
		}

		(*state)++;
70000e02:	f103 0308 	add.w	r3, r3, #8
		if (id == (*state)->id) {
70000e06:	d017      	beq.n	70000e38 <pinctrl_lookup_state+0x4c>
{
70000e08:	b500      	push	{lr}
70000e0a:	e005      	b.n	70000e18 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
70000e0c:	f893 c005 	ldrb.w	ip, [r3, #5]
70000e10:	458c      	cmp	ip, r1
		(*state)++;
70000e12:	f103 0308 	add.w	r3, r3, #8
		if (id == (*state)->id) {
70000e16:	d00c      	beq.n	70000e32 <pinctrl_lookup_state+0x46>
		(*state)++;
70000e18:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
70000e1a:	f890 c004 	ldrb.w	ip, [r0, #4]
70000e1e:	f8d0 e000 	ldr.w	lr, [r0]
70000e22:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
70000e26:	4563      	cmp	r3, ip
70000e28:	d3f0      	bcc.n	70000e0c <pinctrl_lookup_state+0x20>
	}

	return -ENOENT;
70000e2a:	f06f 0001 	mvn.w	r0, #1
}
70000e2e:	f85d fb04 	ldr.w	pc, [sp], #4
			return 0;
70000e32:	2000      	movs	r0, #0
}
70000e34:	f85d fb04 	ldr.w	pc, [sp], #4
			return 0;
70000e38:	2000      	movs	r0, #0
}
70000e3a:	4770      	bx	lr
	return -ENOENT;
70000e3c:	f06f 0001 	mvn.w	r0, #1
70000e40:	4770      	bx	lr
70000e42:	bf00      	nop

70000e44 <pinctrl_ti_k3_init>:

static int pinctrl_ti_k3_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);
	return 0;
}
70000e44:	2000      	movs	r0, #0
70000e46:	4770      	bx	lr

70000e48 <pinctrl_configure_pins>:
	uintptr_t virt_reg_base = DEVICE_MMIO_GET(dev);
70000e48:	f64b 4308 	movw	r3, #48136	; 0xbc08
70000e4c:	f2c7 0300 	movt	r3, #28672	; 0x7000
{
70000e50:	b410      	push	{r4}
	uintptr_t virt_reg_base = DEVICE_MMIO_GET(dev);
70000e52:	681c      	ldr	r4, [r3, #0]
	for (uint8_t i = 0; i < pin_cnt; i++) {
70000e54:	b151      	cbz	r1, 70000e6c <pinctrl_configure_pins+0x24>
70000e56:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
		sys_write32(pins[i].value, virt_reg_base + pins[i].offset);
70000e5a:	6842      	ldr	r2, [r0, #4]
70000e5c:	f850 3b08 	ldr.w	r3, [r0], #8
70000e60:	4423      	add	r3, r4
70000e62:	f3bf 8f5f 	dmb	sy
70000e66:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < pin_cnt; i++) {
70000e68:	4288      	cmp	r0, r1
70000e6a:	d1f6      	bne.n	70000e5a <pinctrl_configure_pins+0x12>
}
70000e6c:	bc10      	pop	{r4}
70000e6e:	2000      	movs	r0, #0
70000e70:	4770      	bx	lr
70000e72:	bf00      	nop

70000e74 <uart_ns16550_config_get>:
};

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
70000e74:	4603      	mov	r3, r0
	cfg->stop_bits = data->uart_config.stop_bits;
	cfg->data_bits = data->uart_config.data_bits;
	cfg->flow_ctrl = data->uart_config.flow_ctrl;

	return 0;
}
70000e76:	2000      	movs	r0, #0
	struct uart_ns16550_dev_data *data = dev->data;
70000e78:	691b      	ldr	r3, [r3, #16]
	cfg->baudrate = data->uart_config.baudrate;
70000e7a:	681a      	ldr	r2, [r3, #0]
70000e7c:	600a      	str	r2, [r1, #0]
	cfg->parity = data->uart_config.parity;
70000e7e:	791a      	ldrb	r2, [r3, #4]
70000e80:	710a      	strb	r2, [r1, #4]
	cfg->stop_bits = data->uart_config.stop_bits;
70000e82:	795a      	ldrb	r2, [r3, #5]
70000e84:	714a      	strb	r2, [r1, #5]
	cfg->data_bits = data->uart_config.data_bits;
70000e86:	799a      	ldrb	r2, [r3, #6]
70000e88:	718a      	strb	r2, [r1, #6]
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
70000e8a:	79db      	ldrb	r3, [r3, #7]
70000e8c:	71cb      	strb	r3, [r1, #7]
}
70000e8e:	4770      	bx	lr

70000e90 <uart_ns16550_poll_out>:
 * @param dev UART device struct
 * @param c Character to send
 */
static void uart_ns16550_poll_out(const struct device *dev,
					   unsigned char c)
{
70000e90:	b410      	push	{r4}
	key = __get_BASEPRI();
	__set_BASEPRI_MAX(_EXC_IRQ_DEFAULT_PRIO);
	__ISB();
#elif defined(CONFIG_ARMV7_R) || defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	__asm__ volatile(
70000e92:	f3ef 8400 	mrs	r4, CPSR
70000e96:	f004 0480 	and.w	r4, r4, #128	; 0x80
70000e9a:	b672      	cpsid	i
	struct uart_ns16550_dev_data *data = dev->data;
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	while ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_THRE) == 0) {
70000e9c:	f04f 0c05 	mov.w	ip, #5
		port = DEVICE_MMIO_GET(dev);
70000ea0:	6842      	ldr	r2, [r0, #4]
	while ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_THRE) == 0) {
70000ea2:	7d13      	ldrb	r3, [r2, #20]
70000ea4:	6812      	ldr	r2, [r2, #0]
70000ea6:	fb1c 2303 	smlabb	r3, ip, r3, r2
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70000eaa:	681b      	ldr	r3, [r3, #0]
70000eac:	f3bf 8f5f 	dmb	sy
70000eb0:	069b      	lsls	r3, r3, #26
70000eb2:	d5f5      	bpl.n	70000ea0 <uart_ns16550_poll_out+0x10>
		port = DEVICE_MMIO_GET(dev);
70000eb4:	6843      	ldr	r3, [r0, #4]
70000eb6:	681b      	ldr	r3, [r3, #0]
70000eb8:	f3bf 8f5f 	dmb	sy
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70000ebc:	6019      	str	r1, [r3, #0]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__set_BASEPRI(key);
	__ISB();
#elif defined(CONFIG_ARMV7_R) || defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	if (key != 0U) {
70000ebe:	b904      	cbnz	r4, 70000ec2 <uart_ns16550_poll_out+0x32>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
70000ec0:	b662      	cpsie	i
	}

	ns16550_outbyte(dev_cfg, THR(dev), c);

	k_spin_unlock(&data->lock, key);
}
70000ec2:	bc10      	pop	{r4}
70000ec4:	4770      	bx	lr
70000ec6:	bf00      	nop

70000ec8 <uart_ns16550_err_check>:
	__asm__ volatile(
70000ec8:	f3ef 8200 	mrs	r2, CPSR
70000ecc:	f002 0280 	and.w	r2, r2, #128	; 0x80
70000ed0:	b672      	cpsid	i
		port = DEVICE_MMIO_GET(dev);
70000ed2:	6843      	ldr	r3, [r0, #4]
static int uart_ns16550_err_check(const struct device *dev)
{
	struct uart_ns16550_dev_data *data = dev->data;
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
	k_spinlock_key_t key = k_spin_lock(&data->lock);
	int check = (ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_EOB_MASK);
70000ed4:	7d19      	ldrb	r1, [r3, #20]
70000ed6:	2005      	movs	r0, #5
70000ed8:	681b      	ldr	r3, [r3, #0]
70000eda:	fb10 3001 	smlabb	r0, r0, r1, r3
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70000ede:	6800      	ldr	r0, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70000ee0:	f3bf 8f5f 	dmb	sy
	if (key != 0U) {
70000ee4:	b902      	cbnz	r2, 70000ee8 <uart_ns16550_err_check+0x20>
  __ASM volatile ("cpsie i" : : : "memory");
70000ee6:	b662      	cpsie	i

	k_spin_unlock(&data->lock, key);

	return check >> 1;
}
70000ee8:	f3c0 0043 	ubfx	r0, r0, #1, #4
70000eec:	4770      	bx	lr
70000eee:	bf00      	nop

70000ef0 <uart_ns16550_fifo_fill>:
 * @return Number of bytes sent
 */
static int uart_ns16550_fifo_fill(const struct device *dev,
				  const uint8_t *tx_data,
				  int size)
{
70000ef0:	b470      	push	{r4, r5, r6}
	struct uart_ns16550_dev_data *data = dev->data;
70000ef2:	6905      	ldr	r5, [r0, #16]
	__asm__ volatile(
70000ef4:	f3ef 8600 	mrs	r6, CPSR
70000ef8:	f006 0680 	and.w	r6, r6, #128	; 0x80
70000efc:	b672      	cpsid	i
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
	int i;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	for (i = 0; (i < size) && (i < data->fifo_size); i++) {
70000efe:	2a00      	cmp	r2, #0
70000f00:	dd15      	ble.n	70000f2e <uart_ns16550_fifo_fill+0x3e>
70000f02:	4684      	mov	ip, r0
70000f04:	3901      	subs	r1, #1
70000f06:	2000      	movs	r0, #0
70000f08:	e00a      	b.n	70000f20 <uart_ns16550_fifo_fill+0x30>
		port = DEVICE_MMIO_GET(dev);
70000f0a:	f8dc 4004 	ldr.w	r4, [ip, #4]
			sys_write32(val, port);
70000f0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		port = DEVICE_MMIO_GET(dev);
70000f12:	6824      	ldr	r4, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70000f14:	f3bf 8f5f 	dmb	sy
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70000f18:	6023      	str	r3, [r4, #0]
	for (i = 0; (i < size) && (i < data->fifo_size); i++) {
70000f1a:	3001      	adds	r0, #1
70000f1c:	4282      	cmp	r2, r0
70000f1e:	d002      	beq.n	70000f26 <uart_ns16550_fifo_fill+0x36>
70000f20:	7a2b      	ldrb	r3, [r5, #8]
70000f22:	4283      	cmp	r3, r0
70000f24:	dcf1      	bgt.n	70000f0a <uart_ns16550_fifo_fill+0x1a>
	if (key != 0U) {
70000f26:	b906      	cbnz	r6, 70000f2a <uart_ns16550_fifo_fill+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
70000f28:	b662      	cpsie	i
	}

	k_spin_unlock(&data->lock, key);

	return i;
}
70000f2a:	bc70      	pop	{r4, r5, r6}
70000f2c:	4770      	bx	lr
	for (i = 0; (i < size) && (i < data->fifo_size); i++) {
70000f2e:	2000      	movs	r0, #0
70000f30:	e7f9      	b.n	70000f26 <uart_ns16550_fifo_fill+0x36>
70000f32:	bf00      	nop

70000f34 <uart_ns16550_irq_tx_enable>:
	__asm__ volatile(
70000f34:	f3ef 8100 	mrs	r1, CPSR
70000f38:	f001 0180 	and.w	r1, r1, #128	; 0x80
70000f3c:	b672      	cpsid	i
		port = DEVICE_MMIO_GET(dev);
70000f3e:	6843      	ldr	r3, [r0, #4]
		for (uint8_t i = 0U; i < num_cpu_states; i++) {
			pm_policy_state_lock_get(cpu_states[i].state, PM_ALL_SUBSTATES);
		}
	}
#endif
	ns16550_outbyte(dev_cfg, IER(dev), ns16550_inbyte(dev_cfg, IER(dev)) | IER_TBE);
70000f40:	7d1a      	ldrb	r2, [r3, #20]
70000f42:	681b      	ldr	r3, [r3, #0]
70000f44:	441a      	add	r2, r3
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70000f46:	6813      	ldr	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70000f48:	f3bf 8f5f 	dmb	sy
70000f4c:	f3bf 8f5f 	dmb	sy
70000f50:	f043 0302 	orr.w	r3, r3, #2
			sys_write32(val, port);
70000f54:	b2db      	uxtb	r3, r3
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70000f56:	6013      	str	r3, [r2, #0]
	if (key != 0U) {
70000f58:	b901      	cbnz	r1, 70000f5c <uart_ns16550_irq_tx_enable+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
70000f5a:	b662      	cpsie	i

	k_spin_unlock(&data->lock, key);
}
70000f5c:	4770      	bx	lr
70000f5e:	bf00      	nop

70000f60 <uart_ns16550_irq_tx_disable>:
	__asm__ volatile(
70000f60:	f3ef 8100 	mrs	r1, CPSR
70000f64:	f001 0180 	and.w	r1, r1, #128	; 0x80
70000f68:	b672      	cpsid	i
		port = DEVICE_MMIO_GET(dev);
70000f6a:	6842      	ldr	r2, [r0, #4]
{
	struct uart_ns16550_dev_data *data = dev->data;
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	ns16550_outbyte(dev_cfg, IER(dev),
70000f6c:	7d13      	ldrb	r3, [r2, #20]
70000f6e:	6812      	ldr	r2, [r2, #0]
70000f70:	4413      	add	r3, r2
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70000f72:	681a      	ldr	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70000f74:	f3bf 8f5f 	dmb	sy
70000f78:	f3bf 8f5f 	dmb	sy
			sys_write32(val, port);
70000f7c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70000f80:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
70000f82:	b901      	cbnz	r1, 70000f86 <uart_ns16550_irq_tx_disable+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
70000f84:	b662      	cpsie	i
			pm_policy_state_lock_put(cpu_states[i].state, PM_ALL_SUBSTATES);
		}
	}
#endif
	k_spin_unlock(&data->lock, key);
}
70000f86:	4770      	bx	lr

70000f88 <uart_ns16550_irq_tx_ready>:
	__asm__ volatile(
70000f88:	f3ef 8300 	mrs	r3, CPSR
70000f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
70000f90:	b672      	cpsid	i
static int uart_ns16550_irq_tx_ready(const struct device *dev)
{
	struct uart_ns16550_dev_data *data = dev->data;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	int ret = ((IIRC(dev) & IIR_ID) == IIR_THRE) ? 1 : 0;
70000f92:	6902      	ldr	r2, [r0, #16]
70000f94:	7a50      	ldrb	r0, [r2, #9]
70000f96:	f000 0006 	and.w	r0, r0, #6
70000f9a:	f1a0 0002 	sub.w	r0, r0, #2
70000f9e:	fab0 f080 	clz	r0, r0
70000fa2:	0940      	lsrs	r0, r0, #5
	if (key != 0U) {
70000fa4:	b903      	cbnz	r3, 70000fa8 <uart_ns16550_irq_tx_ready+0x20>
70000fa6:	b662      	cpsie	i

	k_spin_unlock(&data->lock, key);

	return ret;
}
70000fa8:	4770      	bx	lr
70000faa:	bf00      	nop

70000fac <uart_ns16550_irq_tx_complete>:
	__asm__ volatile(
70000fac:	f3ef 8200 	mrs	r2, CPSR
70000fb0:	f002 0280 	and.w	r2, r2, #128	; 0x80
70000fb4:	b672      	cpsid	i
		port = DEVICE_MMIO_GET(dev);
70000fb6:	6843      	ldr	r3, [r0, #4]
{
	struct uart_ns16550_dev_data *data = dev->data;
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	int ret = ((ns16550_inbyte(dev_cfg, LSR(dev)) & (LSR_TEMT | LSR_THRE))
70000fb8:	7d19      	ldrb	r1, [r3, #20]
70000fba:	2005      	movs	r0, #5
70000fbc:	681b      	ldr	r3, [r3, #0]
70000fbe:	fb10 3001 	smlabb	r0, r0, r1, r3
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70000fc2:	6800      	ldr	r0, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70000fc4:	f3bf 8f5f 	dmb	sy
				== (LSR_TEMT | LSR_THRE)) ? 1 : 0;
70000fc8:	f000 0060 	and.w	r0, r0, #96	; 0x60
70000fcc:	f1a0 0060 	sub.w	r0, r0, #96	; 0x60
70000fd0:	fab0 f080 	clz	r0, r0
70000fd4:	0940      	lsrs	r0, r0, #5
	if (key != 0U) {
70000fd6:	b902      	cbnz	r2, 70000fda <uart_ns16550_irq_tx_complete+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
70000fd8:	b662      	cpsie	i

	k_spin_unlock(&data->lock, key);

	return ret;
}
70000fda:	4770      	bx	lr

70000fdc <uart_ns16550_irq_rx_enable>:
	__asm__ volatile(
70000fdc:	f3ef 8100 	mrs	r1, CPSR
70000fe0:	f001 0180 	and.w	r1, r1, #128	; 0x80
70000fe4:	b672      	cpsid	i
		port = DEVICE_MMIO_GET(dev);
70000fe6:	6843      	ldr	r3, [r0, #4]
{
	struct uart_ns16550_dev_data *data = dev->data;
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	ns16550_outbyte(dev_cfg, IER(dev), ns16550_inbyte(dev_cfg, IER(dev)) | IER_RXRDY);
70000fe8:	7d1a      	ldrb	r2, [r3, #20]
70000fea:	681b      	ldr	r3, [r3, #0]
70000fec:	441a      	add	r2, r3
70000fee:	6813      	ldr	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70000ff0:	f3bf 8f5f 	dmb	sy
70000ff4:	f3bf 8f5f 	dmb	sy
70000ff8:	f043 0301 	orr.w	r3, r3, #1
			sys_write32(val, port);
70000ffc:	b2db      	uxtb	r3, r3
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70000ffe:	6013      	str	r3, [r2, #0]
	if (key != 0U) {
70001000:	b901      	cbnz	r1, 70001004 <uart_ns16550_irq_rx_enable+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
70001002:	b662      	cpsie	i

	k_spin_unlock(&data->lock, key);
}
70001004:	4770      	bx	lr
70001006:	bf00      	nop

70001008 <uart_ns16550_irq_rx_disable>:
	__asm__ volatile(
70001008:	f3ef 8100 	mrs	r1, CPSR
7000100c:	f001 0180 	and.w	r1, r1, #128	; 0x80
70001010:	b672      	cpsid	i
		port = DEVICE_MMIO_GET(dev);
70001012:	6842      	ldr	r2, [r0, #4]
{
	struct uart_ns16550_dev_data *data = dev->data;
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	ns16550_outbyte(dev_cfg, IER(dev),
70001014:	7d13      	ldrb	r3, [r2, #20]
70001016:	6812      	ldr	r2, [r2, #0]
70001018:	4413      	add	r3, r2
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
7000101a:	681a      	ldr	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
7000101c:	f3bf 8f5f 	dmb	sy
70001020:	f3bf 8f5f 	dmb	sy
			sys_write32(val, port);
70001024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70001028:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
7000102a:	b901      	cbnz	r1, 7000102e <uart_ns16550_irq_rx_disable+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
7000102c:	b662      	cpsie	i
			ns16550_inbyte(dev_cfg, IER(dev)) & (~IER_RXRDY));

	k_spin_unlock(&data->lock, key);
}
7000102e:	4770      	bx	lr

70001030 <uart_ns16550_irq_rx_ready>:
	__asm__ volatile(
70001030:	f3ef 8300 	mrs	r3, CPSR
70001034:	f003 0380 	and.w	r3, r3, #128	; 0x80
70001038:	b672      	cpsid	i
static int uart_ns16550_irq_rx_ready(const struct device *dev)
{
	struct uart_ns16550_dev_data *data = dev->data;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	int ret = ((IIRC(dev) & IIR_ID) == IIR_RBRF) ? 1 : 0;
7000103a:	6902      	ldr	r2, [r0, #16]
7000103c:	7a50      	ldrb	r0, [r2, #9]
7000103e:	f000 0006 	and.w	r0, r0, #6
70001042:	f1a0 0004 	sub.w	r0, r0, #4
70001046:	fab0 f080 	clz	r0, r0
7000104a:	0940      	lsrs	r0, r0, #5
	if (key != 0U) {
7000104c:	b903      	cbnz	r3, 70001050 <uart_ns16550_irq_rx_ready+0x20>
7000104e:	b662      	cpsie	i

	k_spin_unlock(&data->lock, key);

	return ret;
}
70001050:	4770      	bx	lr
70001052:	bf00      	nop

70001054 <uart_ns16550_irq_err_enable>:
	__asm__ volatile(
70001054:	f3ef 8100 	mrs	r1, CPSR
70001058:	f001 0180 	and.w	r1, r1, #128	; 0x80
7000105c:	b672      	cpsid	i
		port = DEVICE_MMIO_GET(dev);
7000105e:	6843      	ldr	r3, [r0, #4]
{
	struct uart_ns16550_dev_data *data = dev->data;
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	ns16550_outbyte(dev_cfg, IER(dev),
70001060:	7d1a      	ldrb	r2, [r3, #20]
70001062:	681b      	ldr	r3, [r3, #0]
70001064:	441a      	add	r2, r3
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70001066:	6813      	ldr	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70001068:	f3bf 8f5f 	dmb	sy
7000106c:	f3bf 8f5f 	dmb	sy
70001070:	f043 0304 	orr.w	r3, r3, #4
			sys_write32(val, port);
70001074:	b2db      	uxtb	r3, r3
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70001076:	6013      	str	r3, [r2, #0]
	if (key != 0U) {
70001078:	b901      	cbnz	r1, 7000107c <uart_ns16550_irq_err_enable+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
7000107a:	b662      	cpsie	i
			ns16550_inbyte(dev_cfg, IER(dev)) | IER_LSR);

	k_spin_unlock(&data->lock, key);
}
7000107c:	4770      	bx	lr
7000107e:	bf00      	nop

70001080 <uart_ns16550_irq_err_disable>:
	__asm__ volatile(
70001080:	f3ef 8100 	mrs	r1, CPSR
70001084:	f001 0180 	and.w	r1, r1, #128	; 0x80
70001088:	b672      	cpsid	i
		port = DEVICE_MMIO_GET(dev);
7000108a:	6842      	ldr	r2, [r0, #4]
{
	struct uart_ns16550_dev_data *data = dev->data;
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	ns16550_outbyte(dev_cfg, IER(dev),
7000108c:	7d13      	ldrb	r3, [r2, #20]
7000108e:	6812      	ldr	r2, [r2, #0]
70001090:	4413      	add	r3, r2
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70001092:	681a      	ldr	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70001094:	f3bf 8f5f 	dmb	sy
70001098:	f3bf 8f5f 	dmb	sy
			sys_write32(val, port);
7000109c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
700010a0:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
700010a2:	b901      	cbnz	r1, 700010a6 <uart_ns16550_irq_err_disable+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
700010a4:	b662      	cpsie	i
			ns16550_inbyte(dev_cfg, IER(dev)) & (~IER_LSR));

	k_spin_unlock(&data->lock, key);
}
700010a6:	4770      	bx	lr

700010a8 <uart_ns16550_irq_is_pending>:
	__asm__ volatile(
700010a8:	f3ef 8300 	mrs	r3, CPSR
700010ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
700010b0:	b672      	cpsid	i
static int uart_ns16550_irq_is_pending(const struct device *dev)
{
	struct uart_ns16550_dev_data *data = dev->data;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	int ret = (!(IIRC(dev) & IIR_NIP)) ? 1 : 0;
700010b2:	6902      	ldr	r2, [r0, #16]
700010b4:	7a50      	ldrb	r0, [r2, #9]
700010b6:	43c0      	mvns	r0, r0
700010b8:	f000 0001 	and.w	r0, r0, #1
	if (key != 0U) {
700010bc:	b903      	cbnz	r3, 700010c0 <uart_ns16550_irq_is_pending+0x18>
700010be:	b662      	cpsie	i

	k_spin_unlock(&data->lock, key);

	return ret;
}
700010c0:	4770      	bx	lr
700010c2:	bf00      	nop

700010c4 <uart_ns16550_irq_update>:
	__asm__ volatile(
700010c4:	f3ef 8200 	mrs	r2, CPSR
700010c8:	f002 0280 	and.w	r2, r2, #128	; 0x80
700010cc:	b672      	cpsid	i
		port = DEVICE_MMIO_GET(dev);
700010ce:	6843      	ldr	r3, [r0, #4]
{
	struct uart_ns16550_dev_data *data = dev->data;
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	IIRC(dev) = ns16550_inbyte(dev_cfg, IIR(dev));
700010d0:	6901      	ldr	r1, [r0, #16]
700010d2:	7d18      	ldrb	r0, [r3, #20]
700010d4:	681b      	ldr	r3, [r3, #0]
700010d6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
700010da:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
700010dc:	f3bf 8f5f 	dmb	sy
			return sys_read32(port);
700010e0:	724b      	strb	r3, [r1, #9]
	if (key != 0U) {
700010e2:	b902      	cbnz	r2, 700010e6 <uart_ns16550_irq_update+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
700010e4:	b662      	cpsie	i

	k_spin_unlock(&data->lock, key);

	return 1;
}
700010e6:	2001      	movs	r0, #1
700010e8:	4770      	bx	lr
700010ea:	bf00      	nop

700010ec <uart_ns16550_irq_callback_set>:
 */
static void uart_ns16550_irq_callback_set(const struct device *dev,
					  uart_irq_callback_user_data_t cb,
					  void *cb_data)
{
	struct uart_ns16550_dev_data * const dev_data = dev->data;
700010ec:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
700010ee:	f3ef 8000 	mrs	r0, CPSR
700010f2:	f000 0080 	and.w	r0, r0, #128	; 0x80
700010f6:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&dev_data->lock);

	dev_data->cb = cb;
	dev_data->cb_data = cb_data;
700010f8:	e9c3 1203 	strd	r1, r2, [r3, #12]
	if (key != 0U) {
700010fc:	b900      	cbnz	r0, 70001100 <uart_ns16550_irq_callback_set+0x14>
700010fe:	b662      	cpsie	i

	k_spin_unlock(&dev_data->lock, key);
}
70001100:	4770      	bx	lr
70001102:	bf00      	nop

70001104 <uart_ns16550_isr>:
 *
 * @param arg Argument to ISR.
 */
static void uart_ns16550_isr(const struct device *dev)
{
	struct uart_ns16550_dev_data * const dev_data = dev->data;
70001104:	6902      	ldr	r2, [r0, #16]
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;

	if (dev_data->cb) {
70001106:	68d3      	ldr	r3, [r2, #12]
70001108:	b10b      	cbz	r3, 7000110e <uart_ns16550_isr+0xa>
		dev_data->cb(dev, dev_data->cb_data);
7000110a:	6911      	ldr	r1, [r2, #16]
7000110c:	4718      	bx	r3
	uint8_t cached_ier = ns16550_inbyte(dev_cfg, IER(dev));

	ns16550_outbyte(dev_cfg, IER(dev), 0U);
	ns16550_outbyte(dev_cfg, IER(dev), cached_ier);
#endif
}
7000110e:	4770      	bx	lr

70001110 <uart_ns16550_irq_config_func0>:
#define UART_NS16550_DEVICE_INIT(n)                                                  \
	COND_CODE_1(DT_INST_ON_BUS(n, pcie),                                         \
		    (UART_NS16550_DEVICE_PCIE_INIT(n)),                              \
		    (UART_NS16550_DEVICE_IO_MMIO_INIT(n)))

DT_INST_FOREACH_STATUS_OKAY(UART_NS16550_DEVICE_INIT)
70001110:	20d2      	movs	r0, #210	; 0xd2
70001112:	2200      	movs	r2, #0
70001114:	b508      	push	{r3, lr}
70001116:	210f      	movs	r1, #15
70001118:	f7ff fa46 	bl	700005a8 <z_soc_irq_priority_set>
7000111c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
70001120:	20d2      	movs	r0, #210	; 0xd2
70001122:	f7ff ba43 	b.w	700005ac <z_soc_irq_enable>
70001126:	bf00      	nop

70001128 <uart_ns16550_configure>:
{
70001128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t pclk = 0U;
7000112c:	f04f 0900 	mov.w	r9, #0
{
70001130:	b083      	sub	sp, #12
	struct uart_ns16550_dev_data * const dev_data = dev->data;
70001132:	6906      	ldr	r6, [r0, #16]
{
70001134:	4604      	mov	r4, r0
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
70001136:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
7000113a:	460d      	mov	r5, r1
	uint32_t pclk = 0U;
7000113c:	f8cd 9000 	str.w	r9, [sp]
	__asm__ volatile(
70001140:	f3ef 8700 	mrs	r7, CPSR
70001144:	f007 0780 	and.w	r7, r7, #128	; 0x80
70001148:	b672      	cpsid	i
	if (dev_cfg->pincfg != NULL) {
7000114a:	f8d8 0018 	ldr.w	r0, [r8, #24]
7000114e:	b158      	cbz	r0, 70001168 <uart_ns16550_configure+0x40>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
70001150:	4649      	mov	r1, r9
70001152:	aa01      	add	r2, sp, #4
70001154:	f7ff fe4a 	bl	70000dec <pinctrl_lookup_state>
	if (ret < 0) {
70001158:	4548      	cmp	r0, r9
7000115a:	db05      	blt.n	70001168 <uart_ns16550_configure+0x40>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
7000115c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
7000115e:	464a      	mov	r2, r9
70001160:	7919      	ldrb	r1, [r3, #4]
70001162:	6818      	ldr	r0, [r3, #0]
70001164:	f7ff fe70 	bl	70000e48 <pinctrl_configure_pins>
	dev_data->iir_cache = 0U;
70001168:	2300      	movs	r3, #0
	uint32_t mdr = ns16550_inbyte(dev_cfg, MDR1(dev));
7000116a:	2208      	movs	r2, #8
	dev_data->iir_cache = 0U;
7000116c:	7273      	strb	r3, [r6, #9]
		port = DEVICE_MMIO_GET(dev);
7000116e:	6861      	ldr	r1, [r4, #4]
	uint32_t mdr = ns16550_inbyte(dev_cfg, MDR1(dev));
70001170:	7d0b      	ldrb	r3, [r1, #20]
70001172:	6809      	ldr	r1, [r1, #0]
70001174:	fb12 1303 	smlabb	r3, r2, r3, r1
70001178:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
7000117a:	f3bf 8f5f 	dmb	sy
		port = DEVICE_MMIO_GET(dev);
7000117e:	6861      	ldr	r1, [r4, #4]
	ns16550_outbyte(dev_cfg, MDR1(dev), mdr);
70001180:	7d08      	ldrb	r0, [r1, #20]
70001182:	6809      	ldr	r1, [r1, #0]
70001184:	fb12 1200 	smlabb	r2, r2, r0, r1
70001188:	f3bf 8f5f 	dmb	sy
	mdr = ((mdr & ~MDR1_MODE_SELECT_FIELD_MASK) | ((((MDR1_STD_MODE) <<
7000118c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70001190:	6013      	str	r3, [r2, #0]
	if (dev_cfg->sys_clk_freq != 0U) {
70001192:	f8d8 3004 	ldr.w	r3, [r8, #4]
70001196:	2b00      	cmp	r3, #0
70001198:	f000 80ad 	beq.w	700012f6 <uart_ns16550_configure+0x1ce>
		pclk = dev_cfg->sys_clk_freq;
7000119c:	9300      	str	r3, [sp, #0]
	set_baud_rate(dev, cfg->baudrate, pclk);
7000119e:	6829      	ldr	r1, [r5, #0]
	if ((baud_rate != 0U) && (pclk != 0U)) {
700011a0:	2900      	cmp	r1, #0
700011a2:	bf18      	it	ne
700011a4:	2b00      	cmpne	r3, #0
700011a6:	d168      	bne.n	7000127a <uart_ns16550_configure+0x152>
	switch (cfg->data_bits) {
700011a8:	79aa      	ldrb	r2, [r5, #6]
700011aa:	2a03      	cmp	r2, #3
700011ac:	d862      	bhi.n	70001274 <uart_ns16550_configure+0x14c>
	switch (cfg->stop_bits) {
700011ae:	796b      	ldrb	r3, [r5, #5]
700011b0:	2b01      	cmp	r3, #1
700011b2:	f000 80af 	beq.w	70001314 <uart_ns16550_configure+0x1ec>
700011b6:	2b03      	cmp	r3, #3
700011b8:	bf08      	it	eq
700011ba:	f04f 0e04 	moveq.w	lr, #4
700011be:	d159      	bne.n	70001274 <uart_ns16550_configure+0x14c>
	switch (cfg->parity) {
700011c0:	792b      	ldrb	r3, [r5, #4]
700011c2:	b113      	cbz	r3, 700011ca <uart_ns16550_configure+0xa2>
700011c4:	2b02      	cmp	r3, #2
700011c6:	d155      	bne.n	70001274 <uart_ns16550_configure+0x14c>
700011c8:	2310      	movs	r3, #16
	dev_data->uart_config = *cfg;
700011ca:	e895 0003 	ldmia.w	r5, {r0, r1}
	ns16550_outbyte(dev_cfg, LCR(dev),
700011ce:	f04f 0c03 	mov.w	ip, #3
	dev_data->uart_config = *cfg;
700011d2:	e886 0003 	stmia.w	r6, {r0, r1}
		port = DEVICE_MMIO_GET(dev);
700011d6:	6861      	ldr	r1, [r4, #4]
	ns16550_outbyte(dev_cfg, LCR(dev),
700011d8:	7d08      	ldrb	r0, [r1, #20]
700011da:	6809      	ldr	r1, [r1, #0]
700011dc:	fb1c 1c00 	smlabb	ip, ip, r0, r1
700011e0:	f3bf 8f5f 	dmb	sy
700011e4:	ea42 020e 	orr.w	r2, r2, lr
			sys_write32(val, port);
700011e8:	4313      	orrs	r3, r2
700011ea:	f8cc 3000 	str.w	r3, [ip]
		port = DEVICE_MMIO_GET(dev);
700011ee:	6862      	ldr	r2, [r4, #4]
	if (cfg->flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS) {
700011f0:	79eb      	ldrb	r3, [r5, #7]
700011f2:	2b01      	cmp	r3, #1
700011f4:	bf0c      	ite	eq
700011f6:	212b      	moveq	r1, #43	; 0x2b
700011f8:	210b      	movne	r1, #11
	ns16550_outbyte(dev_cfg, MDC(dev), mdc);
700011fa:	6813      	ldr	r3, [r2, #0]
700011fc:	7d12      	ldrb	r2, [r2, #20]
700011fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
70001202:	f3bf 8f5f 	dmb	sy
70001206:	6019      	str	r1, [r3, #0]
		port = DEVICE_MMIO_GET(dev);
70001208:	6863      	ldr	r3, [r4, #4]
	ns16550_outbyte(dev_cfg, FCR(dev),
7000120a:	7d1a      	ldrb	r2, [r3, #20]
7000120c:	6819      	ldr	r1, [r3, #0]
7000120e:	2302      	movs	r3, #2
70001210:	fb13 1202 	smlabb	r2, r3, r2, r1
70001214:	f3bf 8f5f 	dmb	sy
70001218:	21a7      	movs	r1, #167	; 0xa7
7000121a:	6011      	str	r1, [r2, #0]
		port = DEVICE_MMIO_GET(dev);
7000121c:	6862      	ldr	r2, [r4, #4]
	if ((ns16550_inbyte(dev_cfg, IIR(dev)) & IIR_FE) == IIR_FE) {
7000121e:	7d11      	ldrb	r1, [r2, #20]
70001220:	6812      	ldr	r2, [r2, #0]
70001222:	fb13 2301 	smlabb	r3, r3, r1, r2
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70001226:	681b      	ldr	r3, [r3, #0]
70001228:	f3bf 8f5f 	dmb	sy
	if ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_RXRDY) != 0) {
7000122c:	2205      	movs	r2, #5
	if ((ns16550_inbyte(dev_cfg, IIR(dev)) & IIR_FE) == IIR_FE) {
7000122e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		dev_data->fifo_size = 64;
70001232:	2bc0      	cmp	r3, #192	; 0xc0
70001234:	bf14      	ite	ne
70001236:	2301      	movne	r3, #1
70001238:	2340      	moveq	r3, #64	; 0x40
7000123a:	7233      	strb	r3, [r6, #8]
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
7000123c:	6863      	ldr	r3, [r4, #4]
	if ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_RXRDY) != 0) {
7000123e:	7d19      	ldrb	r1, [r3, #20]
70001240:	681b      	ldr	r3, [r3, #0]
70001242:	fb12 3301 	smlabb	r3, r2, r1, r3
70001246:	681b      	ldr	r3, [r3, #0]
70001248:	f3bf 8f5f 	dmb	sy
7000124c:	07db      	lsls	r3, r3, #31
7000124e:	d504      	bpl.n	7000125a <uart_ns16550_configure+0x132>
		port = DEVICE_MMIO_GET(dev);
70001250:	6863      	ldr	r3, [r4, #4]
70001252:	681b      	ldr	r3, [r3, #0]
70001254:	681b      	ldr	r3, [r3, #0]
70001256:	f3bf 8f5f 	dmb	sy
7000125a:	6862      	ldr	r2, [r4, #4]
	ns16550_outbyte(dev_cfg, IER(dev), 0x00);
7000125c:	7d13      	ldrb	r3, [r2, #20]
7000125e:	6812      	ldr	r2, [r2, #0]
70001260:	4413      	add	r3, r2
70001262:	f3bf 8f5f 	dmb	sy
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70001266:	2000      	movs	r0, #0
70001268:	6018      	str	r0, [r3, #0]
	if (key != 0U) {
7000126a:	b907      	cbnz	r7, 7000126e <uart_ns16550_configure+0x146>
  __ASM volatile ("cpsie i" : : : "memory");
7000126c:	b662      	cpsie	i
};
7000126e:	b003      	add	sp, #12
70001270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (cfg->parity) {
70001274:	f06f 0085 	mvn.w	r0, #133	; 0x85
70001278:	e7f7      	b.n	7000126a <uart_ns16550_configure+0x142>
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
7000127a:	6860      	ldr	r0, [r4, #4]
		lcr_cache = ns16550_inbyte(dev_cfg, LCR(dev));
7000127c:	7d02      	ldrb	r2, [r0, #20]
7000127e:	f04f 0c03 	mov.w	ip, #3
	return ((pclk + (baud_rate << 3)) / baud_rate) >> 4;
70001282:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
	struct uart_ns16550_dev_data * const dev_data = dev->data;
70001286:	f8d4 e010 	ldr.w	lr, [r4, #16]
		lcr_cache = ns16550_inbyte(dev_cfg, LCR(dev));
7000128a:	6800      	ldr	r0, [r0, #0]
	return ((pclk + (baud_rate << 3)) / baud_rate) >> 4;
7000128c:	fbb3 f3f1 	udiv	r3, r3, r1
		lcr_cache = ns16550_inbyte(dev_cfg, LCR(dev));
70001290:	fb1c 0202 	smlabb	r2, ip, r2, r0
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70001294:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70001296:	f3bf 8f5f 	dmb	sy
		port = DEVICE_MMIO_GET(dev);
7000129a:	6860      	ldr	r0, [r4, #4]
		ns16550_outbyte(dev_cfg, LCR(dev), LCR_DLAB | lcr_cache);
7000129c:	f890 8014 	ldrb.w	r8, [r0, #20]
700012a0:	6800      	ldr	r0, [r0, #0]
700012a2:	fb1c 0808 	smlabb	r8, ip, r8, r0
700012a6:	f3bf 8f5f 	dmb	sy
700012aa:	f062 007f 	orn	r0, r2, #127	; 0x7f
			sys_write32(val, port);
700012ae:	b2c0      	uxtb	r0, r0
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
700012b0:	f8c8 0000 	str.w	r0, [r8]
		port = DEVICE_MMIO_GET(dev);
700012b4:	6860      	ldr	r0, [r4, #4]
700012b6:	f8d0 8000 	ldr.w	r8, [r0]
700012ba:	f3bf 8f5f 	dmb	sy
700012be:	f3c3 1007 	ubfx	r0, r3, #4, #8
700012c2:	f8c8 0000 	str.w	r0, [r8]
700012c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
		ns16550_outbyte(dev_cfg, BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
700012ca:	f898 0014 	ldrb.w	r0, [r8, #20]
700012ce:	f8d8 8000 	ldr.w	r8, [r8]
700012d2:	4440      	add	r0, r8
700012d4:	f3bf 8f5f 	dmb	sy
700012d8:	f3c3 3307 	ubfx	r3, r3, #12, #8
700012dc:	6003      	str	r3, [r0, #0]
		port = DEVICE_MMIO_GET(dev);
700012de:	6863      	ldr	r3, [r4, #4]
		ns16550_outbyte(dev_cfg, LCR(dev), lcr_cache);
700012e0:	7d18      	ldrb	r0, [r3, #20]
700012e2:	681b      	ldr	r3, [r3, #0]
700012e4:	fb1c 3300 	smlabb	r3, ip, r0, r3
700012e8:	f3bf 8f5f 	dmb	sy
700012ec:	b2d2      	uxtb	r2, r2
700012ee:	601a      	str	r2, [r3, #0]
		dev_data->uart_config.baudrate = baud_rate;
700012f0:	f8ce 1000 	str.w	r1, [lr]
700012f4:	e758      	b.n	700011a8 <uart_ns16550_configure+0x80>
		if (!device_is_ready(dev_cfg->clock_dev)) {
700012f6:	f8d8 0008 	ldr.w	r0, [r8, #8]
700012fa:	f000 f945 	bl	70001588 <z_impl_device_is_ready>
700012fe:	b180      	cbz	r0, 70001322 <uart_ns16550_configure+0x1fa>
					   dev_cfg->clock_subsys,
70001300:	e9d8 0102 	ldrd	r0, r1, [r8, #8]
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
70001304:	6883      	ldr	r3, [r0, #8]
70001306:	68db      	ldr	r3, [r3, #12]
70001308:	b15b      	cbz	r3, 70001322 <uart_ns16550_configure+0x1fa>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
7000130a:	466a      	mov	r2, sp
7000130c:	4798      	blx	r3
		if (clock_control_get_rate(dev_cfg->clock_dev,
7000130e:	b940      	cbnz	r0, 70001322 <uart_ns16550_configure+0x1fa>
	set_baud_rate(dev, cfg->baudrate, pclk);
70001310:	9b00      	ldr	r3, [sp, #0]
70001312:	e744      	b.n	7000119e <uart_ns16550_configure+0x76>
		uart_cfg.stop_bits = LCR_1_STB;
70001314:	f04f 0e00 	mov.w	lr, #0
	switch (cfg->parity) {
70001318:	792b      	ldrb	r3, [r5, #4]
7000131a:	2b00      	cmp	r3, #0
7000131c:	f47f af52 	bne.w	700011c4 <uart_ns16550_configure+0x9c>
70001320:	e753      	b.n	700011ca <uart_ns16550_configure+0xa2>
			ret = -EINVAL;
70001322:	f06f 0015 	mvn.w	r0, #21
70001326:	e7a0      	b.n	7000126a <uart_ns16550_configure+0x142>

70001328 <uart_ns16550_init>:
{
70001328:	b570      	push	{r4, r5, r6, lr}
	ret = uart_ns16550_configure(dev, &data->uart_config);
7000132a:	6901      	ldr	r1, [r0, #16]
{
7000132c:	4604      	mov	r4, r0
	const struct uart_ns16550_dev_config *dev_cfg = dev->config;
7000132e:	6846      	ldr	r6, [r0, #4]
	ret = uart_ns16550_configure(dev, &data->uart_config);
70001330:	f7ff fefa 	bl	70001128 <uart_ns16550_configure>
	if (ret != 0) {
70001334:	4605      	mov	r5, r0
70001336:	b910      	cbnz	r0, 7000133e <uart_ns16550_init+0x16>
	dev_cfg->irq_config_func(dev);
70001338:	6933      	ldr	r3, [r6, #16]
7000133a:	4620      	mov	r0, r4
7000133c:	4798      	blx	r3
}
7000133e:	4628      	mov	r0, r5
70001340:	bd70      	pop	{r4, r5, r6, pc}
70001342:	bf00      	nop

70001344 <uart_ns16550_fifo_read>:
{
70001344:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
70001346:	f3ef 8400 	mrs	r4, CPSR
7000134a:	f004 0480 	and.w	r4, r4, #128	; 0x80
7000134e:	b672      	cpsid	i
	for (i = 0; (i < size) && (ns16550_read_char(dev, &rx_data[i]) != -1); i++) {
70001350:	2a00      	cmp	r2, #0
70001352:	dd1d      	ble.n	70001390 <uart_ns16550_fifo_read+0x4c>
70001354:	4686      	mov	lr, r0
70001356:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
7000135a:	2000      	movs	r0, #0
	if ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_RXRDY) != 0) {
7000135c:	2505      	movs	r5, #5
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
7000135e:	f8de 1004 	ldr.w	r1, [lr, #4]
	if ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_RXRDY) != 0) {
70001362:	7d0b      	ldrb	r3, [r1, #20]
70001364:	6809      	ldr	r1, [r1, #0]
70001366:	fb15 1303 	smlabb	r3, r5, r3, r1
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
7000136a:	681b      	ldr	r3, [r3, #0]
7000136c:	f3bf 8f5f 	dmb	sy
70001370:	07db      	lsls	r3, r3, #31
70001372:	d50a      	bpl.n	7000138a <uart_ns16550_fifo_read+0x46>
		port = DEVICE_MMIO_GET(dev);
70001374:	f8de 3004 	ldr.w	r3, [lr, #4]
70001378:	681b      	ldr	r3, [r3, #0]
7000137a:	681b      	ldr	r3, [r3, #0]
7000137c:	f3bf 8f5f 	dmb	sy
			return sys_read32(port);
70001380:	f80c 3f01 	strb.w	r3, [ip, #1]!
	for (i = 0; (i < size) && (ns16550_read_char(dev, &rx_data[i]) != -1); i++) {
70001384:	3001      	adds	r0, #1
70001386:	4282      	cmp	r2, r0
70001388:	d1e9      	bne.n	7000135e <uart_ns16550_fifo_read+0x1a>
	if (key != 0U) {
7000138a:	b904      	cbnz	r4, 7000138e <uart_ns16550_fifo_read+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
7000138c:	b662      	cpsie	i
}
7000138e:	bd30      	pop	{r4, r5, pc}
	for (i = 0; (i < size) && (ns16550_read_char(dev, &rx_data[i]) != -1); i++) {
70001390:	2000      	movs	r0, #0
70001392:	e7fa      	b.n	7000138a <uart_ns16550_fifo_read+0x46>

70001394 <uart_ns16550_poll_in>:
{
70001394:	b410      	push	{r4}
	__asm__ volatile(
70001396:	f3ef 8200 	mrs	r2, CPSR
7000139a:	f002 0280 	and.w	r2, r2, #128	; 0x80
7000139e:	b672      	cpsid	i
	const struct uart_ns16550_dev_config * const dev_cfg = dev->config;
700013a0:	6843      	ldr	r3, [r0, #4]
	if ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_RXRDY) != 0) {
700013a2:	f893 c014 	ldrb.w	ip, [r3, #20]
700013a6:	681c      	ldr	r4, [r3, #0]
700013a8:	2305      	movs	r3, #5
700013aa:	fb13 430c 	smlabb	r3, r3, ip, r4
700013ae:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
700013b0:	f3bf 8f5f 	dmb	sy
700013b4:	07db      	lsls	r3, r3, #31
700013b6:	d50a      	bpl.n	700013ce <uart_ns16550_poll_in+0x3a>
		port = DEVICE_MMIO_GET(dev);
700013b8:	6843      	ldr	r3, [r0, #4]
700013ba:	681b      	ldr	r3, [r3, #0]
700013bc:	681b      	ldr	r3, [r3, #0]
700013be:	f3bf 8f5f 	dmb	sy
			return sys_read32(port);
700013c2:	700b      	strb	r3, [r1, #0]
		return 0;
700013c4:	2000      	movs	r0, #0
	if (key != 0U) {
700013c6:	b902      	cbnz	r2, 700013ca <uart_ns16550_poll_in+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
700013c8:	b662      	cpsie	i
}
700013ca:	bc10      	pop	{r4}
700013cc:	4770      	bx	lr
	return -1;
700013ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
700013d2:	e7f8      	b.n	700013c6 <uart_ns16550_poll_in+0x32>

700013d4 <sys_clock_driver_init>:
	return delta_ticks;
}

static int sys_clock_driver_init(void)
{
	last_cycle = 0;
700013d4:	f247 7324 	movw	r3, #30500	; 0x7724

	IRQ_CONNECT(TIMER_IRQ_NUM, TIMER_IRQ_PRIO, ti_dmtimer_isr, NULL, TIMER_IRQ_FLAGS);
700013d8:	2202      	movs	r2, #2
{
700013da:	b510      	push	{r4, lr}
	last_cycle = 0;
700013dc:	2400      	movs	r4, #0
700013de:	f2c7 0300 	movt	r3, #28672	; 0x7000
	IRQ_CONNECT(TIMER_IRQ_NUM, TIMER_IRQ_PRIO, ti_dmtimer_isr, NULL, TIMER_IRQ_FLAGS);
700013e2:	210f      	movs	r1, #15
700013e4:	209f      	movs	r0, #159	; 0x9f
	last_cycle = 0;
700013e6:	601c      	str	r4, [r3, #0]
	IRQ_CONNECT(TIMER_IRQ_NUM, TIMER_IRQ_PRIO, ti_dmtimer_isr, NULL, TIMER_IRQ_FLAGS);
700013e8:	f7ff f8de 	bl	700005a8 <z_soc_irq_priority_set>
700013ec:	2338      	movs	r3, #56	; 0x38
700013ee:	f2c0 2347 	movt	r3, #583	; 0x247
700013f2:	681a      	ldr	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
700013f4:	f3bf 8f5f 	dmb	sy
700013f8:	f3bf 8f5f 	dmb	sy
	reg_val = (reg_val & ~(mask)) | (data << shift);
700013fc:	f022 0220 	bic.w	r2, r2, #32
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70001400:	601a      	str	r2, [r3, #0]
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70001402:	681a      	ldr	r2, [r3, #0]
70001404:	f3bf 8f5f 	dmb	sy
70001408:	f3bf 8f5f 	dmb	sy
7000140c:	f042 0202 	orr.w	r2, r2, #2
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70001410:	601a      	str	r2, [r3, #0]
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70001412:	212c      	movs	r1, #44	; 0x2c
70001414:	f2c0 2147 	movt	r1, #583	; 0x247
70001418:	680a      	ldr	r2, [r1, #0]
7000141a:	f3bf 8f5f 	dmb	sy
7000141e:	f3bf 8f5f 	dmb	sy
70001422:	f042 0201 	orr.w	r2, r2, #1
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70001426:	600a      	str	r2, [r1, #0]
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70001428:	223c      	movs	r2, #60	; 0x3c
7000142a:	f2c0 2247 	movt	r2, #583	; 0x247
7000142e:	6811      	ldr	r1, [r2, #0]
70001430:	f3bf 8f5f 	dmb	sy
70001434:	f3bf 8f5f 	dmb	sy
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70001438:	6014      	str	r4, [r2, #0]
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
7000143a:	2240      	movs	r2, #64	; 0x40
7000143c:	f2c0 2247 	movt	r2, #583	; 0x247
70001440:	6811      	ldr	r1, [r2, #0]
70001442:	f3bf 8f5f 	dmb	sy
70001446:	f3bf 8f5f 	dmb	sy
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
7000144a:	6014      	str	r4, [r2, #0]
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
7000144c:	224c      	movs	r2, #76	; 0x4c
7000144e:	f2c0 2247 	movt	r2, #583	; 0x247
70001452:	6811      	ldr	r1, [r2, #0]
70001454:	f3bf 8f5f 	dmb	sy
70001458:	f3bf 8f5f 	dmb	sy
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
7000145c:	f246 11a8 	movw	r1, #25000	; 0x61a8
70001460:	6011      	str	r1, [r2, #0]
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70001462:	681a      	ldr	r2, [r3, #0]
70001464:	f3bf 8f5f 	dmb	sy
70001468:	f3bf 8f5f 	dmb	sy
7000146c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70001470:	601a      	str	r2, [r3, #0]
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70001472:	681a      	ldr	r2, [r3, #0]
70001474:	f3bf 8f5f 	dmb	sy
70001478:	f3bf 8f5f 	dmb	sy
7000147c:	f042 0201 	orr.w	r2, r2, #1
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
70001480:	601a      	str	r2, [r3, #0]
	TI_DM_TIMER_WRITE(1, TCLR, CE);

	/* Start the timer */
	TI_DM_TIMER_WRITE(1, TCLR, ST);

	irq_enable(TIMER_IRQ_NUM);
70001482:	209f      	movs	r0, #159	; 0x9f
70001484:	f7ff f892 	bl	700005ac <z_soc_irq_enable>

	return 0;
}
70001488:	4620      	mov	r0, r4
7000148a:	bd10      	pop	{r4, pc}

7000148c <ti_dmtimer_isr>:
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
7000148c:	2228      	movs	r2, #40	; 0x28
7000148e:	f2c0 2247 	movt	r2, #583	; 0x247
70001492:	6813      	ldr	r3, [r2, #0]
70001494:	f3bf 8f5f 	dmb	sy
	if (!TI_DM_TIMER_READ(IRQSTATUS)) {
70001498:	b33b      	cbz	r3, 700014ea <ti_dmtimer_isr+0x5e>
{
7000149a:	b410      	push	{r4}
	__asm__ volatile(
7000149c:	f3ef 8400 	mrs	r4, CPSR
700014a0:	f004 0480 	and.w	r4, r4, #128	; 0x80
700014a4:	b672      	cpsid	i
700014a6:	233c      	movs	r3, #60	; 0x3c
700014a8:	f2c0 2347 	movt	r3, #583	; 0x247
700014ac:	681b      	ldr	r3, [r3, #0]
700014ae:	f3bf 8f5f 	dmb	sy
	uint32_t delta_cycles = curr_cycle - last_cycle;
700014b2:	f247 7124 	movw	r1, #30500	; 0x7724
700014b6:	f2c7 0100 	movt	r1, #28672	; 0x7000
700014ba:	6808      	ldr	r0, [r1, #0]
	last_cycle = curr_cycle;
700014bc:	600b      	str	r3, [r1, #0]
	uint32_t delta_cycles = curr_cycle - last_cycle;
700014be:	1a18      	subs	r0, r3, r0
	uint32_t delta_ticks = delta_cycles / CYC_PER_TICK;
700014c0:	f24b 5389 	movw	r3, #46473	; 0xb589
700014c4:	f2c1 43f8 	movt	r3, #5368	; 0x14f8
700014c8:	08c0      	lsrs	r0, r0, #3
700014ca:	fba3 3000 	umull	r3, r0, r3, r0
700014ce:	0a00      	lsrs	r0, r0, #8
700014d0:	6813      	ldr	r3, [r2, #0]
700014d2:	f3bf 8f5f 	dmb	sy
700014d6:	f3bf 8f5f 	dmb	sy
	reg_val = (reg_val & ~(mask)) | (data << shift);
700014da:	f043 0301 	orr.w	r3, r3, #1
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
700014de:	6013      	str	r3, [r2, #0]
	if (key != 0U) {
700014e0:	b904      	cbnz	r4, 700014e4 <ti_dmtimer_isr+0x58>
  __ASM volatile ("cpsie i" : : : "memory");
700014e2:	b662      	cpsie	i
}
700014e4:	bc10      	pop	{r4}
	sys_clock_announce(delta_ticks);
700014e6:	f001 b821 	b.w	7000252c <sys_clock_announce>
700014ea:	4770      	bx	lr

700014ec <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
700014ec:	1c43      	adds	r3, r0, #1
700014ee:	d028      	beq.n	70001542 <sys_clock_set_timeout+0x56>
	ticks = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
700014f0:	2801      	cmp	r0, #1
700014f2:	bfd8      	it	le
700014f4:	f246 10a8 	movwle	r0, #25000	; 0x61a8
700014f8:	dd0a      	ble.n	70001510 <sys_clock_set_timeout+0x24>
700014fa:	f649 7315 	movw	r3, #40725	; 0x9f15
	uint32_t next_cycle = curr_cycle + (ticks * CYC_PER_TICK);
700014fe:	f246 12a8 	movw	r2, #25000	; 0x61a8
	ticks = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
70001502:	f2c0 0302 	movt	r3, #2
70001506:	4298      	cmp	r0, r3
70001508:	bfa8      	it	ge
7000150a:	4618      	movge	r0, r3
	uint32_t next_cycle = curr_cycle + (ticks * CYC_PER_TICK);
7000150c:	fb02 f000 	mul.w	r0, r2, r0
	__asm__ volatile(
70001510:	f3ef 8100 	mrs	r1, CPSR
70001514:	f001 0180 	and.w	r1, r1, #128	; 0x80
70001518:	b672      	cpsid	i
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
7000151a:	233c      	movs	r3, #60	; 0x3c
7000151c:	f2c0 2347 	movt	r3, #583	; 0x247
70001520:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
70001522:	f3bf 8f5f 	dmb	sy
70001526:	224c      	movs	r2, #76	; 0x4c
70001528:	f2c0 2247 	movt	r2, #583	; 0x247
7000152c:	f8d2 c000 	ldr.w	ip, [r2]
70001530:	f3bf 8f5f 	dmb	sy
70001534:	f3bf 8f5f 	dmb	sy
70001538:	4403      	add	r3, r0
	__asm__ volatile("str %0, [%1]" : : "r" (data), "r" (addr));
7000153a:	6013      	str	r3, [r2, #0]
	if (key != 0U) {
7000153c:	b901      	cbnz	r1, 70001540 <sys_clock_set_timeout+0x54>
  __ASM volatile ("cpsie i" : : : "memory");
7000153e:	b662      	cpsie	i
}
70001540:	4770      	bx	lr
70001542:	f645 20c8 	movw	r0, #23240	; 0x5ac8
70001546:	f6cf 70ff 	movt	r0, #65535	; 0xffff
7000154a:	e7e1      	b.n	70001510 <sys_clock_set_timeout+0x24>

7000154c <sys_clock_elapsed>:
	__asm__ volatile(
7000154c:	f3ef 8100 	mrs	r1, CPSR
70001550:	f001 0180 	and.w	r1, r1, #128	; 0x80
70001554:	b672      	cpsid	i
	__asm__ volatile("ldr %0, [%1]" : "=r" (val) : "r" (addr));
70001556:	233c      	movs	r3, #60	; 0x3c
70001558:	f2c0 2347 	movt	r3, #583	; 0x247
7000155c:	6818      	ldr	r0, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
7000155e:	f3bf 8f5f 	dmb	sy
	uint32_t delta_cycles = curr_cycle - last_cycle;
70001562:	f247 7224 	movw	r2, #30500	; 0x7724
	uint32_t delta_ticks = delta_cycles / CYC_PER_TICK;
70001566:	f24b 5389 	movw	r3, #46473	; 0xb589
	uint32_t delta_cycles = curr_cycle - last_cycle;
7000156a:	f2c7 0200 	movt	r2, #28672	; 0x7000
	uint32_t delta_ticks = delta_cycles / CYC_PER_TICK;
7000156e:	f2c1 43f8 	movt	r3, #5368	; 0x14f8
	uint32_t delta_cycles = curr_cycle - last_cycle;
70001572:	6812      	ldr	r2, [r2, #0]
70001574:	1a80      	subs	r0, r0, r2
	uint32_t delta_ticks = delta_cycles / CYC_PER_TICK;
70001576:	08c0      	lsrs	r0, r0, #3
70001578:	fba3 3000 	umull	r3, r0, r3, r0
7000157c:	0a00      	lsrs	r0, r0, #8
	if (key != 0U) {
7000157e:	b901      	cbnz	r1, 70001582 <sys_clock_elapsed+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
70001580:	b662      	cpsie	i
}
70001582:	4770      	bx	lr

70001584 <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		k_object_init(dev);
	}
}
70001584:	4770      	bx	lr
70001586:	bf00      	nop

70001588 <z_impl_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
70001588:	b140      	cbz	r0, 7000159c <z_impl_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
7000158a:	68c3      	ldr	r3, [r0, #12]
7000158c:	7858      	ldrb	r0, [r3, #1]
7000158e:	f010 0001 	ands.w	r0, r0, #1
70001592:	bf1e      	ittt	ne
70001594:	7818      	ldrbne	r0, [r3, #0]
70001596:	fab0 f080 	clzne	r0, r0
7000159a:	0940      	lsrne	r0, r0, #5
}
7000159c:	4770      	bx	lr
7000159e:	bf00      	nop

700015a0 <arch_system_halt>:
	__asm__ volatile(
700015a0:	f3ef 8300 	mrs	r3, CPSR
700015a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
700015a8:	b672      	cpsid	i
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
700015aa:	e7fe      	b.n	700015aa <arch_system_halt+0xa>

700015ac <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const struct arch_esf *esf)
{
700015ac:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
700015ae:	f7ff fff7 	bl	700015a0 <arch_system_halt>
700015b2:	bf00      	nop

700015b4 <z_fatal_error>:
	arch_system_halt(reason);
}
/* LCOV_EXCL_STOP */

void z_fatal_error(unsigned int reason, const struct arch_esf *esf)
{
700015b4:	b538      	push	{r3, r4, r5, lr}
700015b6:	f3ef 8500 	mrs	r5, CPSR
700015ba:	f005 0580 	and.w	r5, r5, #128	; 0x80
700015be:	b672      	cpsid	i

	struct k_thread *ret = _current_cpu->current;

	arch_irq_unlock(k);
#else
	struct k_thread *ret = _kernel.cpus[0].current;
700015c0:	f247 7228 	movw	r2, #30504	; 0x7728
700015c4:	f2c7 0200 	movt	r2, #28672	; 0x7000
700015c8:	6894      	ldr	r4, [r2, #8]
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
700015ca:	b161      	cbz	r1, 700015e6 <z_fatal_error+0x32>
700015cc:	ee1d 3f70 	mrc	15, 0, r3, cr13, cr0, {3}
		LOG_ERR("Current thread: %p (%s)", thread, thread_name_get(thread));
	}

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
700015d0:	f7ff ffec 	bl	700015ac <k_sys_fatal_error_handler>
700015d4:	ee1d 3f70 	mrc	15, 0, r3, cr13, cr0, {3}
	if (key != 0U) {
700015d8:	b905      	cbnz	r5, 700015dc <z_fatal_error+0x28>
700015da:	b662      	cpsie	i
700015dc:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
700015de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
700015e2:	f000 be8b 	b.w	700022fc <z_impl_k_thread_abort>
	k_sys_fatal_error_handler(reason, esf);
700015e6:	f7ff ffe1 	bl	700015ac <k_sys_fatal_error_handler>
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
700015ea:	e7f5      	b.n	700015d8 <z_fatal_error+0x24>

700015ec <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
700015ec:	f644 039c 	movw	r3, #18588	; 0x489c
700015f0:	1c42      	adds	r2, r0, #1
700015f2:	f2c7 0300 	movt	r3, #28672	; 0x7000
{
700015f6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
700015f8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
700015fc:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
70001600:	42b4      	cmp	r4, r6
70001602:	d314      	bcc.n	7000162e <z_sys_init_run_level+0x42>
70001604:	e01b      	b.n	7000163e <z_sys_init_run_level+0x52>
		rc = entry->init_fn.dev(dev);
70001606:	4628      	mov	r0, r5
	if (entry->init_fn.dev != NULL) {
70001608:	b14b      	cbz	r3, 7000161e <z_sys_init_run_level+0x32>
		rc = entry->init_fn.dev(dev);
7000160a:	4798      	blx	r3
		if (rc != 0) {
7000160c:	b138      	cbz	r0, 7000161e <z_sys_init_run_level+0x32>
			dev->state->init_res = rc;
7000160e:	68eb      	ldr	r3, [r5, #12]
			if (rc < 0) {
70001610:	2800      	cmp	r0, #0
70001612:	bfb8      	it	lt
70001614:	4240      	neglt	r0, r0
			if (rc > UINT8_MAX) {
70001616:	28ff      	cmp	r0, #255	; 0xff
70001618:	bfa8      	it	ge
7000161a:	20ff      	movge	r0, #255	; 0xff
			dev->state->init_res = rc;
7000161c:	7018      	strb	r0, [r3, #0]
	dev->state->initialized = true;
7000161e:	68ea      	ldr	r2, [r5, #12]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
70001620:	3408      	adds	r4, #8
	dev->state->initialized = true;
70001622:	7853      	ldrb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
70001624:	42a6      	cmp	r6, r4
	dev->state->initialized = true;
70001626:	f043 0301 	orr.w	r3, r3, #1
7000162a:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
7000162c:	d907      	bls.n	7000163e <z_sys_init_run_level+0x52>

		sys_trace_sys_init_enter(entry, level);
		if (dev != NULL) {
			result = do_device_init(entry);
		} else {
			result = entry->init_fn.sys();
7000162e:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
70001632:	2d00      	cmp	r5, #0
70001634:	d1e7      	bne.n	70001606 <z_sys_init_run_level+0x1a>
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
70001636:	3408      	adds	r4, #8
			result = entry->init_fn.sys();
70001638:	4798      	blx	r3
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
7000163a:	42a6      	cmp	r6, r4
7000163c:	d8f7      	bhi.n	7000162e <z_sys_init_run_level+0x42>
		}
		sys_trace_sys_init_exit(entry, level, result);
	}
}
7000163e:	bd70      	pop	{r4, r5, r6, pc}

70001640 <bg_thread_main>:
	 * may perform memory management tasks (except for
	 * k_mem_map_phys_bare() which is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
70001640:	f247 734c 	movw	r3, #30540	; 0x774c
70001644:	2201      	movs	r2, #1
70001646:	f2c7 0300 	movt	r3, #28672	; 0x7000
{
7000164a:	b5f0      	push	{r4, r5, r6, r7, lr}

#if CONFIG_IRQ_OFFLOAD
	arch_irq_offload_init();
#endif
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
7000164c:	2003      	movs	r0, #3
{
7000164e:	b087      	sub	sp, #28
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
70001650:	f244 6640 	movw	r6, #17984	; 0x4640
70001654:	f244 6570 	movw	r5, #18032	; 0x4670
	z_sys_post_kernel = true;
70001658:	701a      	strb	r2, [r3, #0]
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
7000165a:	f2c7 0600 	movt	r6, #28672	; 0x7000
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
7000165e:	f7ff ffc5 	bl	700015ec <z_sys_init_run_level>
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
70001662:	f2c7 0500 	movt	r5, #28672	; 0x7000
#endif

#if defined(CONFIG_STACK_POINTER_RANDOM) && (CONFIG_STACK_POINTER_RANDOM != 0)
	z_stack_adjust_initialized = 1;
#endif /* CONFIG_STACK_POINTER_RANDOM */
	boot_banner();
70001666:	f001 f879 	bl	7000275c <boot_banner>

	void z_init_static(void);
	z_init_static();
7000166a:	f000 f8d3 	bl	70001814 <z_init_static>

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
7000166e:	2004      	movs	r0, #4
70001670:	f7ff ffbc 	bl	700015ec <z_sys_init_run_level>
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
70001674:	42ae      	cmp	r6, r5
70001676:	d217      	bcs.n	700016a8 <bg_thread_main+0x68>
70001678:	4634      	mov	r4, r6
		z_setup_new_thread(
7000167a:	6a67      	ldr	r7, [r4, #36]	; 0x24
7000167c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
70001680:	e9d4 0100 	ldrd	r0, r1, [r4]
70001684:	9705      	str	r7, [sp, #20]
70001686:	6a27      	ldr	r7, [r4, #32]
70001688:	9704      	str	r7, [sp, #16]
7000168a:	69e7      	ldr	r7, [r4, #28]
7000168c:	9703      	str	r7, [sp, #12]
7000168e:	69a7      	ldr	r7, [r4, #24]
70001690:	9702      	str	r7, [sp, #8]
70001692:	6967      	ldr	r7, [r4, #20]
70001694:	9701      	str	r7, [sp, #4]
70001696:	6927      	ldr	r7, [r4, #16]
70001698:	9700      	str	r7, [sp, #0]
7000169a:	f000 fa43 	bl	70001b24 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
7000169e:	6823      	ldr	r3, [r4, #0]
700016a0:	655c      	str	r4, [r3, #84]	; 0x54
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
700016a2:	3430      	adds	r4, #48	; 0x30
700016a4:	42ac      	cmp	r4, r5
700016a6:	d3e8      	bcc.n	7000167a <bg_thread_main+0x3a>
	k_sched_lock();
700016a8:	f000 fd04 	bl	700020b4 <k_sched_lock>
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
700016ac:	42ae      	cmp	r6, r5
700016ae:	d222      	bcs.n	700016f6 <bg_thread_main+0xb6>
700016b0:	f244 6440 	movw	r4, #17984	; 0x4640

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
700016b4:	f641 77d9 	movw	r7, #8153	; 0x1fd9
700016b8:	f2c7 0400 	movt	r4, #28672	; 0x7000
700016bc:	f2c7 0700 	movt	r7, #28672	; 0x7000
700016c0:	e005      	b.n	700016ce <bg_thread_main+0x8e>
	z_impl_k_wakeup(thread);
700016c2:	4630      	mov	r0, r6
700016c4:	f000 fdee 	bl	700022a4 <z_impl_k_wakeup>
700016c8:	3430      	adds	r4, #48	; 0x30
700016ca:	42ac      	cmp	r4, r5
700016cc:	d213      	bcs.n	700016f6 <bg_thread_main+0xb6>
		k_timeout_t init_delay = Z_THREAD_INIT_DELAY(thread_data);
700016ce:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
		if (!K_TIMEOUT_EQ(init_delay, K_FOREVER)) {
700016d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
700016d6:	bf08      	it	eq
700016d8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
700016dc:	d0f4      	beq.n	700016c8 <bg_thread_main+0x88>
			thread_schedule_new(thread_data->init_thread,
700016de:	6826      	ldr	r6, [r4, #0]


static inline void thread_schedule_new(struct k_thread *thread, k_timeout_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
700016e0:	ea52 0003 	orrs.w	r0, r2, r3
700016e4:	4639      	mov	r1, r7
700016e6:	f106 0018 	add.w	r0, r6, #24
700016ea:	d0ea      	beq.n	700016c2 <bg_thread_main+0x82>
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data) {
700016ec:	3430      	adds	r4, #48	; 0x30
700016ee:	f000 fe63 	bl	700023b8 <z_add_timeout>
700016f2:	42ac      	cmp	r4, r5
700016f4:	d3eb      	bcc.n	700016ce <bg_thread_main+0x8e>
	k_sched_unlock();
700016f6:	f000 fced 	bl	700020d4 <k_sched_unlock>
	char **argv = prepare_main_args(&argc);
	(void)main(argc, argv);
#else
	extern int main(void);

	(void)main();
700016fa:	f7fe fca3 	bl	70000044 <main>
 * Exceptions raised by this thread may be recoverable.
 * (This is the default tag for a thread.)
 */
static inline void z_thread_essential_clear(struct k_thread *thread)
{
	thread->base.user_options &= ~K_ESSENTIAL;
700016fe:	f644 63b0 	movw	r3, #20144	; 0x4eb0
70001702:	f2c7 0300 	movt	r3, #28672	; 0x7000
70001706:	7b1a      	ldrb	r2, [r3, #12]
70001708:	f022 0201 	bic.w	r2, r2, #1
7000170c:	731a      	strb	r2, [r3, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif /* CONFIG_COVERAGE_DUMP */
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
7000170e:	b007      	add	sp, #28
70001710:	bdf0      	pop	{r4, r5, r6, r7, pc}
70001712:	bf00      	nop

70001714 <z_early_memset>:
	(void) memset(dst, c, n);
70001714:	f001 ba1c 	b.w	70002b50 <memset>

70001718 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
70001718:	f247 7250 	movw	r2, #30544	; 0x7750
7000171c:	f644 1010 	movw	r0, #18704	; 0x4910
70001720:	f2c7 0000 	movt	r0, #28672	; 0x7000
70001724:	2100      	movs	r1, #0
70001726:	f2c7 0200 	movt	r2, #28672	; 0x7000
7000172a:	1a12      	subs	r2, r2, r0
{
7000172c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
7000172e:	f7ff fff1 	bl	70001714 <z_early_memset>
}
70001732:	bd08      	pop	{r3, pc}

70001734 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
70001734:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
70001736:	2000      	movs	r0, #0
{
70001738:	b086      	sub	sp, #24
	z_sys_init_run_level(INIT_LEVEL_EARLY);
7000173a:	f7ff ff57 	bl	700015ec <z_sys_init_run_level>
	return ret;
}

static ALWAYS_INLINE void arch_current_thread_set(struct k_thread *thread)
{
	_current_cpu->current = thread;
7000173e:	f247 7428 	movw	r4, #30504	; 0x7728
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif /* CONFIG_SCHED_CPU_MASK */
	dummy_thread->base.user_options = K_ESSENTIAL;
70001742:	f644 7328 	movw	r3, #20264	; 0x4f28
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif /* CONFIG_USERSPACE */
#if (K_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
70001746:	2500      	movs	r5, #0
	dummy_thread->base.user_options = K_ESSENTIAL;
70001748:	f2c7 0300 	movt	r3, #28672	; 0x7000
7000174c:	f240 1201 	movw	r2, #257	; 0x101
70001750:	f2c7 0400 	movt	r4, #28672	; 0x7000
	dummy_thread->resource_pool = NULL;
70001754:	669d      	str	r5, [r3, #104]	; 0x68
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
70001756:	2701      	movs	r7, #1
	dummy_thread->base.user_options = K_ESSENTIAL;
70001758:	819a      	strh	r2, [r3, #12]
	_kernel.ready_q.cache = &z_main_thread;
7000175a:	f644 66b0 	movw	r6, #20144	; 0x4eb0
7000175e:	60a3      	str	r3, [r4, #8]

#if defined(CONFIG_MULTITHREADING)
	z_dummy_thread_init(&_thread_dummy);
#endif /* CONFIG_MULTITHREADING */
	/* do any necessary initialization of static devices */
	z_device_state_init();
70001760:	f7ff ff10 	bl	70001584 <z_device_state_init>
#endif
#if CONFIG_BOARD_EARLY_INIT_HOOK
	board_early_init_hook();
#endif
	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
70001764:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
70001766:	f2c7 0600 	movt	r6, #28672	; 0x7000
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
7000176a:	f7ff ff3f 	bl	700015ec <z_sys_init_run_level>
#if defined(CONFIG_SMP)
	arch_smp_init();
#endif
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
7000176e:	2002      	movs	r0, #2
70001770:	f7ff ff3c 	bl	700015ec <z_sys_init_run_level>
	z_sched_init();
70001774:	f000 fce8 	bl	70002148 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
70001778:	f644 0394 	movw	r3, #18580	; 0x4894
7000177c:	f24b 3150 	movw	r1, #45904	; 0xb350
70001780:	f2c7 0300 	movt	r3, #28672	; 0x7000
70001784:	f44f 6280 	mov.w	r2, #1024	; 0x400
70001788:	f2c7 0100 	movt	r1, #28672	; 0x7000
7000178c:	9305      	str	r3, [sp, #20]
7000178e:	f241 6341 	movw	r3, #5697	; 0x1641
70001792:	4630      	mov	r0, r6
70001794:	f2c7 0300 	movt	r3, #28672	; 0x7000
70001798:	e9cd 5703 	strd	r5, r7, [sp, #12]
7000179c:	9502      	str	r5, [sp, #8]
7000179e:	e9cd 5500 	strd	r5, r5, [sp]
	_kernel.ready_q.cache = &z_main_thread;
700017a2:	6166      	str	r6, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
700017a4:	f000 f9be 	bl	70001b24 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SLEEPING;
700017a8:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
700017aa:	4630      	mov	r0, r6
700017ac:	f023 0304 	bic.w	r3, r3, #4
700017b0:	7373      	strb	r3, [r6, #13]
700017b2:	f000 fb85 	bl	70001ec0 <z_ready_thread>
	z_setup_new_thread(thread, stack,
700017b6:	230f      	movs	r3, #15
700017b8:	f644 6638 	movw	r6, #20024	; 0x4e38
700017bc:	f24b 2150 	movw	r1, #45648	; 0xb250
700017c0:	f2c7 0600 	movt	r6, #28672	; 0x7000
700017c4:	9303      	str	r3, [sp, #12]
700017c6:	f641 139d 	movw	r3, #6557	; 0x199d
700017ca:	f44f 7280 	mov.w	r2, #256	; 0x100
700017ce:	f2c7 0300 	movt	r3, #28672	; 0x7000
700017d2:	4630      	mov	r0, r6
700017d4:	f2c7 0100 	movt	r1, #28672	; 0x7000
700017d8:	e9cd 7504 	strd	r7, r5, [sp, #16]
700017dc:	e9cd 5501 	strd	r5, r5, [sp, #4]
700017e0:	9400      	str	r4, [sp, #0]
700017e2:	f000 f99f 	bl	70001b24 <z_setup_new_thread>
700017e6:	7b73      	ldrb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
700017e8:	4a09      	ldr	r2, [pc, #36]	; (70001810 <z_cstart+0xdc>)
700017ea:	f023 0304 	bic.w	r3, r3, #4
700017ee:	6062      	str	r2, [r4, #4]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
700017f0:	60e6      	str	r6, [r4, #12]
700017f2:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].id = id;
700017f4:	7425      	strb	r5, [r4, #16]
	__asm__ volatile(
700017f6:	f3ef 8100 	mrs	r1, CPSR
700017fa:	f001 0180 	and.w	r1, r1, #128	; 0x80
700017fe:	b672      	cpsid	i
	struct k_thread *ret = _kernel.cpus[0].current;
70001800:	68a3      	ldr	r3, [r4, #8]

static ALWAYS_INLINE int arch_swap(unsigned int key)
{
	/* store off key and return value */
	arch_current_thread()->arch.basepri = key;
	arch_current_thread()->arch.swap_return_value = -EAGAIN;
70001802:	f06f 020a 	mvn.w	r2, #10
70001806:	e9c3 121b 	strd	r1, r2, [r3, #108]	; 0x6c

	z_arm_cortex_r_svc();
7000180a:	f7ff e98a 	blx	70000b20 <z_arm_cortex_r_svc>
7000180e:	b662      	cpsie	i
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
70001810:	7000b250 	.word	0x7000b250

70001814 <z_init_static>:
	__do_global_ctors_aux();
	__do_init_array_aux();
#elif defined(__CCAC__) /* ARC MWDT */
	__do_global_ctors_aux();
#endif
}
70001814:	4770      	bx	lr
70001816:	bf00      	nop

70001818 <init_mem_slab_obj_core_list>:
#endif /* CONFIG_OBJ_CORE_STATS_MEM_SLAB */
#endif /* CONFIG_OBJ_CORE_MEM_SLAB */

	/* Initialize statically defined mem_slabs */

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
70001818:	f64b 412c 	movw	r1, #48172	; 0xbc2c
7000181c:	f64b 4c2c 	movw	ip, #48172	; 0xbc2c
70001820:	f2c7 0100 	movt	r1, #28672	; 0x7000
70001824:	f2c7 0c00 	movt	ip, #28672	; 0x7000
70001828:	4561      	cmp	r1, ip
7000182a:	d221      	bcs.n	70001870 <init_mem_slab_obj_core_list+0x58>
{
7000182c:	b410      	push	{r4}
	CHECKIF(((slab->info.block_size | (uintptr_t)slab->buffer) &
7000182e:	694c      	ldr	r4, [r1, #20]
70001830:	688b      	ldr	r3, [r1, #8]
70001832:	ea43 0004 	orr.w	r0, r3, r4
70001836:	f010 0003 	ands.w	r0, r0, #3
7000183a:	d116      	bne.n	7000186a <init_mem_slab_obj_core_list+0x52>
	p = slab->buffer + slab->info.block_size * (slab->info.num_blocks - 1);
7000183c:	690a      	ldr	r2, [r1, #16]
	slab->free_list = NULL;
7000183e:	60c8      	str	r0, [r1, #12]
	p = slab->buffer + slab->info.block_size * (slab->info.num_blocks - 1);
70001840:	3a01      	subs	r2, #1
70001842:	fb04 3202 	mla	r2, r4, r2, r3
	while (p >= slab->buffer) {
70001846:	4293      	cmp	r3, r2
70001848:	d901      	bls.n	7000184e <init_mem_slab_obj_core_list+0x36>
7000184a:	e008      	b.n	7000185e <init_mem_slab_obj_core_list+0x46>
		p -= slab->info.block_size;
7000184c:	461a      	mov	r2, r3
		*(char **)p = slab->free_list;
7000184e:	6010      	str	r0, [r2, #0]
		p -= slab->info.block_size;
70001850:	4610      	mov	r0, r2
70001852:	694b      	ldr	r3, [r1, #20]
	while (p >= slab->buffer) {
70001854:	688c      	ldr	r4, [r1, #8]
		p -= slab->info.block_size;
70001856:	1ad3      	subs	r3, r2, r3
	while (p >= slab->buffer) {
70001858:	42a3      	cmp	r3, r4
7000185a:	d2f7      	bcs.n	7000184c <init_mem_slab_obj_core_list+0x34>
7000185c:	60ca      	str	r2, [r1, #12]
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
7000185e:	311c      	adds	r1, #28
70001860:	4561      	cmp	r1, ip
70001862:	d3e4      	bcc.n	7000182e <init_mem_slab_obj_core_list+0x16>
70001864:	2000      	movs	r0, #0
#endif /* CONFIG_OBJ_CORE_MEM_SLAB */
	}

out:
	return rc;
}
70001866:	bc10      	pop	{r4}
70001868:	4770      	bx	lr
7000186a:	f06f 0015 	mvn.w	r0, #21
	return rc;
7000186e:	e7fa      	b.n	70001866 <init_mem_slab_obj_core_list+0x4e>
70001870:	2000      	movs	r0, #0
}
70001872:	4770      	bx	lr

70001874 <k_mem_slab_init>:
SYS_INIT(init_mem_slab_obj_core_list, PRE_KERNEL_1,
	 CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

int k_mem_slab_init(struct k_mem_slab *slab, void *buffer,
		    size_t block_size, uint32_t num_blocks)
{
70001874:	b410      	push	{r4}
70001876:	460c      	mov	r4, r1
	int rc;

	slab->info.num_blocks = num_blocks;
	slab->info.block_size = block_size;
	slab->buffer = buffer;
	slab->info.num_used = 0U;
70001878:	2100      	movs	r1, #0
	slab->info.block_size = block_size;
7000187a:	e9c0 3204 	strd	r3, r2, [r0, #16]
{
7000187e:	4684      	mov	ip, r0
	slab->info.num_used = 0U;
70001880:	6181      	str	r1, [r0, #24]
	slab->buffer = buffer;
70001882:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->info.block_size | (uintptr_t)slab->buffer) &
70001884:	ea44 0002 	orr.w	r0, r4, r2
70001888:	f010 0103 	ands.w	r1, r0, #3
7000188c:	d11a      	bne.n	700018c4 <k_mem_slab_init+0x50>
	slab->free_list = NULL;
7000188e:	f8cc 100c 	str.w	r1, [ip, #12]
	p = slab->buffer + slab->info.block_size * (slab->info.num_blocks - 1);
70001892:	3b01      	subs	r3, #1
70001894:	fb02 4303 	mla	r3, r2, r3, r4
	while (p >= slab->buffer) {
70001898:	429c      	cmp	r4, r3
7000189a:	d901      	bls.n	700018a0 <k_mem_slab_init+0x2c>
7000189c:	e00b      	b.n	700018b6 <k_mem_slab_init+0x42>
		p -= slab->info.block_size;
7000189e:	4613      	mov	r3, r2
		*(char **)p = slab->free_list;
700018a0:	6019      	str	r1, [r3, #0]
		p -= slab->info.block_size;
700018a2:	4619      	mov	r1, r3
700018a4:	f8dc 2014 	ldr.w	r2, [ip, #20]
	while (p >= slab->buffer) {
700018a8:	f8dc 0008 	ldr.w	r0, [ip, #8]
		p -= slab->info.block_size;
700018ac:	1a9a      	subs	r2, r3, r2
	while (p >= slab->buffer) {
700018ae:	4282      	cmp	r2, r0
700018b0:	d2f5      	bcs.n	7000189e <k_mem_slab_init+0x2a>
700018b2:	f8cc 300c 	str.w	r3, [ip, #12]
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
700018b6:	f8cc c000 	str.w	ip, [ip]
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
}
700018ba:	2000      	movs	r0, #0
700018bc:	f8cc c004 	str.w	ip, [ip, #4]
	k_object_init(slab);
out:
	SYS_PORT_TRACING_OBJ_INIT(k_mem_slab, slab, rc);

	return rc;
}
700018c0:	bc10      	pop	{r4}
700018c2:	4770      	bx	lr
		return -EINVAL;
700018c4:	f06f 0015 	mvn.w	r0, #21
	return rc;
700018c8:	e7fa      	b.n	700018c0 <k_mem_slab_init+0x4c>
700018ca:	bf00      	nop

700018cc <k_mem_slab_alloc>:
	       (offset < (slab->info.block_size * slab->info.num_blocks)) &&
	       ((offset % slab->info.block_size) == 0);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
700018cc:	b530      	push	{r4, r5, lr}
700018ce:	4684      	mov	ip, r0
700018d0:	b083      	sub	sp, #12
700018d2:	460d      	mov	r5, r1
700018d4:	f3ef 8100 	mrs	r1, CPSR
700018d8:	f001 0180 	and.w	r1, r1, #128	; 0x80
700018dc:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
700018de:	68c4      	ldr	r4, [r0, #12]
700018e0:	b164      	cbz	r4, 700018fc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
700018e2:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
		slab->info.num_used++;
700018e4:	6983      	ldr	r3, [r0, #24]
#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->info.max_used = MAX(slab->info.num_used,
					  slab->info.max_used);
#endif /* CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION */

		result = 0;
700018e6:	2000      	movs	r0, #0
		slab->free_list = *(char **)(slab->free_list);
700018e8:	6822      	ldr	r2, [r4, #0]
700018ea:	f8cc 200c 	str.w	r2, [ip, #12]
		slab->info.num_used++;
700018ee:	3301      	adds	r3, #1
700018f0:	f8cc 3018 	str.w	r3, [ip, #24]
	if (key != 0U) {
700018f4:	b901      	cbnz	r1, 700018f8 <k_mem_slab_alloc+0x2c>
700018f6:	b662      	cpsie	i
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
700018f8:	b003      	add	sp, #12
700018fa:	bd30      	pop	{r4, r5, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
700018fc:	ea52 0003 	orrs.w	r0, r2, r3
70001900:	d103      	bne.n	7000190a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
70001902:	602c      	str	r4, [r5, #0]
		result = -ENOMEM;
70001904:	f06f 000b 	mvn.w	r0, #11
70001908:	e7f4      	b.n	700018f4 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
7000190a:	9200      	str	r2, [sp, #0]
7000190c:	f10c 0008 	add.w	r0, ip, #8
70001910:	9301      	str	r3, [sp, #4]
70001912:	4662      	mov	r2, ip
70001914:	f000 fb64 	bl	70001fe0 <z_pend_curr>
		if (result == 0) {
70001918:	2800      	cmp	r0, #0
7000191a:	d1ed      	bne.n	700018f8 <k_mem_slab_alloc+0x2c>
7000191c:	f247 7328 	movw	r3, #30504	; 0x7728
70001920:	f2c7 0300 	movt	r3, #28672	; 0x7000
			*mem = arch_current_thread()->base.swap_data;
70001924:	689b      	ldr	r3, [r3, #8]
70001926:	695b      	ldr	r3, [r3, #20]
70001928:	602b      	str	r3, [r5, #0]
7000192a:	e7e5      	b.n	700018f8 <k_mem_slab_alloc+0x2c>

7000192c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void *mem)
{
7000192c:	b5f0      	push	{r4, r5, r6, r7, lr}
7000192e:	4604      	mov	r4, r0
70001930:	b083      	sub	sp, #12
	__asm__ volatile(
70001932:	f3ef 8600 	mrs	r6, CPSR
70001936:	f006 0680 	and.w	r6, r6, #128	; 0x80
7000193a:	b672      	cpsid	i
	}

	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (unlikely(slab->free_list == NULL) && IS_ENABLED(CONFIG_MULTITHREADING)) {
7000193c:	68c5      	ldr	r5, [r0, #12]
7000193e:	b145      	cbz	r5, 70001952 <k_mem_slab_free+0x26>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	*(char **) mem = slab->free_list;
70001940:	600d      	str	r5, [r1, #0]
	slab->free_list = (char *) mem;
	slab->info.num_used--;
70001942:	69a3      	ldr	r3, [r4, #24]
	slab->free_list = (char *) mem;
70001944:	60e1      	str	r1, [r4, #12]
	slab->info.num_used--;
70001946:	3b01      	subs	r3, #1
70001948:	61a3      	str	r3, [r4, #24]
	if (key != 0U) {
7000194a:	b906      	cbnz	r6, 7000194e <k_mem_slab_free+0x22>
7000194c:	b662      	cpsie	i

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
7000194e:	b003      	add	sp, #12
70001950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
70001952:	6807      	ldr	r7, [r0, #0]
	__ASSERT_EVAL(, int key = arch_irq_lock(); arch_irq_unlock(key),
		      !arch_irq_unlocked(key), "");

	LOCK_SCHED_SPINLOCK {
		thread = _priq_wait_best(&wait_q->waitq);
		if (unlikely(thread != NULL)) {
70001954:	42b8      	cmp	r0, r7
70001956:	bf18      	it	ne
70001958:	2f00      	cmpne	r7, #0
7000195a:	d0f1      	beq.n	70001940 <k_mem_slab_free+0x14>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
7000195c:	e9d7 3200 	ldrd	r3, r2, [r7]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
70001960:	f107 0018 	add.w	r0, r7, #24

	prev->next = next;
70001964:	6013      	str	r3, [r2, #0]
	next->prev = prev;
70001966:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
70001968:	7b7b      	ldrb	r3, [r7, #13]
	node->next = NULL;
7000196a:	2200      	movs	r2, #0
7000196c:	f023 0302 	bic.w	r3, r3, #2
	thread->base.pended_on = NULL;
70001970:	60bd      	str	r5, [r7, #8]
70001972:	737b      	strb	r3, [r7, #13]
70001974:	2300      	movs	r3, #0
70001976:	9101      	str	r1, [sp, #4]
70001978:	e9c7 2300 	strd	r2, r3, [r7]
7000197c:	f000 fdae 	bl	700024dc <z_abort_timeout>
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
70001980:	9901      	ldr	r1, [sp, #4]
70001982:	6179      	str	r1, [r7, #20]
			z_ready_thread(pending_thread);
70001984:	4638      	mov	r0, r7
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
70001986:	673d      	str	r5, [r7, #112]	; 0x70
70001988:	f000 fa9a 	bl	70001ec0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
7000198c:	4631      	mov	r1, r6
7000198e:	f104 0008 	add.w	r0, r4, #8
}
70001992:	b003      	add	sp, #12
70001994:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
70001998:	f000 bb56 	b.w	70002048 <z_reschedule>

7000199c <idle>:
#include <wait_q.h>

LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

void idle(void *unused1, void *unused2, void *unused3)
{
7000199c:	b508      	push	{r3, lr}
	__asm__ volatile(
7000199e:	f3ef 8300 	mrs	r3, CPSR
700019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
700019a6:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
700019a8:	f7fe ef9c 	blx	700008e4 <arch_cpu_idle>
700019ac:	e7f7      	b.n	7000199e <idle+0x2>
700019ae:	bf00      	nop

700019b0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
700019b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
700019b4:	4604      	mov	r4, r0
700019b6:	b082      	sub	sp, #8
700019b8:	460d      	mov	r5, r1
700019ba:	4616      	mov	r6, r2

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
700019bc:	f100 0708 	add.w	r7, r0, #8
700019c0:	f3ef 8800 	mrs	r8, CPSR
700019c4:	f008 0880 	and.w	r8, r8, #128	; 0x80
700019c8:	b672      	cpsid	i

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
700019ca:	6a02      	ldr	r2, [r0, #32]
700019cc:	68c0      	ldr	r0, [r0, #12]
700019ce:	4282      	cmp	r2, r0
700019d0:	d224      	bcs.n	70001a1c <z_impl_k_msgq_put+0x6c>
	return list->head == list;
700019d2:	f8d4 9000 	ldr.w	r9, [r4]
		if (unlikely(thread != NULL)) {
700019d6:	f1b9 0f00 	cmp.w	r9, #0
700019da:	bf18      	it	ne
700019dc:	454c      	cmpne	r4, r9
700019de:	d135      	bne.n	70001a4c <z_impl_k_msgq_put+0x9c>
			return 0;
		} else {
			/* put message in queue */
			__ASSERT_NO_MSG(msgq->write_ptr >= msgq->buffer_start &&
					msgq->write_ptr < msgq->buffer_end);
			(void)memcpy(msgq->write_ptr, (char *)data, msgq->msg_size);
700019e0:	68a2      	ldr	r2, [r4, #8]
			msgq->used_msgs++;
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
700019e2:	2600      	movs	r6, #0
			(void)memcpy(msgq->write_ptr, (char *)data, msgq->msg_size);
700019e4:	69e0      	ldr	r0, [r4, #28]
700019e6:	f001 f84b 	bl	70002a80 <memcpy>
			msgq->write_ptr += msgq->msg_size;
700019ea:	69e3      	ldr	r3, [r4, #28]
700019ec:	68a2      	ldr	r2, [r4, #8]
	z_handle_obj_poll_events(&msgq->poll_events, state);
700019ee:	2110      	movs	r1, #16
700019f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->write_ptr += msgq->msg_size;
700019f4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
700019f6:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
700019f8:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
700019fa:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
700019fc:	bf04      	itt	eq
700019fe:	6923      	ldreq	r3, [r4, #16]
70001a00:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
70001a02:	6a23      	ldr	r3, [r4, #32]
70001a04:	3301      	adds	r3, #1
70001a06:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
70001a08:	f000 fe92 	bl	70002730 <z_handle_obj_poll_events>
		return result;
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	z_reschedule(&msgq->lock, key);
70001a0c:	4641      	mov	r1, r8
70001a0e:	4638      	mov	r0, r7
70001a10:	f000 fb1a 	bl	70002048 <z_reschedule>

	return result;
}
70001a14:	4630      	mov	r0, r6
70001a16:	b002      	add	sp, #8
70001a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
70001a1c:	ea56 0203 	orrs.w	r2, r6, r3
		result = -ENOMSG;
70001a20:	bf08      	it	eq
70001a22:	f06f 0622 	mvneq.w	r6, #34	; 0x22
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
70001a26:	d0f1      	beq.n	70001a0c <z_impl_k_msgq_put+0x5c>
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
70001a28:	4622      	mov	r2, r4
70001a2a:	f247 7428 	movw	r4, #30504	; 0x7728
70001a2e:	4641      	mov	r1, r8
70001a30:	f2c7 0400 	movt	r4, #28672	; 0x7000
70001a34:	4638      	mov	r0, r7
		arch_current_thread()->base.swap_data = (void *) data;
70001a36:	68a4      	ldr	r4, [r4, #8]
70001a38:	6165      	str	r5, [r4, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
70001a3a:	e9cd 6300 	strd	r6, r3, [sp]
70001a3e:	f000 facf 	bl	70001fe0 <z_pend_curr>
70001a42:	4606      	mov	r6, r0
}
70001a44:	4630      	mov	r0, r6
70001a46:	b002      	add	sp, #8
70001a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	sys_dnode_t *const next = node->next;
70001a4c:	e9d9 3200 	ldrd	r3, r2, [r9]
	thread->base.pended_on = NULL;
70001a50:	f04f 0a00 	mov.w	sl, #0
	prev->next = next;
70001a54:	6013      	str	r3, [r2, #0]
70001a56:	f109 0018 	add.w	r0, r9, #24
	next->prev = prev;
70001a5a:	605a      	str	r2, [r3, #4]
70001a5c:	f899 300d 	ldrb.w	r3, [r9, #13]
	node->next = NULL;
70001a60:	2200      	movs	r2, #0
70001a62:	f023 0302 	bic.w	r3, r3, #2
70001a66:	f8c9 a008 	str.w	sl, [r9, #8]
			return 0;
70001a6a:	4656      	mov	r6, sl
70001a6c:	f889 300d 	strb.w	r3, [r9, #13]
70001a70:	2300      	movs	r3, #0
70001a72:	e9c9 2300 	strd	r2, r3, [r9]
70001a76:	f000 fd31 	bl	700024dc <z_abort_timeout>
			(void)memcpy(pending_thread->base.swap_data, data,
70001a7a:	68a2      	ldr	r2, [r4, #8]
70001a7c:	f8d9 0014 	ldr.w	r0, [r9, #20]
70001a80:	4629      	mov	r1, r5
70001a82:	f000 fffd 	bl	70002a80 <memcpy>
70001a86:	f8c9 a070 	str.w	sl, [r9, #112]	; 0x70
			z_ready_thread(pending_thread);
70001a8a:	4648      	mov	r0, r9
70001a8c:	f000 fa18 	bl	70001ec0 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
70001a90:	4641      	mov	r1, r8
70001a92:	4638      	mov	r0, r7
70001a94:	f000 fad8 	bl	70002048 <z_reschedule>
			return 0;
70001a98:	e7bc      	b.n	70001a14 <z_impl_k_msgq_put+0x64>
70001a9a:	bf00      	nop

70001a9c <z_impl_k_sem_give>:
	return false;
#endif /* CONFIG_POLL */
}

void z_impl_k_sem_give(struct k_sem *sem)
{
70001a9c:	b570      	push	{r4, r5, r6, lr}
70001a9e:	f3ef 8500 	mrs	r5, CPSR
70001aa2:	f005 0580 	and.w	r5, r5, #128	; 0x80
70001aa6:	b672      	cpsid	i
	return list->head == list;
70001aa8:	6804      	ldr	r4, [r0, #0]
		if (unlikely(thread != NULL)) {
70001aaa:	2c00      	cmp	r4, #0
70001aac:	bf18      	it	ne
70001aae:	42a0      	cmpne	r0, r4
70001ab0:	d113      	bne.n	70001ada <z_impl_k_sem_give+0x3e>

	if (unlikely(thread != NULL)) {
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
70001ab2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
70001ab6:	2102      	movs	r1, #2
70001ab8:	3010      	adds	r0, #16
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
70001aba:	429a      	cmp	r2, r3
70001abc:	bf18      	it	ne
70001abe:	3301      	addne	r3, #1
70001ac0:	f840 3c08 	str.w	r3, [r0, #-8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
70001ac4:	f000 fe34 	bl	70002730 <z_handle_obj_poll_events>
		resched = handle_poll_events(sem);
	}

	if (unlikely(resched)) {
		z_reschedule(&lock, key);
70001ac8:	f247 7048 	movw	r0, #30536	; 0x7748
70001acc:	4629      	mov	r1, r5
70001ace:	f2c7 0000 	movt	r0, #28672	; 0x7000
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
70001ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
70001ad6:	f000 bab7 	b.w	70002048 <z_reschedule>
	sys_dnode_t *const next = node->next;
70001ada:	e9d4 3200 	ldrd	r3, r2, [r4]
	thread->base.pended_on = NULL;
70001ade:	2600      	movs	r6, #0
	prev->next = next;
70001ae0:	6013      	str	r3, [r2, #0]
	node->next = NULL;
70001ae2:	2100      	movs	r1, #0
	next->prev = prev;
70001ae4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
70001ae6:	2000      	movs	r0, #0
70001ae8:	7b63      	ldrb	r3, [r4, #13]
70001aea:	60a6      	str	r6, [r4, #8]
70001aec:	e9c4 0100 	strd	r0, r1, [r4]
70001af0:	f023 0302 	bic.w	r3, r3, #2
70001af4:	f104 0018 	add.w	r0, r4, #24
70001af8:	7363      	strb	r3, [r4, #13]
70001afa:	f000 fcef 	bl	700024dc <z_abort_timeout>
70001afe:	6726      	str	r6, [r4, #112]	; 0x70
		z_ready_thread(thread);
70001b00:	4620      	mov	r0, r4
70001b02:	f000 f9dd 	bl	70001ec0 <z_ready_thread>
70001b06:	e7df      	b.n	70001ac8 <z_impl_k_sem_give+0x2c>

70001b08 <k_is_in_isr>:
70001b08:	ee1d 3f70 	mrc	15, 0, r3, cr13, cr0, {3}
#include <zephyr/arch/arm/cortex_a_r/lib_helpers.h>
#include <zephyr/arch/arm/cortex_a_r/tpidruro.h>

static ALWAYS_INLINE _cpu_t *arch_curr_cpu(void)
{
	return (_cpu_t *)(read_tpidruro() & TPIDRURO_CURR_CPU);
70001b0c:	f023 0303 	bic.w	r3, r3, #3
#endif

/* Check the CPSR mode bits to see if we are in IRQ or FIQ mode */
static ALWAYS_INLINE bool arch_is_in_isr(void)
{
	return (arch_curr_cpu()->nested != 0U);
70001b10:	6818      	ldr	r0, [r3, #0]
	STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
70001b12:	3800      	subs	r0, #0
70001b14:	bf18      	it	ne
70001b16:	2001      	movne	r0, #1
70001b18:	4770      	bx	lr
70001b1a:	bf00      	nop

70001b1c <z_impl_k_thread_name_set>:

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
70001b1c:	f06f 0057 	mvn.w	r0, #87	; 0x57
70001b20:	4770      	bx	lr
70001b22:	bf00      	nop

70001b24 <z_setup_new_thread>:
		stack_buf_size = stack_obj_size - K_THREAD_STACK_RESERVED;
	} else
#endif /* CONFIG_USERSPACE */
	{
		/* Object cannot host a user mode thread */
		stack_obj_size = K_KERNEL_STACK_LEN(stack_size);
70001b24:	3207      	adds	r2, #7
70001b26:	f022 0207 	bic.w	r2, r2, #7
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
70001b2a:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	stack_ptr = (char *)stack + stack_obj_size;
70001b2e:	188d      	adds	r5, r1, r2
	sys_dlist_init(&w->waitq);
70001b30:	f100 0258 	add.w	r2, r0, #88	; 0x58

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
70001b34:	2600      	movs	r6, #0
{
70001b36:	b084      	sub	sp, #16
	list->head = (sys_dnode_t *)list;
70001b38:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;
70001b3c:	2204      	movs	r2, #4
	thread_base->pended_on = NULL;
70001b3e:	6086      	str	r6, [r0, #8]
	node->next = NULL;
70001b40:	f04f 0800 	mov.w	r8, #0
	thread_base->thread_state = (uint8_t)initial_state;
70001b44:	7342      	strb	r2, [r0, #13]
70001b46:	f04f 0900 	mov.w	r9, #0
{
70001b4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
70001b4c:	4604      	mov	r4, r0

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
70001b4e:	73c6      	strb	r6, [r0, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
70001b50:	9200      	str	r2, [sp, #0]
{
70001b52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
70001b54:	9201      	str	r2, [sp, #4]
{
70001b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
70001b58:	9202      	str	r2, [sp, #8]
{
70001b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	thread_base->prio = priority;
70001b5c:	7382      	strb	r2, [r0, #14]
{
70001b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	thread_base->user_options = (uint8_t)options;
70001b60:	7302      	strb	r2, [r0, #12]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
70001b62:	462a      	mov	r2, r5
70001b64:	e9c0 8906 	strd	r8, r9, [r0, #24]
70001b68:	f7fe fe9e 	bl	700008a8 <arch_new_thread>
70001b6c:	f247 7328 	movw	r3, #30504	; 0x7728
	new_thread->init_data = NULL;
70001b70:	6566      	str	r6, [r4, #84]	; 0x54
70001b72:	f2c7 0300 	movt	r3, #28672	; 0x7000
}
70001b76:	4628      	mov	r0, r5
	new_thread->resource_pool = arch_current_thread()->resource_pool;
70001b78:	689b      	ldr	r3, [r3, #8]
70001b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
70001b7c:	66a3      	str	r3, [r4, #104]	; 0x68
}
70001b7e:	b004      	add	sp, #16
70001b80:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

70001b84 <z_impl_k_thread_create>:
{
70001b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
70001b88:	f100 0658 	add.w	r6, r0, #88	; 0x58
	thread_base->pended_on = NULL;
70001b8c:	2500      	movs	r5, #0
{
70001b8e:	b085      	sub	sp, #20
	list->head = (sys_dnode_t *)list;
70001b90:	e9c0 6616 	strd	r6, r6, [r0, #88]	; 0x58
	thread_base->thread_state = (uint8_t)initial_state;
70001b94:	2604      	movs	r6, #4
	thread_base->pended_on = NULL;
70001b96:	6085      	str	r5, [r0, #8]
		stack_obj_size = K_KERNEL_STACK_LEN(stack_size);
70001b98:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
70001b9a:	7346      	strb	r6, [r0, #13]
	node->next = NULL;
70001b9c:	f04f 0800 	mov.w	r8, #0
{
70001ba0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
70001ba2:	f04f 0900 	mov.w	r9, #0
	thread_base->sched_locked = 0U;
70001ba6:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = K_KERNEL_STACK_LEN(stack_size);
70001ba8:	f022 0207 	bic.w	r2, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
70001bac:	9600      	str	r6, [sp, #0]
70001bae:	440a      	add	r2, r1
{
70001bb0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
70001bb2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
70001bb4:	9601      	str	r6, [sp, #4]
{
70001bb6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
70001bb8:	9602      	str	r6, [sp, #8]
{
70001bba:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	thread_base->prio = priority;
70001bbc:	7386      	strb	r6, [r0, #14]
{
70001bbe:	9e10      	ldr	r6, [sp, #64]	; 0x40
	thread_base->user_options = (uint8_t)options;
70001bc0:	7306      	strb	r6, [r0, #12]
70001bc2:	e9c0 8906 	strd	r8, r9, [r0, #24]
{
70001bc6:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
70001bca:	f7fe fe6d 	bl	700008a8 <arch_new_thread>
	new_thread->init_data = NULL;
70001bce:	6565      	str	r5, [r4, #84]	; 0x54
70001bd0:	f247 7328 	movw	r3, #30504	; 0x7728
70001bd4:	f2c7 0300 	movt	r3, #28672	; 0x7000
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
70001bd8:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
70001bdc:	bf08      	it	eq
70001bde:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
	new_thread->resource_pool = arch_current_thread()->resource_pool;
70001be2:	689b      	ldr	r3, [r3, #8]
70001be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
70001be6:	66a3      	str	r3, [r4, #104]	; 0x68
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
70001be8:	d103      	bne.n	70001bf2 <z_impl_k_thread_create+0x6e>
}
70001bea:	4620      	mov	r0, r4
70001bec:	b005      	add	sp, #20
70001bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
70001bf2:	ea56 0307 	orrs.w	r3, r6, r7
70001bf6:	d106      	bne.n	70001c06 <z_impl_k_thread_create+0x82>
70001bf8:	4620      	mov	r0, r4
70001bfa:	f000 fb53 	bl	700022a4 <z_impl_k_wakeup>
70001bfe:	4620      	mov	r0, r4
70001c00:	b005      	add	sp, #20
70001c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
70001c06:	f641 71d9 	movw	r1, #8153	; 0x1fd9
70001c0a:	f104 0018 	add.w	r0, r4, #24
70001c0e:	463a      	mov	r2, r7
70001c10:	4633      	mov	r3, r6
70001c12:	f2c7 0100 	movt	r1, #28672	; 0x7000
70001c16:	f000 fbcf 	bl	700023b8 <z_add_timeout>
70001c1a:	4620      	mov	r0, r4
70001c1c:	b005      	add	sp, #20
70001c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
70001c22:	bf00      	nop

70001c24 <unready_thread>:
}
#include <zephyr/syscalls/k_thread_resume_mrsh.c>
#endif /* CONFIG_USERSPACE */

static void unready_thread(struct k_thread *thread)
{
70001c24:	b410      	push	{r4}
	return (thread->base.thread_state & state) != 0U;
70001c26:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
70001c28:	061c      	lsls	r4, r3, #24
70001c2a:	d509      	bpl.n	70001c40 <unready_thread+0x1c>
70001c2c:	2200      	movs	r2, #0
	thread->base.thread_state &= ~_THREAD_QUEUED;
70001c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dnode_t *const next = node->next;
70001c32:	e9d0 1400 	ldrd	r1, r4, [r0]
70001c36:	7343      	strb	r3, [r0, #13]
	prev->next = next;
70001c38:	6021      	str	r1, [r4, #0]
	next->prev = prev;
70001c3a:	604c      	str	r4, [r1, #4]
	node->next = NULL;
70001c3c:	6002      	str	r2, [r0, #0]
70001c3e:	6042      	str	r2, [r0, #4]
70001c40:	f247 7328 	movw	r3, #30504	; 0x7728
70001c44:	f2c7 0300 	movt	r3, #28672	; 0x7000
	return list->head == list;
70001c48:	4619      	mov	r1, r3
70001c4a:	689c      	ldr	r4, [r3, #8]
70001c4c:	f851 2f18 	ldr.w	r2, [r1, #24]!
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
70001c50:	428a      	cmp	r2, r1
70001c52:	bf18      	it	ne
70001c54:	2a00      	cmpne	r2, #0
70001c56:	bf08      	it	eq
70001c58:	68da      	ldreq	r2, [r3, #12]
					 int preempt_ok)
{
	/* Preemption is OK if it's being explicitly allowed by
	 * software state (e.g. the thread called k_yield())
	 */
	if (preempt_ok != 0) {
70001c5a:	42a0      	cmp	r0, r4
70001c5c:	d006      	beq.n	70001c6c <unready_thread+0x48>
	}

	__ASSERT(arch_current_thread() != NULL, "");

	/* Or if we're pended/suspended/dummy (duh) */
	if (z_is_thread_prevented_from_running(arch_current_thread())) {
70001c5e:	7b61      	ldrb	r1, [r4, #13]
70001c60:	06c9      	lsls	r1, r1, #27
70001c62:	d103      	bne.n	70001c6c <unready_thread+0x48>
	}

	/* Otherwise we have to be running a preemptible thread or
	 * switching to a metairq
	 */
	if (thread_is_preemptible(arch_current_thread()) || thread_is_metairq(thread)) {
70001c64:	89e1      	ldrh	r1, [r4, #14]
		_kernel.ready_q.cache = arch_current_thread();
70001c66:	297f      	cmp	r1, #127	; 0x7f
70001c68:	bf88      	it	hi
70001c6a:	4622      	movhi	r2, r4
70001c6c:	615a      	str	r2, [r3, #20]
		dequeue_thread(thread);
	}
	update_cache(thread == arch_current_thread());
}
70001c6e:	bc10      	pop	{r4}
70001c70:	4770      	bx	lr
70001c72:	bf00      	nop

70001c74 <add_to_waitq_locked>:

/* _sched_spinlock must be held */
static void add_to_waitq_locked(struct k_thread *thread, _wait_q_t *wait_q)
{
70001c74:	b538      	push	{r3, r4, r5, lr}
70001c76:	460d      	mov	r5, r1
	unready_thread(thread);
70001c78:	f7ff ffd4 	bl	70001c24 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
70001c7c:	7b43      	ldrb	r3, [r0, #13]
70001c7e:	f043 0302 	orr.w	r3, r3, #2
70001c82:	7343      	strb	r3, [r0, #13]
	z_mark_thread_as_pending(thread);

	SYS_PORT_TRACING_FUNC(k_thread, sched_pend, thread);

	if (wait_q != NULL) {
70001c84:	b1bd      	cbz	r5, 70001cb6 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
70001c86:	6085      	str	r5, [r0, #8]
70001c88:	4604      	mov	r4, r0
70001c8a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
70001c8c:	429d      	cmp	r5, r3
70001c8e:	d00d      	beq.n	70001cac <add_to_waitq_locked+0x38>
static ALWAYS_INLINE void z_priq_dumb_add(sys_dlist_t *pq,
					  struct k_thread *thread)
{
	struct k_thread *t;

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
70001c90:	b163      	cbz	r3, 70001cac <add_to_waitq_locked+0x38>
	int32_t b2 = thread_2->base.prio;
70001c92:	f993 c00e 	ldrsb.w	ip, [r3, #14]
	int32_t b1 = thread_1->base.prio;
70001c96:	f994 200e 	ldrsb.w	r2, [r4, #14]
	if (b1 != b2) {
70001c9a:	4562      	cmp	r2, ip
70001c9c:	d001      	beq.n	70001ca2 <add_to_waitq_locked+0x2e>
		if (z_sched_prio_cmp(thread, t) > 0) {
70001c9e:	4594      	cmp	ip, r2
70001ca0:	dc0a      	bgt.n	70001cb8 <add_to_waitq_locked+0x44>
	return (node == list->tail) ? NULL : node->next;
70001ca2:	686a      	ldr	r2, [r5, #4]
70001ca4:	4293      	cmp	r3, r2
70001ca6:	d002      	beq.n	70001cae <add_to_waitq_locked+0x3a>
70001ca8:	681b      	ldr	r3, [r3, #0]
70001caa:	e7f1      	b.n	70001c90 <add_to_waitq_locked+0x1c>
70001cac:	686a      	ldr	r2, [r5, #4]
	node->prev = tail;
70001cae:	e9c4 5200 	strd	r5, r2, [r4]
	tail->next = node;
70001cb2:	6014      	str	r4, [r2, #0]
	list->tail = node;
70001cb4:	606c      	str	r4, [r5, #4]
		_priq_wait_add(&wait_q->waitq, thread);
	}
}
70001cb6:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
70001cb8:	685a      	ldr	r2, [r3, #4]
	node->prev = prev;
70001cba:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
70001cbe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
70001cc0:	605c      	str	r4, [r3, #4]
70001cc2:	bd38      	pop	{r3, r4, r5, pc}

70001cc4 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
70001cc4:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
70001cc6:	0619      	lsls	r1, r3, #24
70001cc8:	d403      	bmi.n	70001cd2 <ready_thread+0xe>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
70001cca:	06da      	lsls	r2, r3, #27
70001ccc:	d101      	bne.n	70001cd2 <ready_thread+0xe>
	return node->next != NULL;
70001cce:	6982      	ldr	r2, [r0, #24]
70001cd0:	b102      	cbz	r2, 70001cd4 <ready_thread+0x10>
70001cd2:	4770      	bx	lr
	return list->head == list;
70001cd4:	f247 7c28 	movw	ip, #30504	; 0x7728
	thread->base.thread_state |= _THREAD_QUEUED;
70001cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
70001cdc:	f2c7 0c00 	movt	ip, #28672	; 0x7000
{
70001ce0:	b430      	push	{r4, r5}
	thread->base.thread_state |= _THREAD_QUEUED;
70001ce2:	7343      	strb	r3, [r0, #13]
70001ce4:	4665      	mov	r5, ip
	return (node == list->tail) ? NULL : node->next;
70001ce6:	f8dc 401c 	ldr.w	r4, [ip, #28]
	return list->head == list;
70001cea:	f855 3f18 	ldr.w	r3, [r5, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
70001cee:	42ab      	cmp	r3, r5
70001cf0:	bf08      	it	eq
70001cf2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
70001cf4:	b15b      	cbz	r3, 70001d0e <ready_thread+0x4a>
	int32_t b2 = thread_2->base.prio;
70001cf6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	int32_t b1 = thread_1->base.prio;
70001cfa:	f990 200e 	ldrsb.w	r2, [r0, #14]
	if (b1 != b2) {
70001cfe:	428a      	cmp	r2, r1
70001d00:	d001      	beq.n	70001d06 <ready_thread+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
70001d02:	4291      	cmp	r1, r2
70001d04:	dc20      	bgt.n	70001d48 <ready_thread+0x84>
	return (node == list->tail) ? NULL : node->next;
70001d06:	42a3      	cmp	r3, r4
70001d08:	d001      	beq.n	70001d0e <ready_thread+0x4a>
70001d0a:	681b      	ldr	r3, [r3, #0]
70001d0c:	e7f2      	b.n	70001cf4 <ready_thread+0x30>
	node->prev = tail;
70001d0e:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
70001d12:	6020      	str	r0, [r4, #0]
	list->tail = node;
70001d14:	f8cc 001c 	str.w	r0, [ip, #28]
	return list->head == list;
70001d18:	f8dc 3018 	ldr.w	r3, [ip, #24]
70001d1c:	f8dc 2008 	ldr.w	r2, [ip, #8]
	if (z_is_thread_prevented_from_running(arch_current_thread())) {
70001d20:	7b51      	ldrb	r1, [r2, #13]
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
70001d22:	2b00      	cmp	r3, #0
70001d24:	bf18      	it	ne
70001d26:	42ab      	cmpne	r3, r5
70001d28:	bf08      	it	eq
70001d2a:	f8dc 300c 	ldreq.w	r3, [ip, #12]
70001d2e:	06c9      	lsls	r1, r1, #27
70001d30:	d107      	bne.n	70001d42 <ready_thread+0x7e>
	if (thread_is_preemptible(arch_current_thread()) || thread_is_metairq(thread)) {
70001d32:	89d1      	ldrh	r1, [r2, #14]
70001d34:	297f      	cmp	r1, #127	; 0x7f
		_kernel.ready_q.cache = arch_current_thread();
70001d36:	bf88      	it	hi
70001d38:	f8cc 2014 	strhi.w	r2, [ip, #20]
70001d3c:	d901      	bls.n	70001d42 <ready_thread+0x7e>
}
70001d3e:	bc30      	pop	{r4, r5}
70001d40:	4770      	bx	lr
		_kernel.ready_q.cache = thread;
70001d42:	f8cc 3014 	str.w	r3, [ip, #20]
}
70001d46:	e7fa      	b.n	70001d3e <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
70001d48:	685a      	ldr	r2, [r3, #4]
	node->prev = prev;
70001d4a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
70001d4e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
70001d50:	6058      	str	r0, [r3, #4]
}
70001d52:	e7e1      	b.n	70001d18 <ready_thread+0x54>

70001d54 <z_thread_halt>:
		halt_thread(thread, terminate ? _THREAD_DEAD : _THREAD_SUSPENDED);
70001d54:	2a00      	cmp	r2, #0
70001d56:	bf0c      	ite	eq
70001d58:	2210      	moveq	r2, #16
70001d5a:	2208      	movne	r2, #8
{
70001d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool dummify = false;

	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & new_state) == 0U) {
70001d60:	7b43      	ldrb	r3, [r0, #13]
{
70001d62:	460f      	mov	r7, r1
	if ((thread->base.thread_state & new_state) == 0U) {
70001d64:	ea12 0103 	ands.w	r1, r2, r3
70001d68:	bf18      	it	ne
70001d6a:	f247 7328 	movwne	r3, #30504	; 0x7728
{
70001d6e:	4605      	mov	r5, r0
70001d70:	bf18      	it	ne
70001d72:	f2c7 0300 	movtne	r3, #28672	; 0x7000
	if ((thread->base.thread_state & new_state) == 0U) {
70001d76:	d122      	bne.n	70001dbe <z_thread_halt+0x6a>
		thread->base.thread_state |= new_state;
70001d78:	ea42 0003 	orr.w	r0, r2, r3
		if (z_is_thread_queued(thread)) {
70001d7c:	09db      	lsrs	r3, r3, #7
	thread->base.thread_state &= ~_THREAD_QUEUED;
70001d7e:	bf17      	itett	ne
70001d80:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
		thread->base.thread_state |= new_state;
70001d84:	7368      	strbeq	r0, [r5, #13]
	thread->base.thread_state &= ~_THREAD_QUEUED;
70001d86:	7368      	strbne	r0, [r5, #13]
	sys_dnode_t *const next = node->next;
70001d88:	e9d5 3000 	ldrdne	r3, r0, [r5]
	prev->next = next;
70001d8c:	bf1e      	ittt	ne
70001d8e:	6003      	strne	r3, [r0, #0]
	next->prev = prev;
70001d90:	6058      	strne	r0, [r3, #4]
	node->prev = NULL;
70001d92:	e9c5 1100 	strdne	r1, r1, [r5]
			dequeue_thread(thread);
		}

		if (new_state == _THREAD_DEAD) {
70001d96:	2a08      	cmp	r2, #8
70001d98:	d029      	beq.n	70001dee <z_thread_halt+0x9a>
	return list->head == list;
70001d9a:	f247 7328 	movw	r3, #30504	; 0x7728
70001d9e:	f2c7 0300 	movt	r3, #28672	; 0x7000
70001da2:	461a      	mov	r2, r3
70001da4:	f852 1f18 	ldr.w	r1, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
70001da8:	4291      	cmp	r1, r2
70001daa:	d05f      	beq.n	70001e6c <z_thread_halt+0x118>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
70001dac:	2900      	cmp	r1, #0
70001dae:	d069      	beq.n	70001e84 <z_thread_halt+0x130>
		_kernel.ready_q.cache = thread;
70001db0:	6159      	str	r1, [r3, #20]
  __ASM volatile ("dmb 0xF":::"memory");
70001db2:	f3bf 8f5f 	dmb	sy
	thread->base.thread_state &= ~(_THREAD_ABORTING | _THREAD_SUSPENDING);
70001db6:	7b6a      	ldrb	r2, [r5, #13]
70001db8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
70001dbc:	736a      	strb	r2, [r5, #13]
		if ((thread == arch_current_thread()) && !arch_is_in_isr()) {
70001dbe:	689a      	ldr	r2, [r3, #8]
70001dc0:	4295      	cmp	r5, r2
70001dc2:	d003      	beq.n	70001dcc <z_thread_halt+0x78>
	if (key != 0U) {
70001dc4:	b907      	cbnz	r7, 70001dc8 <z_thread_halt+0x74>
  __ASM volatile ("cpsie i" : : : "memory");
70001dc6:	b662      	cpsie	i
}
70001dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
70001dcc:	ee1d 2f70 	mrc	15, 0, r2, cr13, cr0, {3}
70001dd0:	f022 0203 	bic.w	r2, r2, #3
		if ((thread == arch_current_thread()) && !arch_is_in_isr()) {
70001dd4:	6812      	ldr	r2, [r2, #0]
70001dd6:	2a00      	cmp	r2, #0
70001dd8:	d1f4      	bne.n	70001dc4 <z_thread_halt+0x70>
70001dda:	689b      	ldr	r3, [r3, #8]
	arch_current_thread()->arch.swap_return_value = -EAGAIN;
70001ddc:	f06f 020a 	mvn.w	r2, #10
70001de0:	e9c3 721b 	strd	r7, r2, [r3, #108]	; 0x6c
	z_arm_cortex_r_svc();
70001de4:	f7fe ee9c 	blx	70000b20 <z_arm_cortex_r_svc>
70001de8:	2f00      	cmp	r7, #0
70001dea:	d0ec      	beq.n	70001dc6 <z_thread_halt+0x72>
70001dec:	e7ec      	b.n	70001dc8 <z_thread_halt+0x74>
			if (thread->base.pended_on != NULL) {
70001dee:	68ab      	ldr	r3, [r5, #8]
70001df0:	b15b      	cbz	r3, 70001e0a <z_thread_halt+0xb6>
	sys_dnode_t *const next = node->next;
70001df2:	e9d5 3100 	ldrd	r3, r1, [r5]
	node->next = NULL;
70001df6:	2200      	movs	r2, #0
	prev->next = next;
70001df8:	600b      	str	r3, [r1, #0]
	next->prev = prev;
70001dfa:	6059      	str	r1, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
70001dfc:	7b6b      	ldrb	r3, [r5, #13]
	node->prev = NULL;
70001dfe:	e9c5 2200 	strd	r2, r2, [r5]
70001e02:	f023 0302 	bic.w	r3, r3, #2
70001e06:	60aa      	str	r2, [r5, #8]
70001e08:	736b      	strb	r3, [r5, #13]
	return z_abort_timeout(&thread->base.timeout);
70001e0a:	f105 0018 	add.w	r0, r5, #24
70001e0e:	f000 fb65 	bl	700024dc <z_abort_timeout>
	return list->head == list;
70001e12:	6dac      	ldr	r4, [r5, #88]	; 0x58

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
70001e14:	f105 0858 	add.w	r8, r5, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
70001e18:	45a0      	cmp	r8, r4
70001e1a:	d019      	beq.n	70001e50 <z_thread_halt+0xfc>
	for (thread = z_waitq_head(wait_q); thread != NULL; thread = z_waitq_head(wait_q)) {
70001e1c:	b1c4      	cbz	r4, 70001e50 <z_thread_halt+0xfc>
	node->next = NULL;
70001e1e:	2600      	movs	r6, #0
70001e20:	e000      	b.n	70001e24 <z_thread_halt+0xd0>
70001e22:	b1ac      	cbz	r4, 70001e50 <z_thread_halt+0xfc>
	sys_dnode_t *const next = node->next;
70001e24:	e9d4 3200 	ldrd	r3, r2, [r4]
70001e28:	f104 0018 	add.w	r0, r4, #24
	prev->next = next;
70001e2c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
70001e2e:	605a      	str	r2, [r3, #4]
70001e30:	7b63      	ldrb	r3, [r4, #13]
	node->prev = NULL;
70001e32:	e9c4 6600 	strd	r6, r6, [r4]
70001e36:	f023 0302 	bic.w	r3, r3, #2
70001e3a:	60a6      	str	r6, [r4, #8]
70001e3c:	7363      	strb	r3, [r4, #13]
70001e3e:	f000 fb4d 	bl	700024dc <z_abort_timeout>
	thread->arch.swap_return_value = value;
70001e42:	6726      	str	r6, [r4, #112]	; 0x70
		ready_thread(thread);
70001e44:	4620      	mov	r0, r4
70001e46:	f7ff ff3d 	bl	70001cc4 <ready_thread>
	return list->head == list;
70001e4a:	6dac      	ldr	r4, [r5, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
70001e4c:	45a0      	cmp	r8, r4
70001e4e:	d1e8      	bne.n	70001e22 <z_thread_halt+0xce>
70001e50:	f247 7328 	movw	r3, #30504	; 0x7728
70001e54:	f2c7 0300 	movt	r3, #28672	; 0x7000
			 * ISR that preempted it requires clearing the
			 * arch_current_thread() pointer so the upcoming context
			 * switch doesn't clobber the now-freed
			 * memory
			 */
			if (thread == arch_current_thread() && arch_is_in_isr()) {
70001e58:	689a      	ldr	r2, [r3, #8]
70001e5a:	4295      	cmp	r5, r2
70001e5c:	d014      	beq.n	70001e88 <z_thread_halt+0x134>
	return list->head == list;
70001e5e:	461a      	mov	r2, r3
70001e60:	f852 1f18 	ldr.w	r1, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
70001e64:	4291      	cmp	r1, r2
70001e66:	d001      	beq.n	70001e6c <z_thread_halt+0x118>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
70001e68:	2900      	cmp	r1, #0
70001e6a:	d1a1      	bne.n	70001db0 <z_thread_halt+0x5c>
		_kernel.ready_q.cache = thread;
70001e6c:	68da      	ldr	r2, [r3, #12]
70001e6e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dmb 0xF":::"memory");
70001e70:	f3bf 8f5f 	dmb	sy
	thread->base.thread_state &= ~(_THREAD_ABORTING | _THREAD_SUSPENDING);
70001e74:	7b6a      	ldrb	r2, [r5, #13]
70001e76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
70001e7a:	736a      	strb	r2, [r5, #13]
		if ((thread == arch_current_thread()) && !arch_is_in_isr()) {
70001e7c:	689a      	ldr	r2, [r3, #8]
70001e7e:	4295      	cmp	r5, r2
70001e80:	d1a0      	bne.n	70001dc4 <z_thread_halt+0x70>
70001e82:	e7a3      	b.n	70001dcc <z_thread_halt+0x78>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
70001e84:	68d9      	ldr	r1, [r3, #12]
#ifdef CONFIG_SMP
		unpend_all(&thread->halt_queue);
#endif /* CONFIG_SMP */
		update_cache(1);

		if (new_state == _THREAD_SUSPENDED) {
70001e86:	e793      	b.n	70001db0 <z_thread_halt+0x5c>
70001e88:	ee1d 2f70 	mrc	15, 0, r2, cr13, cr0, {3}
70001e8c:	f022 0203 	bic.w	r2, r2, #3
			if (thread == arch_current_thread() && arch_is_in_isr()) {
70001e90:	6812      	ldr	r2, [r2, #0]
70001e92:	2a00      	cmp	r2, #0
70001e94:	d0e3      	beq.n	70001e5e <z_thread_halt+0x10a>
	return list->head == list;
70001e96:	461a      	mov	r2, r3
70001e98:	f852 1f18 	ldr.w	r1, [r2, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
70001e9c:	4291      	cmp	r1, r2
70001e9e:	d00c      	beq.n	70001eba <z_thread_halt+0x166>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
70001ea0:	b159      	cbz	r1, 70001eba <z_thread_halt+0x166>
		_kernel.ready_q.cache = thread;
70001ea2:	6159      	str	r1, [r3, #20]
70001ea4:	f644 7228 	movw	r2, #20264	; 0x4f28
70001ea8:	f240 1101 	movw	r1, #257	; 0x101
70001eac:	f2c7 0200 	movt	r2, #28672	; 0x7000
70001eb0:	8191      	strh	r1, [r2, #12]
	dummy_thread->resource_pool = NULL;
70001eb2:	2100      	movs	r1, #0
	_current_cpu->current = thread;
70001eb4:	609a      	str	r2, [r3, #8]
70001eb6:	6691      	str	r1, [r2, #104]	; 0x68
#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif /* CONFIG_TIMESLICE_PER_THREAD */

	arch_current_thread_set(dummy_thread);
}
70001eb8:	e7da      	b.n	70001e70 <z_thread_halt+0x11c>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
70001eba:	68d9      	ldr	r1, [r3, #12]
		 * code.  Note that we must leave a non-null switch
		 * handle for any threads spinning in join() (this can
		 * never be used, as our thread is flagged dead, but
		 * it must not be NULL otherwise join can deadlock).
		 */
		if (dummify && !IS_ENABLED(CONFIG_ARCH_POSIX)) {
70001ebc:	e7f1      	b.n	70001ea2 <z_thread_halt+0x14e>
70001ebe:	bf00      	nop

70001ec0 <z_ready_thread>:
{
70001ec0:	b510      	push	{r4, lr}
	__asm__ volatile(
70001ec2:	f3ef 8400 	mrs	r4, CPSR
70001ec6:	f004 0480 	and.w	r4, r4, #128	; 0x80
70001eca:	b672      	cpsid	i
			ready_thread(thread);
70001ecc:	f7ff fefa 	bl	70001cc4 <ready_thread>
	if (key != 0U) {
70001ed0:	b904      	cbnz	r4, 70001ed4 <z_ready_thread+0x14>
  __ASM volatile ("cpsie i" : : : "memory");
70001ed2:	b662      	cpsie	i
}
70001ed4:	bd10      	pop	{r4, pc}
70001ed6:	bf00      	nop

70001ed8 <z_impl_k_thread_suspend>:
	struct k_thread *ret = _kernel.cpus[0].current;
70001ed8:	f247 7328 	movw	r3, #30504	; 0x7728
70001edc:	f2c7 0300 	movt	r3, #28672	; 0x7000
	if (thread == arch_current_thread() && !arch_is_in_isr() && !IS_ENABLED(CONFIG_SMP)) {
70001ee0:	689a      	ldr	r2, [r3, #8]
70001ee2:	4282      	cmp	r2, r0
70001ee4:	d00e      	beq.n	70001f04 <z_impl_k_thread_suspend+0x2c>
	__asm__ volatile(
70001ee6:	f3ef 8100 	mrs	r1, CPSR
70001eea:	f001 0180 	and.w	r1, r1, #128	; 0x80
70001eee:	b672      	cpsid	i
	if ((thread->base.thread_state & _THREAD_SUSPENDED) != 0U) {
70001ef0:	7b42      	ldrb	r2, [r0, #13]
70001ef2:	f012 0210 	ands.w	r2, r2, #16
70001ef6:	d002      	beq.n	70001efe <z_impl_k_thread_suspend+0x26>
	if (key != 0U) {
70001ef8:	b919      	cbnz	r1, 70001f02 <z_impl_k_thread_suspend+0x2a>
70001efa:	b662      	cpsie	i
}
70001efc:	4770      	bx	lr
	z_thread_halt(thread, key, false);
70001efe:	f7ff bf29 	b.w	70001d54 <z_thread_halt>
70001f02:	4770      	bx	lr
70001f04:	ee1d 1f70 	mrc	15, 0, r1, cr13, cr0, {3}
70001f08:	f021 0103 	bic.w	r1, r1, #3
	if (thread == arch_current_thread() && !arch_is_in_isr() && !IS_ENABLED(CONFIG_SMP)) {
70001f0c:	6809      	ldr	r1, [r1, #0]
70001f0e:	2900      	cmp	r1, #0
70001f10:	d1e9      	bne.n	70001ee6 <z_impl_k_thread_suspend+0xe>
{
70001f12:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
70001f14:	f3ef 8400 	mrs	r4, CPSR
70001f18:	f004 0480 	and.w	r4, r4, #128	; 0x80
70001f1c:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
70001f1e:	7b50      	ldrb	r0, [r2, #13]
	sys_dnode_t *const prev = node->prev;
70001f20:	6856      	ldr	r6, [r2, #4]
	sys_dnode_t *const next = node->next;
70001f22:	6815      	ldr	r5, [r2, #0]
70001f24:	f000 007f 	and.w	r0, r0, #127	; 0x7f
70001f28:	f040 0010 	orr.w	r0, r0, #16
70001f2c:	7350      	strb	r0, [r2, #13]
	return list->head == list;
70001f2e:	4618      	mov	r0, r3
	prev->next = next;
70001f30:	6035      	str	r5, [r6, #0]
	next->prev = prev;
70001f32:	606e      	str	r6, [r5, #4]
	node->next = NULL;
70001f34:	6011      	str	r1, [r2, #0]
70001f36:	6051      	str	r1, [r2, #4]
	return list->head == list;
70001f38:	f850 2f18 	ldr.w	r2, [r0, #24]!
70001f3c:	6899      	ldr	r1, [r3, #8]
	arch_current_thread()->arch.basepri = key;
70001f3e:	66cc      	str	r4, [r1, #108]	; 0x6c
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
70001f40:	4282      	cmp	r2, r0
70001f42:	bf18      	it	ne
70001f44:	2a00      	cmpne	r2, #0
	arch_current_thread()->arch.swap_return_value = -EAGAIN;
70001f46:	f06f 000a 	mvn.w	r0, #10
70001f4a:	bf08      	it	eq
70001f4c:	68da      	ldreq	r2, [r3, #12]
70001f4e:	6708      	str	r0, [r1, #112]	; 0x70
		_kernel.ready_q.cache = thread;
70001f50:	615a      	str	r2, [r3, #20]
	z_arm_cortex_r_svc();
70001f52:	f7fe ede6 	blx	70000b20 <z_arm_cortex_r_svc>
	if (key != 0U) {
70001f56:	b904      	cbnz	r4, 70001f5a <z_impl_k_thread_suspend+0x82>
  __ASM volatile ("cpsie i" : : : "memory");
70001f58:	b662      	cpsie	i
}
70001f5a:	bd70      	pop	{r4, r5, r6, pc}

70001f5c <z_unpend_thread_no_timeout>:
	__asm__ volatile(
70001f5c:	f3ef 8100 	mrs	r1, CPSR
70001f60:	f001 0180 	and.w	r1, r1, #128	; 0x80
70001f64:	b672      	cpsid	i
		if (thread->base.pended_on != NULL) {
70001f66:	6883      	ldr	r3, [r0, #8]
70001f68:	b193      	cbz	r3, 70001f90 <z_unpend_thread_no_timeout+0x34>
	sys_dnode_t *const next = node->next;
70001f6a:	e9d0 3200 	ldrd	r3, r2, [r0]
{
70001f6e:	b430      	push	{r4, r5}
	prev->next = next;
70001f70:	6013      	str	r3, [r2, #0]
	node->next = NULL;
70001f72:	2400      	movs	r4, #0
	next->prev = prev;
70001f74:	605a      	str	r2, [r3, #4]
	node->next = NULL;
70001f76:	2500      	movs	r5, #0
70001f78:	7b43      	ldrb	r3, [r0, #13]
70001f7a:	2200      	movs	r2, #0
70001f7c:	e9c0 4500 	strd	r4, r5, [r0]
70001f80:	f023 0302 	bic.w	r3, r3, #2
70001f84:	6082      	str	r2, [r0, #8]
70001f86:	7343      	strb	r3, [r0, #13]
	if (key != 0U) {
70001f88:	b901      	cbnz	r1, 70001f8c <z_unpend_thread_no_timeout+0x30>
70001f8a:	b662      	cpsie	i
}
70001f8c:	bc30      	pop	{r4, r5}
70001f8e:	4770      	bx	lr
70001f90:	b909      	cbnz	r1, 70001f96 <z_unpend_thread_no_timeout+0x3a>
70001f92:	b662      	cpsie	i
	K_SPINLOCK(&_sched_spinlock) {
70001f94:	4770      	bx	lr
70001f96:	4770      	bx	lr

70001f98 <z_sched_wake_thread>:
{
70001f98:	b5d0      	push	{r4, r6, r7, lr}
	__asm__ volatile(
70001f9a:	f3ef 8400 	mrs	r4, CPSR
70001f9e:	f004 0480 	and.w	r4, r4, #128	; 0x80
70001fa2:	b672      	cpsid	i
		bool killed = (thread->base.thread_state &
70001fa4:	7b43      	ldrb	r3, [r0, #13]
		if (!killed) {
70001fa6:	f013 0128 	ands.w	r1, r3, #40	; 0x28
70001faa:	d112      	bne.n	70001fd2 <z_sched_wake_thread+0x3a>
			if (thread->base.pended_on != NULL) {
70001fac:	6882      	ldr	r2, [r0, #8]
70001fae:	b15a      	cbz	r2, 70001fc8 <z_sched_wake_thread+0x30>
	sys_dnode_t *const next = node->next;
70001fb0:	e9d0 3200 	ldrd	r3, r2, [r0]
	node->next = NULL;
70001fb4:	2600      	movs	r6, #0
	prev->next = next;
70001fb6:	6013      	str	r3, [r2, #0]
	node->next = NULL;
70001fb8:	2700      	movs	r7, #0
	next->prev = prev;
70001fba:	605a      	str	r2, [r3, #4]
70001fbc:	7b43      	ldrb	r3, [r0, #13]
	node->next = NULL;
70001fbe:	e9c0 6700 	strd	r6, r7, [r0]
70001fc2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
70001fc6:	6081      	str	r1, [r0, #8]
	thread->base.thread_state &= ~_THREAD_SLEEPING;
70001fc8:	f023 0304 	bic.w	r3, r3, #4
70001fcc:	7343      	strb	r3, [r0, #13]
			ready_thread(thread);
70001fce:	f7ff fe79 	bl	70001cc4 <ready_thread>
	if (key != 0U) {
70001fd2:	b904      	cbnz	r4, 70001fd6 <z_sched_wake_thread+0x3e>
70001fd4:	b662      	cpsie	i
}
70001fd6:	bdd0      	pop	{r4, r6, r7, pc}

70001fd8 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
70001fd8:	2101      	movs	r1, #1
70001fda:	3818      	subs	r0, #24
70001fdc:	f7ff bfdc 	b.w	70001f98 <z_sched_wake_thread>

70001fe0 <z_pend_curr>:
{
70001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
70001fe2:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
70001fe6:	460d      	mov	r5, r1
70001fe8:	4611      	mov	r1, r2
	__asm__ volatile(
70001fea:	f3ef 8300 	mrs	r3, CPSR
70001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
70001ff2:	b672      	cpsid	i
70001ff4:	f247 7428 	movw	r4, #30504	; 0x7728
70001ff8:	f2c7 0400 	movt	r4, #28672	; 0x7000
70001ffc:	68a0      	ldr	r0, [r4, #8]
	add_to_waitq_locked(thread, wait_q);
70001ffe:	f7ff fe39 	bl	70001c74 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
70002002:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
70002006:	bf08      	it	eq
70002008:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
7000200c:	d008      	beq.n	70002020 <z_pend_curr+0x40>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
7000200e:	f641 71d9 	movw	r1, #8153	; 0x1fd9
70002012:	463a      	mov	r2, r7
70002014:	4633      	mov	r3, r6
70002016:	3018      	adds	r0, #24
70002018:	f2c7 0100 	movt	r1, #28672	; 0x7000
7000201c:	f000 f9cc 	bl	700023b8 <z_add_timeout>
70002020:	68a3      	ldr	r3, [r4, #8]
	arch_current_thread()->arch.swap_return_value = -EAGAIN;
70002022:	f06f 020a 	mvn.w	r2, #10
70002026:	e9c3 521b 	strd	r5, r2, [r3, #108]	; 0x6c
	z_arm_cortex_r_svc();
7000202a:	f7fe ed7a 	blx	70000b20 <z_arm_cortex_r_svc>
	if (key != 0U) {
7000202e:	b905      	cbnz	r5, 70002032 <z_pend_curr+0x52>
70002030:	b662      	cpsie	i
	return arch_current_thread()->arch.swap_return_value;
70002032:	68a3      	ldr	r3, [r4, #8]
}
70002034:	6f18      	ldr	r0, [r3, #112]	; 0x70
70002036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

70002038 <z_unpend_thread>:
{
70002038:	b510      	push	{r4, lr}
	z_unpend_thread_no_timeout(thread);
7000203a:	f7ff ff8f 	bl	70001f5c <z_unpend_thread_no_timeout>
}
7000203e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
70002042:	3018      	adds	r0, #24
70002044:	f000 ba4a 	b.w	700024dc <z_abort_timeout>

70002048 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
70002048:	b9c1      	cbnz	r1, 7000207c <z_reschedule+0x34>
{
7000204a:	b508      	push	{r3, lr}
7000204c:	ee1d 3f70 	mrc	15, 0, r3, cr13, cr0, {3}
70002050:	f023 0303 	bic.w	r3, r3, #3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
70002054:	681a      	ldr	r2, [r3, #0]
70002056:	b97a      	cbnz	r2, 70002078 <z_reschedule+0x30>
70002058:	f247 7328 	movw	r3, #30504	; 0x7728
7000205c:	f2c7 0300 	movt	r3, #28672	; 0x7000
70002060:	6899      	ldr	r1, [r3, #8]
	if (resched(key.key) && need_swap()) {
70002062:	695b      	ldr	r3, [r3, #20]
70002064:	428b      	cmp	r3, r1
70002066:	d007      	beq.n	70002078 <z_reschedule+0x30>
	arch_current_thread()->arch.basepri = key;
70002068:	66ca      	str	r2, [r1, #108]	; 0x6c
7000206a:	f06f 030a 	mvn.w	r3, #10
7000206e:	670b      	str	r3, [r1, #112]	; 0x70
	z_arm_cortex_r_svc();
70002070:	f7fe ed56 	blx	70000b20 <z_arm_cortex_r_svc>
70002074:	b662      	cpsie	i
}
70002076:	bd08      	pop	{r3, pc}
70002078:	b662      	cpsie	i
7000207a:	bd08      	pop	{r3, pc}
7000207c:	4770      	bx	lr
7000207e:	bf00      	nop

70002080 <z_impl_k_thread_resume>:
{
70002080:	b510      	push	{r4, lr}
	__asm__ volatile(
70002082:	f3ef 8400 	mrs	r4, CPSR
70002086:	f004 0480 	and.w	r4, r4, #128	; 0x80
7000208a:	b672      	cpsid	i
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
7000208c:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_suspended(thread)) {
7000208e:	06d3      	lsls	r3, r2, #27
70002090:	d402      	bmi.n	70002098 <z_impl_k_thread_resume+0x18>
	if (key != 0U) {
70002092:	b904      	cbnz	r4, 70002096 <z_impl_k_thread_resume+0x16>
70002094:	b662      	cpsie	i
}
70002096:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
70002098:	f022 0210 	bic.w	r2, r2, #16
7000209c:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
7000209e:	f7ff fe11 	bl	70001cc4 <ready_thread>
	z_reschedule(&_sched_spinlock, key);
700020a2:	f247 7048 	movw	r0, #30536	; 0x7748
700020a6:	4621      	mov	r1, r4
700020a8:	f2c7 0000 	movt	r0, #28672	; 0x7000
}
700020ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&_sched_spinlock, key);
700020b0:	f7ff bfca 	b.w	70002048 <z_reschedule>

700020b4 <k_sched_lock>:
	__asm__ volatile(
700020b4:	f3ef 8100 	mrs	r1, CPSR
700020b8:	f001 0180 	and.w	r1, r1, #128	; 0x80
700020bc:	b672      	cpsid	i
700020be:	f247 7328 	movw	r3, #30504	; 0x7728
700020c2:	f2c7 0300 	movt	r3, #28672	; 0x7000
700020c6:	689a      	ldr	r2, [r3, #8]
	--arch_current_thread()->base.sched_locked;
700020c8:	7bd3      	ldrb	r3, [r2, #15]
700020ca:	3b01      	subs	r3, #1
700020cc:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
700020ce:	b901      	cbnz	r1, 700020d2 <k_sched_lock+0x1e>
700020d0:	b662      	cpsie	i
}
700020d2:	4770      	bx	lr

700020d4 <k_sched_unlock>:
{
700020d4:	b510      	push	{r4, lr}
	__asm__ volatile(
700020d6:	f3ef 8400 	mrs	r4, CPSR
700020da:	f004 0480 	and.w	r4, r4, #128	; 0x80
700020de:	b672      	cpsid	i
700020e0:	f247 7028 	movw	r0, #30504	; 0x7728
700020e4:	f2c7 0000 	movt	r0, #28672	; 0x7000
	return list->head == list;
700020e8:	4601      	mov	r1, r0
700020ea:	6882      	ldr	r2, [r0, #8]
		++arch_current_thread()->base.sched_locked;
700020ec:	7bd3      	ldrb	r3, [r2, #15]
700020ee:	3301      	adds	r3, #1
700020f0:	73d3      	strb	r3, [r2, #15]
700020f2:	f851 3f18 	ldr.w	r3, [r1, #24]!
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
700020f6:	428b      	cmp	r3, r1
700020f8:	bf18      	it	ne
700020fa:	2b00      	cmpne	r3, #0
	if (z_is_thread_prevented_from_running(arch_current_thread())) {
700020fc:	7b51      	ldrb	r1, [r2, #13]
700020fe:	bf08      	it	eq
70002100:	68c3      	ldreq	r3, [r0, #12]
70002102:	06c9      	lsls	r1, r1, #27
70002104:	d103      	bne.n	7000210e <k_sched_unlock+0x3a>
	if (thread_is_preemptible(arch_current_thread()) || thread_is_metairq(thread)) {
70002106:	89d1      	ldrh	r1, [r2, #14]
70002108:	297f      	cmp	r1, #127	; 0x7f
7000210a:	bf88      	it	hi
7000210c:	4613      	movhi	r3, r2
7000210e:	6143      	str	r3, [r0, #20]
	if (key != 0U) {
70002110:	b904      	cbnz	r4, 70002114 <k_sched_unlock+0x40>
70002112:	b662      	cpsie	i
	__asm__ volatile(
70002114:	f3ef 8300 	mrs	r3, CPSR
70002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
7000211c:	b672      	cpsid	i
	return arch_irq_unlocked(key) && !arch_is_in_isr();
7000211e:	b983      	cbnz	r3, 70002142 <k_sched_unlock+0x6e>
70002120:	ee1d 3f70 	mrc	15, 0, r3, cr13, cr0, {3}
70002124:	f023 0303 	bic.w	r3, r3, #3
70002128:	681b      	ldr	r3, [r3, #0]
7000212a:	b95b      	cbnz	r3, 70002144 <k_sched_unlock+0x70>
7000212c:	6882      	ldr	r2, [r0, #8]
	if (resched(key) && need_swap()) {
7000212e:	6941      	ldr	r1, [r0, #20]
70002130:	4291      	cmp	r1, r2
70002132:	d007      	beq.n	70002144 <k_sched_unlock+0x70>
	arch_current_thread()->arch.basepri = key;
70002134:	66d3      	str	r3, [r2, #108]	; 0x6c
70002136:	f06f 010a 	mvn.w	r1, #10
7000213a:	6711      	str	r1, [r2, #112]	; 0x70
	z_arm_cortex_r_svc();
7000213c:	f7fe ecf0 	blx	70000b20 <z_arm_cortex_r_svc>
70002140:	b662      	cpsie	i
}
70002142:	bd10      	pop	{r4, pc}
70002144:	b662      	cpsie	i
70002146:	bd10      	pop	{r4, pc}

70002148 <z_sched_init>:
{
70002148:	4a02      	ldr	r2, [pc, #8]	; (70002154 <z_sched_init+0xc>)
	list->head = (sys_dnode_t *)list;
7000214a:	4613      	mov	r3, r2
7000214c:	f843 2918 	str.w	r2, [r3], #-24
70002150:	61da      	str	r2, [r3, #28]
}
70002152:	4770      	bx	lr
70002154:	70007740 	.word	0x70007740

70002158 <z_impl_k_yield>:
{
70002158:	b570      	push	{r4, r5, r6, lr}
7000215a:	f3ef 8600 	mrs	r6, CPSR
7000215e:	f006 0680 	and.w	r6, r6, #128	; 0x80
70002162:	b672      	cpsid	i
70002164:	f247 7c28 	movw	ip, #30504	; 0x7728
70002168:	f2c7 0c00 	movt	ip, #28672	; 0x7000
	return list->head == list;
7000216c:	4665      	mov	r5, ip
7000216e:	f8dc 3008 	ldr.w	r3, [ip, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
70002172:	7b5a      	ldrb	r2, [r3, #13]
70002174:	f002 027f 	and.w	r2, r2, #127	; 0x7f
70002178:	735a      	strb	r2, [r3, #13]
	node->next = NULL;
7000217a:	2200      	movs	r2, #0
	sys_dnode_t *const prev = node->prev;
7000217c:	6858      	ldr	r0, [r3, #4]
	sys_dnode_t *const next = node->next;
7000217e:	6819      	ldr	r1, [r3, #0]
	prev->next = next;
70002180:	6001      	str	r1, [r0, #0]
	next->prev = prev;
70002182:	6048      	str	r0, [r1, #4]
	node->next = NULL;
70002184:	601a      	str	r2, [r3, #0]
70002186:	605a      	str	r2, [r3, #4]
70002188:	f8dc 0008 	ldr.w	r0, [ip, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
7000218c:	7b43      	ldrb	r3, [r0, #13]
7000218e:	f063 037f 	orn	r3, r3, #127	; 0x7f
70002192:	7343      	strb	r3, [r0, #13]
	return list->head == list;
70002194:	f855 3f18 	ldr.w	r3, [r5, #24]!
	return (node == list->tail) ? NULL : node->next;
70002198:	f8dc 401c 	ldr.w	r4, [ip, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
7000219c:	42ab      	cmp	r3, r5
7000219e:	bf08      	it	eq
700021a0:	4613      	moveq	r3, r2
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
700021a2:	b163      	cbz	r3, 700021be <z_impl_k_yield+0x66>
	int32_t b2 = thread_2->base.prio;
700021a4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	int32_t b1 = thread_1->base.prio;
700021a8:	f990 200e 	ldrsb.w	r2, [r0, #14]
	if (b1 != b2) {
700021ac:	428a      	cmp	r2, r1
700021ae:	d001      	beq.n	700021b4 <z_impl_k_yield+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
700021b0:	4291      	cmp	r1, r2
700021b2:	dc1e      	bgt.n	700021f2 <z_impl_k_yield+0x9a>
	return (node == list->tail) ? NULL : node->next;
700021b4:	42a3      	cmp	r3, r4
700021b6:	d002      	beq.n	700021be <z_impl_k_yield+0x66>
700021b8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
700021ba:	2b00      	cmp	r3, #0
700021bc:	d1f2      	bne.n	700021a4 <z_impl_k_yield+0x4c>
	node->prev = tail;
700021be:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
700021c2:	6020      	str	r0, [r4, #0]
	list->tail = node;
700021c4:	f8cc 001c 	str.w	r0, [ip, #28]
	return list->head == list;
700021c8:	f8dc 3018 	ldr.w	r3, [ip, #24]
	arch_current_thread()->arch.swap_return_value = -EAGAIN;
700021cc:	f06f 010a 	mvn.w	r1, #10
700021d0:	f8dc 2008 	ldr.w	r2, [ip, #8]
	arch_current_thread()->arch.basepri = key;
700021d4:	66d6      	str	r6, [r2, #108]	; 0x6c
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
700021d6:	42ab      	cmp	r3, r5
700021d8:	bf18      	it	ne
700021da:	2b00      	cmpne	r3, #0
	arch_current_thread()->arch.swap_return_value = -EAGAIN;
700021dc:	6711      	str	r1, [r2, #112]	; 0x70
700021de:	bf08      	it	eq
700021e0:	f8dc 300c 	ldreq.w	r3, [ip, #12]
		_kernel.ready_q.cache = thread;
700021e4:	f8cc 3014 	str.w	r3, [ip, #20]
	z_arm_cortex_r_svc();
700021e8:	f7fe ec9a 	blx	70000b20 <z_arm_cortex_r_svc>
	if (key != 0U) {
700021ec:	b906      	cbnz	r6, 700021f0 <z_impl_k_yield+0x98>
700021ee:	b662      	cpsie	i
}
700021f0:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
700021f2:	685a      	ldr	r2, [r3, #4]
	node->prev = prev;
700021f4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
700021f8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
700021fa:	6058      	str	r0, [r3, #4]
}
700021fc:	e7e4      	b.n	700021c8 <z_impl_k_yield+0x70>
700021fe:	bf00      	nop

70002200 <z_tick_sleep>:
	if (ticks == 0) {
70002200:	ea50 0301 	orrs.w	r3, r0, r1
{
70002204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
70002208:	d039      	beq.n	7000227e <z_tick_sleep+0x7e>
7000220a:	4604      	mov	r4, r0
	if (Z_TICK_ABS(ticks) <= 0) {
7000220c:	1c83      	adds	r3, r0, #2
7000220e:	460d      	mov	r5, r1
70002210:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
70002214:	bfbc      	itt	lt
70002216:	f06f 0001 	mvnlt.w	r0, #1
7000221a:	1b06      	sublt	r6, r0, r4
	if (Z_TICK_ABS(ticks) <= 0) {
7000221c:	da2b      	bge.n	70002276 <z_tick_sleep+0x76>
	__asm__ volatile(
7000221e:	f3ef 8800 	mrs	r8, CPSR
70002222:	f008 0880 	and.w	r8, r8, #128	; 0x80
70002226:	b672      	cpsid	i
70002228:	f247 7728 	movw	r7, #30504	; 0x7728
7000222c:	f2c7 0700 	movt	r7, #28672	; 0x7000
	unready_thread(arch_current_thread());
70002230:	68b8      	ldr	r0, [r7, #8]
70002232:	f7ff fcf7 	bl	70001c24 <unready_thread>
70002236:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
70002238:	f641 71d9 	movw	r1, #8153	; 0x1fd9
7000223c:	4622      	mov	r2, r4
7000223e:	462b      	mov	r3, r5
70002240:	f2c7 0100 	movt	r1, #28672	; 0x7000
70002244:	3018      	adds	r0, #24
70002246:	f000 f8b7 	bl	700023b8 <z_add_timeout>
7000224a:	68bb      	ldr	r3, [r7, #8]
	arch_current_thread()->arch.swap_return_value = -EAGAIN;
7000224c:	f06f 010a 	mvn.w	r1, #10
	thread->base.thread_state |= _THREAD_SLEEPING;
70002250:	7b5a      	ldrb	r2, [r3, #13]
70002252:	f042 0204 	orr.w	r2, r2, #4
70002256:	e9c3 811b 	strd	r8, r1, [r3, #108]	; 0x6c
7000225a:	735a      	strb	r2, [r3, #13]
	z_arm_cortex_r_svc();
7000225c:	f7fe ec60 	blx	70000b20 <z_arm_cortex_r_svc>
	if (key != 0U) {
70002260:	f1b8 0f00 	cmp.w	r8, #0
70002264:	d100      	bne.n	70002268 <z_tick_sleep+0x68>
70002266:	b662      	cpsie	i
	uint32_t left_ticks = expected_wakeup_ticks - sys_clock_tick_get_32();
70002268:	f000 fa02 	bl	70002670 <sys_clock_tick_get_32>
7000226c:	1a30      	subs	r0, r6, r0
	if (ticks > 0) {
7000226e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
70002272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
70002276:	f000 f9fb 	bl	70002670 <sys_clock_tick_get_32>
7000227a:	1906      	adds	r6, r0, r4
7000227c:	e7cf      	b.n	7000221e <z_tick_sleep+0x1e>
	z_impl_k_yield();
7000227e:	f7ff ff6b 	bl	70002158 <z_impl_k_yield>
		return 0;
70002282:	2000      	movs	r0, #0
}
70002284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

70002288 <z_impl_k_sleep>:
{
70002288:	b538      	push	{r3, r4, r5, lr}
7000228a:	4605      	mov	r5, r0
7000228c:	460c      	mov	r4, r1
	ticks = z_tick_sleep(ticks);
7000228e:	f7ff ffb7 	bl	70002200 <z_tick_sleep>
	int32_t ret = K_TIMEOUT_EQ(timeout, K_FOREVER) ? K_TICKS_FOREVER :
70002292:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
70002296:	bf08      	it	eq
70002298:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
7000229c:	bf08      	it	eq
7000229e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
}
700022a2:	bd38      	pop	{r3, r4, r5, pc}

700022a4 <z_impl_k_wakeup>:
{
700022a4:	b538      	push	{r3, r4, r5, lr}
700022a6:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
700022a8:	3018      	adds	r0, #24
700022aa:	f000 f917 	bl	700024dc <z_abort_timeout>
	__asm__ volatile(
700022ae:	f3ef 8500 	mrs	r5, CPSR
700022b2:	f005 0580 	and.w	r5, r5, #128	; 0x80
700022b6:	b672      	cpsid	i
	return (thread->base.thread_state & _THREAD_SLEEPING) != 0U;
700022b8:	7b63      	ldrb	r3, [r4, #13]
	if (!z_is_thread_sleeping(thread)) {
700022ba:	075a      	lsls	r2, r3, #29
700022bc:	d402      	bmi.n	700022c4 <z_impl_k_wakeup+0x20>
	if (key != 0U) {
700022be:	b905      	cbnz	r5, 700022c2 <z_impl_k_wakeup+0x1e>
700022c0:	b662      	cpsie	i
}
700022c2:	bd38      	pop	{r3, r4, r5, pc}
	ready_thread(thread);
700022c4:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_SLEEPING;
700022c6:	f023 0304 	bic.w	r3, r3, #4
700022ca:	7363      	strb	r3, [r4, #13]
700022cc:	f7ff fcfa 	bl	70001cc4 <ready_thread>
700022d0:	ee1d 3f70 	mrc	15, 0, r3, cr13, cr0, {3}
700022d4:	f023 0303 	bic.w	r3, r3, #3
	if (arch_is_in_isr()) {
700022d8:	681b      	ldr	r3, [r3, #0]
700022da:	2b00      	cmp	r3, #0
700022dc:	d1ef      	bne.n	700022be <z_impl_k_wakeup+0x1a>
		z_reschedule(&_sched_spinlock, key);
700022de:	f247 7048 	movw	r0, #30536	; 0x7748
700022e2:	4629      	mov	r1, r5
700022e4:	f2c7 0000 	movt	r0, #28672	; 0x7000
}
700022e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&_sched_spinlock, key);
700022ec:	f7ff beac 	b.w	70002048 <z_reschedule>

700022f0 <z_impl_k_sched_current_thread_query>:
700022f0:	f247 7328 	movw	r3, #30504	; 0x7728
700022f4:	f2c7 0300 	movt	r3, #28672	; 0x7000
}
700022f8:	6898      	ldr	r0, [r3, #8]
700022fa:	4770      	bx	lr

700022fc <z_impl_k_thread_abort>:
	__asm__ volatile(
700022fc:	f3ef 8100 	mrs	r1, CPSR
70002300:	f001 0180 	and.w	r1, r1, #128	; 0x80
70002304:	b672      	cpsid	i
	return (thread->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
70002306:	7b02      	ldrb	r2, [r0, #12]

void z_thread_abort(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&_sched_spinlock);

	if (z_is_thread_essential(thread)) {
70002308:	07d2      	lsls	r2, r2, #31
7000230a:	d409      	bmi.n	70002320 <z_impl_k_thread_abort+0x24>
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
7000230c:	7b43      	ldrb	r3, [r0, #13]
7000230e:	071b      	lsls	r3, r3, #28
70002310:	d502      	bpl.n	70002318 <z_impl_k_thread_abort+0x1c>
	if (key != 0U) {
70002312:	b921      	cbnz	r1, 7000231e <z_impl_k_thread_abort+0x22>
70002314:	b662      	cpsie	i
}
70002316:	4770      	bx	lr
		k_spin_unlock(&_sched_spinlock, key);
		return;
	}

	z_thread_halt(thread, key, true);
70002318:	2201      	movs	r2, #1
7000231a:	f7ff bd1b 	b.w	70001d54 <z_thread_halt>
	z_thread_abort(thread);

	__ASSERT_NO_MSG((thread->base.thread_state & _THREAD_DEAD) != 0);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, abort, thread);
}
7000231e:	4770      	bx	lr
70002320:	b901      	cbnz	r1, 70002324 <z_impl_k_thread_abort+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
70002322:	b662      	cpsie	i
		k_panic();
70002324:	2004      	movs	r0, #4
70002326:	b500      	push	{lr}
70002328:	b662      	cpsie	i
7000232a:	df02      	svc	2
7000232c:	f85d eb04 	ldr.w	lr, [sp], #4
		return;
70002330:	4770      	bx	lr
70002332:	bf00      	nop

70002334 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
70002334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__asm__ volatile(
70002338:	f3ef 8800 	mrs	r8, CPSR
7000233c:	f008 0880 	and.w	r8, r8, #128	; 0x80
70002340:	b672      	cpsid	i
	return list->head == list;
70002342:	6804      	ldr	r4, [r0, #0]
	bool ret = false;

	K_SPINLOCK(&_sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
70002344:	42a0      	cmp	r0, r4
70002346:	bf18      	it	ne
70002348:	2c00      	cmpne	r4, #0
7000234a:	bf14      	ite	ne
7000234c:	2501      	movne	r5, #1
7000234e:	2500      	moveq	r5, #0
70002350:	d106      	bne.n	70002360 <z_sched_wake+0x2c>
	if (key != 0U) {
70002352:	f1b8 0f00 	cmp.w	r8, #0
70002356:	d100      	bne.n	7000235a <z_sched_wake+0x26>
70002358:	b662      	cpsie	i
			ret = true;
		}
	}

	return ret;
}
7000235a:	4628      	mov	r0, r5
7000235c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const next = node->next;
70002360:	e9d4 3000 	ldrd	r3, r0, [r4]
	node->next = NULL;
70002364:	2600      	movs	r6, #0
70002366:	6162      	str	r2, [r4, #20]
70002368:	2700      	movs	r7, #0
	thread->arch.swap_return_value = value;
7000236a:	6721      	str	r1, [r4, #112]	; 0x70
	thread->base.pended_on = NULL;
7000236c:	2200      	movs	r2, #0
	prev->next = next;
7000236e:	6003      	str	r3, [r0, #0]
	next->prev = prev;
70002370:	6058      	str	r0, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
70002372:	7b63      	ldrb	r3, [r4, #13]
70002374:	f023 0302 	bic.w	r3, r3, #2
	node->next = NULL;
70002378:	e9c4 6700 	strd	r6, r7, [r4]
7000237c:	f104 0018 	add.w	r0, r4, #24
70002380:	7363      	strb	r3, [r4, #13]
70002382:	60a2      	str	r2, [r4, #8]
70002384:	f000 f8aa 	bl	700024dc <z_abort_timeout>
			ready_thread(thread);
70002388:	4620      	mov	r0, r4
7000238a:	f7ff fc9b 	bl	70001cc4 <ready_thread>
			ret = true;
7000238e:	e7e0      	b.n	70002352 <z_sched_wake+0x1e>

70002390 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
70002390:	b510      	push	{r4, lr}
70002392:	b082      	sub	sp, #8
	int ret = z_pend_curr(lock, key, wait_q, timeout);
70002394:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
70002398:	e9cd 3400 	strd	r3, r4, [sp]
{
7000239c:	9c06      	ldr	r4, [sp, #24]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
7000239e:	f7ff fe1f 	bl	70001fe0 <z_pend_curr>

	if (data != NULL) {
700023a2:	b134      	cbz	r4, 700023b2 <z_sched_wait+0x22>
700023a4:	f247 7328 	movw	r3, #30504	; 0x7728
700023a8:	f2c7 0300 	movt	r3, #28672	; 0x7000
		*data = arch_current_thread()->base.swap_data;
700023ac:	689b      	ldr	r3, [r3, #8]
700023ae:	695b      	ldr	r3, [r3, #20]
700023b0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
700023b2:	b002      	add	sp, #8
700023b4:	bd10      	pop	{r4, pc}
700023b6:	bf00      	nop

700023b8 <z_add_timeout>:
}

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
700023b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
700023bc:	bf08      	it	eq
700023be:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
700023c2:	f000 808a 	beq.w	700024da <z_add_timeout+0x122>
{
700023c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
700023c8:	4606      	mov	r6, r0
700023ca:	461d      	mov	r5, r3
700023cc:	4614      	mov	r4, r2
700023ce:	4618      	mov	r0, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif /* CONFIG_KERNEL_COHERENCE */

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
700023d0:	60b1      	str	r1, [r6, #8]
	__asm__ volatile(
700023d2:	f3ef 8700 	mrs	r7, CPSR
700023d6:	f007 0780 	and.w	r7, r7, #128	; 0x80
700023da:	b672      	cpsid	i

	K_SPINLOCK(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
700023dc:	3201      	adds	r2, #1
700023de:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
700023e2:	da5f      	bge.n	700024a4 <z_add_timeout+0xec>
		    (Z_TICK_ABS(timeout.ticks) >= 0)) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
700023e4:	f644 72a0 	movw	r2, #20384	; 0x4fa0
700023e8:	f06f 0301 	mvn.w	r3, #1
700023ec:	f2c7 0200 	movt	r2, #28672	; 0x7000
700023f0:	e9d2 1500 	ldrd	r1, r5, [r2]
700023f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
700023f8:	1a5b      	subs	r3, r3, r1
700023fa:	eb62 0505 	sbc.w	r5, r2, r5
700023fe:	1b1c      	subs	r4, r3, r4
70002400:	eb65 0500 	sbc.w	r5, r5, r0

			to->dticks = MAX(1, ticks);
70002404:	2c01      	cmp	r4, #1
70002406:	f175 0300 	sbcs.w	r3, r5, #0
7000240a:	bfbc      	itt	lt
7000240c:	2401      	movlt	r4, #1
7000240e:	2500      	movlt	r5, #0
70002410:	6134      	str	r4, [r6, #16]
	return list->head == list;
70002412:	f64b 4020 	movw	r0, #48160	; 0xbc20
70002416:	6175      	str	r5, [r6, #20]
70002418:	f2c7 0000 	movt	r0, #28672	; 0x7000
	return (node == list->tail) ? NULL : node->next;
7000241c:	e9d0 2c00 	ldrd	r2, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
70002420:	4282      	cmp	r2, r0
70002422:	d011      	beq.n	70002448 <z_add_timeout+0x90>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
70002424:	b182      	cbz	r2, 70002448 <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
70002426:	e9d2 3104 	ldrd	r3, r1, [r2, #16]
7000242a:	429c      	cmp	r4, r3
7000242c:	eb75 0e01 	sbcs.w	lr, r5, r1
70002430:	db48      	blt.n	700024c4 <z_add_timeout+0x10c>
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
70002432:	1ae3      	subs	r3, r4, r3
70002434:	461c      	mov	r4, r3
70002436:	eb65 0501 	sbc.w	r5, r5, r1
	return (node == list->tail) ? NULL : node->next;
7000243a:	4562      	cmp	r2, ip
7000243c:	e9c6 3504 	strd	r3, r5, [r6, #16]
70002440:	d002      	beq.n	70002448 <z_add_timeout+0x90>
70002442:	6812      	ldr	r2, [r2, #0]
		for (t = first(); t != NULL; t = next(t)) {
70002444:	2a00      	cmp	r2, #0
70002446:	d1ee      	bne.n	70002426 <z_add_timeout+0x6e>
	node->prev = tail;
70002448:	e9c6 0c00 	strd	r0, ip, [r6]
	tail->next = node;
7000244c:	f8cc 6000 	str.w	r6, [ip]
	list->tail = node;
70002450:	6046      	str	r6, [r0, #4]
	return list->head == list;
70002452:	6804      	ldr	r4, [r0, #0]

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first() && announce_remaining == 0) {
70002454:	1a20      	subs	r0, r4, r0
70002456:	bf18      	it	ne
70002458:	2001      	movne	r0, #1
7000245a:	42a6      	cmp	r6, r4
7000245c:	bf18      	it	ne
7000245e:	2000      	movne	r0, #0
70002460:	b910      	cbnz	r0, 70002468 <z_add_timeout+0xb0>
	if (key != 0U) {
70002462:	b907      	cbnz	r7, 70002466 <z_add_timeout+0xae>
70002464:	b662      	cpsie	i
			sys_clock_set_timeout(next_timeout(), false);
		}
	}
}
70002466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (to == first() && announce_remaining == 0) {
70002468:	f247 7348 	movw	r3, #30536	; 0x7748
7000246c:	f2c7 0300 	movt	r3, #28672	; 0x7000
70002470:	681b      	ldr	r3, [r3, #0]
70002472:	2b00      	cmp	r3, #0
70002474:	d1f5      	bne.n	70002462 <z_add_timeout+0xaa>
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
70002476:	f7ff f869 	bl	7000154c <sys_clock_elapsed>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
7000247a:	6923      	ldr	r3, [r4, #16]
7000247c:	6962      	ldr	r2, [r4, #20]
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
7000247e:	4601      	mov	r1, r0
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
70002480:	1a18      	subs	r0, r3, r0
70002482:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
			sys_clock_set_timeout(next_timeout(), false);
70002486:	2100      	movs	r1, #0
		ret = MAX(0, to->dticks - ticks_elapsed);
70002488:	2b00      	cmp	r3, #0
7000248a:	bfbc      	itt	lt
7000248c:	2000      	movlt	r0, #0
7000248e:	2300      	movlt	r3, #0
			sys_clock_set_timeout(next_timeout(), false);
70002490:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
70002494:	f173 0300 	sbcs.w	r3, r3, #0
70002498:	bfa8      	it	ge
7000249a:	f06f 4000 	mvnge.w	r0, #2147483648	; 0x80000000
7000249e:	f7ff f825 	bl	700014ec <sys_clock_set_timeout>
700024a2:	e7de      	b.n	70002462 <z_add_timeout+0xaa>
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
700024a4:	f247 7248 	movw	r2, #30536	; 0x7748
			to->dticks = timeout.ticks + 1 + elapsed();
700024a8:	3401      	adds	r4, #1
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
700024aa:	f2c7 0200 	movt	r2, #28672	; 0x7000
			to->dticks = timeout.ticks + 1 + elapsed();
700024ae:	f145 0500 	adc.w	r5, r5, #0
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
700024b2:	6813      	ldr	r3, [r2, #0]
700024b4:	2b00      	cmp	r3, #0
700024b6:	d1ab      	bne.n	70002410 <z_add_timeout+0x58>
700024b8:	f7ff f848 	bl	7000154c <sys_clock_elapsed>
			to->dticks = timeout.ticks + 1 + elapsed();
700024bc:	1904      	adds	r4, r0, r4
700024be:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
700024c2:	e7a5      	b.n	70002410 <z_add_timeout+0x58>
				t->dticks -= to->dticks;
700024c4:	1b1b      	subs	r3, r3, r4
	sys_dnode_t *const prev = successor->prev;
700024c6:	6854      	ldr	r4, [r2, #4]
700024c8:	eb61 0105 	sbc.w	r1, r1, r5
700024cc:	e9c2 3104 	strd	r3, r1, [r2, #16]
	node->next = successor;
700024d0:	e9c6 2400 	strd	r2, r4, [r6]
	prev->next = node;
700024d4:	6026      	str	r6, [r4, #0]
	successor->prev = node;
700024d6:	6056      	str	r6, [r2, #4]
		if (t == NULL) {
700024d8:	e7bb      	b.n	70002452 <z_add_timeout+0x9a>
700024da:	4770      	bx	lr

700024dc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
700024dc:	b430      	push	{r4, r5}
	__asm__ volatile(
700024de:	f3ef 8500 	mrs	r5, CPSR
700024e2:	f005 0580 	and.w	r5, r5, #128	; 0x80
700024e6:	b672      	cpsid	i
	return node->next != NULL;
700024e8:	6802      	ldr	r2, [r0, #0]
	int ret = -EINVAL;

	K_SPINLOCK(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
700024ea:	b1e2      	cbz	r2, 70002526 <z_abort_timeout+0x4a>
	return (node == list->tail) ? NULL : node->next;
700024ec:	f64b 4120 	movw	r1, #48160	; 0xbc20
700024f0:	4603      	mov	r3, r0
700024f2:	f2c7 0100 	movt	r1, #28672	; 0x7000
700024f6:	6849      	ldr	r1, [r1, #4]
700024f8:	4288      	cmp	r0, r1
700024fa:	d009      	beq.n	70002510 <z_abort_timeout+0x34>
		next(t)->dticks += t->dticks;
700024fc:	6904      	ldr	r4, [r0, #16]
700024fe:	6911      	ldr	r1, [r2, #16]
70002500:	6950      	ldr	r0, [r2, #20]
70002502:	1909      	adds	r1, r1, r4
70002504:	695c      	ldr	r4, [r3, #20]
70002506:	eb40 0004 	adc.w	r0, r0, r4
7000250a:	e9c2 1004 	strd	r1, r0, [r2, #16]
	sys_dnode_t *const next = node->next;
7000250e:	681a      	ldr	r2, [r3, #0]
	sys_dnode_t *const prev = node->prev;
70002510:	685c      	ldr	r4, [r3, #4]
	node->next = NULL;
70002512:	2100      	movs	r1, #0
	prev->next = next;
70002514:	6022      	str	r2, [r4, #0]
			remove_timeout(to);
			ret = 0;
70002516:	4608      	mov	r0, r1
	next->prev = prev;
70002518:	6054      	str	r4, [r2, #4]
	node->next = NULL;
7000251a:	6019      	str	r1, [r3, #0]
7000251c:	6059      	str	r1, [r3, #4]
	if (key != 0U) {
7000251e:	b905      	cbnz	r5, 70002522 <z_abort_timeout+0x46>
70002520:	b662      	cpsie	i
		}
	}

	return ret;
}
70002522:	bc30      	pop	{r4, r5}
70002524:	4770      	bx	lr
	int ret = -EINVAL;
70002526:	f06f 0015 	mvn.w	r0, #21
7000252a:	e7f8      	b.n	7000251e <z_abort_timeout+0x42>

7000252c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
7000252c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
70002530:	4603      	mov	r3, r0
	__asm__ volatile(
70002532:	f3ef 8800 	mrs	r8, CPSR
70002536:	f008 0880 	and.w	r8, r8, #128	; 0x80
7000253a:	b672      	cpsid	i
	return list->head == list;
7000253c:	f64b 4920 	movw	r9, #48160	; 0xbc20
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
70002540:	f247 7a48 	movw	sl, #30536	; 0x7748
70002544:	f2c7 0900 	movt	r9, #28672	; 0x7000
70002548:	f2c7 0a00 	movt	sl, #28672	; 0x7000
7000254c:	f8ca 0000 	str.w	r0, [sl]
70002550:	f8d9 0000 	ldr.w	r0, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
70002554:	4548      	cmp	r0, r9
70002556:	bf04      	itt	eq
70002558:	f644 75a0 	movweq	r5, #20384	; 0x4fa0
7000255c:	f2c7 0500 	movteq	r5, #28672	; 0x7000
70002560:	d068      	beq.n	70002634 <sys_clock_announce+0x108>

	struct _timeout *t;

	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
70002562:	2800      	cmp	r0, #0
70002564:	d076      	beq.n	70002654 <sys_clock_announce+0x128>
70002566:	f644 75a0 	movw	r5, #20384	; 0x4fa0
	node->next = NULL;
7000256a:	f04f 0b00 	mov.w	fp, #0
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
7000256e:	2600      	movs	r6, #0
70002570:	f2c7 0500 	movt	r5, #28672	; 0x7000
70002574:	2700      	movs	r7, #0
	     (t != NULL) && (t->dticks <= announce_remaining);
70002576:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
7000257a:	17d9      	asrs	r1, r3, #31
7000257c:	42a3      	cmp	r3, r4
7000257e:	eb71 0c02 	sbcs.w	ip, r1, r2
70002582:	db29      	blt.n	700025d8 <sys_clock_announce+0xac>
		curr_tick += dt;
70002584:	e9d5 3200 	ldrd	r3, r2, [r5]
	sys_dnode_t *const prev = node->prev;
70002588:	6841      	ldr	r1, [r0, #4]
		t->dticks = 0;
7000258a:	e9c0 6704 	strd	r6, r7, [r0, #16]
		curr_tick += dt;
7000258e:	191b      	adds	r3, r3, r4
70002590:	eb42 72e4 	adc.w	r2, r2, r4, asr #31
70002594:	602b      	str	r3, [r5, #0]
	sys_dnode_t *const next = node->next;
70002596:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
70002598:	600b      	str	r3, [r1, #0]
7000259a:	606a      	str	r2, [r5, #4]
	next->prev = prev;
7000259c:	6059      	str	r1, [r3, #4]
	node->next = NULL;
7000259e:	f8c0 b000 	str.w	fp, [r0]
700025a2:	f8c0 b004 	str.w	fp, [r0, #4]
	if (key != 0U) {
700025a6:	f1b8 0f00 	cmp.w	r8, #0
700025aa:	d100      	bne.n	700025ae <sys_clock_announce+0x82>
700025ac:	b662      	cpsie	i
		remove_timeout(t);

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
700025ae:	6883      	ldr	r3, [r0, #8]
700025b0:	4798      	blx	r3
	__asm__ volatile(
700025b2:	f3ef 8800 	mrs	r8, CPSR
700025b6:	f008 0880 	and.w	r8, r8, #128	; 0x80
700025ba:	b672      	cpsid	i
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
700025bc:	f8da 3000 	ldr.w	r3, [sl]
	return list->head == list;
700025c0:	f8d9 0000 	ldr.w	r0, [r9]
700025c4:	1b1b      	subs	r3, r3, r4
	return sys_dlist_is_empty(list) ? NULL : list->head;
700025c6:	4548      	cmp	r0, r9
700025c8:	f8ca 3000 	str.w	r3, [sl]
700025cc:	d032      	beq.n	70002634 <sys_clock_announce+0x108>
	     (t != NULL) && (t->dticks <= announce_remaining);
700025ce:	2800      	cmp	r0, #0
700025d0:	d1d1      	bne.n	70002576 <sys_clock_announce+0x4a>
	return list->head == list;
700025d2:	4604      	mov	r4, r0
700025d4:	17d9      	asrs	r1, r3, #31
700025d6:	e006      	b.n	700025e6 <sys_clock_announce+0xba>
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
700025d8:	1ae4      	subs	r4, r4, r3
700025da:	eb62 0201 	sbc.w	r2, r2, r1
700025de:	6104      	str	r4, [r0, #16]
700025e0:	f8d9 4000 	ldr.w	r4, [r9]
700025e4:	6142      	str	r2, [r0, #20]
	}

	curr_tick += announce_remaining;
700025e6:	682a      	ldr	r2, [r5, #0]
700025e8:	18d2      	adds	r2, r2, r3
700025ea:	686b      	ldr	r3, [r5, #4]
700025ec:	602a      	str	r2, [r5, #0]
700025ee:	eb43 0301 	adc.w	r3, r3, r1
	return sys_dlist_is_empty(list) ? NULL : list->head;
700025f2:	454c      	cmp	r4, r9
700025f4:	606b      	str	r3, [r5, #4]
	announce_remaining = 0;
700025f6:	f04f 0300 	mov.w	r3, #0
700025fa:	f8ca 3000 	str.w	r3, [sl]
700025fe:	d024      	beq.n	7000264a <sys_clock_announce+0x11e>
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
70002600:	f7fe ffa4 	bl	7000154c <sys_clock_elapsed>
	if ((to == NULL) ||
70002604:	b31c      	cbz	r4, 7000264e <sys_clock_announce+0x122>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
70002606:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
7000260a:	1a1b      	subs	r3, r3, r0
7000260c:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
70002610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
70002614:	f172 0100 	sbcs.w	r1, r2, #0
70002618:	da19      	bge.n	7000264e <sys_clock_announce+0x122>
		ret = MAX(0, to->dticks - ticks_elapsed);
7000261a:	2a00      	cmp	r2, #0
7000261c:	bfac      	ite	ge
7000261e:	4618      	movge	r0, r3
70002620:	2000      	movlt	r0, #0

	sys_clock_set_timeout(next_timeout(), false);
70002622:	2100      	movs	r1, #0
70002624:	f7fe ff62 	bl	700014ec <sys_clock_set_timeout>
	if (key != 0U) {
70002628:	f1b8 0f00 	cmp.w	r8, #0
7000262c:	d100      	bne.n	70002630 <sys_clock_announce+0x104>
7000262e:	b662      	cpsie	i
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif /* CONFIG_TIMESLICING */
}
70002630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	curr_tick += announce_remaining;
70002634:	682a      	ldr	r2, [r5, #0]
70002636:	18d2      	adds	r2, r2, r3
70002638:	602a      	str	r2, [r5, #0]
	announce_remaining = 0;
7000263a:	f04f 0200 	mov.w	r2, #0
7000263e:	f8ca 2000 	str.w	r2, [sl]
	curr_tick += announce_remaining;
70002642:	686a      	ldr	r2, [r5, #4]
70002644:	eb42 72e3 	adc.w	r2, r2, r3, asr #31
70002648:	606a      	str	r2, [r5, #4]
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
7000264a:	f7fe ff7f 	bl	7000154c <sys_clock_elapsed>
		ret = MAX_WAIT;
7000264e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
70002652:	e7e6      	b.n	70002622 <sys_clock_announce+0xf6>
	announce_remaining = 0;
70002654:	f8ca 0000 	str.w	r0, [sl]
	curr_tick += announce_remaining;
70002658:	f644 72a0 	movw	r2, #20384	; 0x4fa0
7000265c:	f2c7 0200 	movt	r2, #28672	; 0x7000
70002660:	e9d2 1000 	ldrd	r1, r0, [r2]
70002664:	18c9      	adds	r1, r1, r3
70002666:	eb40 70e3 	adc.w	r0, r0, r3, asr #31
7000266a:	e9c2 1000 	strd	r1, r0, [r2]
7000266e:	e7ec      	b.n	7000264a <sys_clock_announce+0x11e>

70002670 <sys_clock_tick_get_32>:
	}
	return t;
}

uint32_t sys_clock_tick_get_32(void)
{
70002670:	b510      	push	{r4, lr}
	__asm__ volatile(
70002672:	f3ef 8400 	mrs	r4, CPSR
70002676:	f004 0480 	and.w	r4, r4, #128	; 0x80
7000267a:	b672      	cpsid	i
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
7000267c:	f247 7348 	movw	r3, #30536	; 0x7748
70002680:	2000      	movs	r0, #0
70002682:	f2c7 0300 	movt	r3, #28672	; 0x7000
70002686:	681b      	ldr	r3, [r3, #0]
70002688:	b90b      	cbnz	r3, 7000268e <sys_clock_tick_get_32+0x1e>
7000268a:	f7fe ff5f 	bl	7000154c <sys_clock_elapsed>
		t = curr_tick + elapsed();
7000268e:	f644 73a0 	movw	r3, #20384	; 0x4fa0
70002692:	f2c7 0300 	movt	r3, #28672	; 0x7000
70002696:	681b      	ldr	r3, [r3, #0]
70002698:	18c0      	adds	r0, r0, r3
	if (key != 0U) {
7000269a:	b904      	cbnz	r4, 7000269e <sys_clock_tick_get_32+0x2e>
7000269c:	b662      	cpsie	i
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
#else
	return (uint32_t)curr_tick;
#endif /* CONFIG_TICKLESS_KERNEL */
}
7000269e:	bd10      	pop	{r4, pc}

700026a0 <signal_poll_event.constprop.0>:
}
#include <zephyr/syscalls/k_poll_mrsh.c>
#endif /* CONFIG_USERSPACE */

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
700026a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
	struct z_poller *poller = event->poller;
700026a4:	6886      	ldr	r6, [r0, #8]
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
700026a6:	4604      	mov	r4, r0
700026a8:	460d      	mov	r5, r1
	int retcode = 0;

	if (poller != NULL) {
700026aa:	b136      	cbz	r6, 700026ba <signal_poll_event.constprop.0+0x1a>
		if (poller->mode == MODE_POLL) {
700026ac:	7873      	ldrb	r3, [r6, #1]
700026ae:	2b01      	cmp	r3, #1
700026b0:	d022      	beq.n	700026f8 <signal_poll_event.constprop.0+0x58>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
700026b2:	2b02      	cmp	r3, #2
700026b4:	d00c      	beq.n	700026d0 <signal_poll_event.constprop.0+0x30>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
700026b6:	2300      	movs	r3, #0
700026b8:	7033      	strb	r3, [r6, #0]
	event->state |= state;
700026ba:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
700026bc:	2000      	movs	r0, #0
700026be:	60a0      	str	r0, [r4, #8]
	event->state |= state;
700026c0:	f3c3 3286 	ubfx	r2, r3, #14, #7
700026c4:	4315      	orrs	r5, r2
700026c6:	f365 3394 	bfi	r3, r5, #14, #7
700026ca:	60e3      	str	r3, [r4, #12]
		}
	}

	set_event_ready(event, state);
	return retcode;
}
700026cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
700026d0:	7833      	ldrb	r3, [r6, #0]
700026d2:	2b00      	cmp	r3, #0
700026d4:	d0ef      	beq.n	700026b6 <signal_poll_event.constprop.0+0x16>
700026d6:	f856 7c04 	ldr.w	r7, [r6, #-4]
700026da:	2f00      	cmp	r7, #0
700026dc:	d0eb      	beq.n	700026b6 <signal_poll_event.constprop.0+0x16>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
700026de:	f106 0014 	add.w	r0, r6, #20
700026e2:	f7ff fefb 	bl	700024dc <z_abort_timeout>
		twork->poll_result = 0;
700026e6:	2300      	movs	r3, #0
		z_work_submit_to_queue(work_q, &twork->work);
700026e8:	4638      	mov	r0, r7
		z_abort_timeout(&twork->timeout);
700026ea:	f1a6 0814 	sub.w	r8, r6, #20
		twork->poll_result = 0;
700026ee:	62f3      	str	r3, [r6, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
700026f0:	4641      	mov	r1, r8
700026f2:	f000 f977 	bl	700029e4 <z_work_submit_to_queue>
700026f6:	e7de      	b.n	700026b6 <signal_poll_event.constprop.0+0x16>
	if (!z_is_thread_pending(thread)) {
700026f8:	f816 3c53 	ldrb.w	r3, [r6, #-83]
700026fc:	079a      	lsls	r2, r3, #30
700026fe:	d5da      	bpl.n	700026b6 <signal_poll_event.constprop.0+0x16>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
70002700:	f1a6 0760 	sub.w	r7, r6, #96	; 0x60
	z_unpend_thread(thread);
70002704:	4638      	mov	r0, r7
70002706:	f7ff fc97 	bl	70002038 <z_unpend_thread>
	arch_thread_return_value_set(thread,
7000270a:	2d08      	cmp	r5, #8
7000270c:	bf14      	ite	ne
7000270e:	2300      	movne	r3, #0
70002710:	f06f 0303 	mvneq.w	r3, #3
70002714:	6133      	str	r3, [r6, #16]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
70002716:	f816 3c53 	ldrb.w	r3, [r6, #-83]
7000271a:	06db      	lsls	r3, r3, #27
7000271c:	d1cb      	bne.n	700026b6 <signal_poll_event.constprop.0+0x16>
7000271e:	f856 3c48 	ldr.w	r3, [r6, #-72]
70002722:	2b00      	cmp	r3, #0
70002724:	d1c7      	bne.n	700026b6 <signal_poll_event.constprop.0+0x16>
	z_ready_thread(thread);
70002726:	4638      	mov	r0, r7
70002728:	f7ff fbca 	bl	70001ec0 <z_ready_thread>
	return 0;
7000272c:	e7c3      	b.n	700026b6 <signal_poll_event.constprop.0+0x16>
7000272e:	bf00      	nop

70002730 <z_handle_obj_poll_events>:
{
70002730:	4603      	mov	r3, r0
70002732:	b510      	push	{r4, lr}
	__asm__ volatile(
70002734:	f3ef 8400 	mrs	r4, CPSR
70002738:	f004 0480 	and.w	r4, r4, #128	; 0x80
7000273c:	b672      	cpsid	i
	return list->head == list;
7000273e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
70002740:	4283      	cmp	r3, r0
70002742:	d008      	beq.n	70002756 <z_handle_obj_poll_events+0x26>
	sys_dnode_t *const next = node->next;
70002744:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
70002748:	6013      	str	r3, [r2, #0]
	next->prev = prev;
7000274a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
7000274c:	2300      	movs	r3, #0
7000274e:	6003      	str	r3, [r0, #0]
70002750:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
70002752:	f7ff ffa5 	bl	700026a0 <signal_poll_event.constprop.0>
	if (key != 0U) {
70002756:	b904      	cbnz	r4, 7000275a <z_handle_obj_poll_events+0x2a>
70002758:	b662      	cpsie	i
}
7000275a:	bd10      	pop	{r4, pc}

7000275c <boot_banner>:
	  */
	printk("\x1b[3J\x1b[2J\x1b[H");
#endif /* CONFIG_BOOT_CLEAR_SCREEN */

#ifdef CONFIG_BOOT_BANNER
	printk("*** " CONFIG_BOOT_BANNER_STRING " " BANNER_VERSION BANNER_POSTFIX " ***\n");
7000275c:	f644 00b4 	movw	r0, #18612	; 0x48b4
70002760:	f2c7 0000 	movt	r0, #28672	; 0x7000
70002764:	f7fd bef0 	b.w	70000548 <printk>

70002768 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, heap);
}

static int statics_init(void)
{
70002768:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, heap) {
7000276a:	f64b 442c 	movw	r4, #48172	; 0xbc2c
7000276e:	f64b 452c 	movw	r5, #48172	; 0xbc2c
70002772:	f2c7 0400 	movt	r4, #28672	; 0x7000
70002776:	f2c7 0500 	movt	r5, #28672	; 0x7000
7000277a:	42ac      	cmp	r4, r5
7000277c:	d20b      	bcs.n	70002796 <statics_init+0x2e>
	sys_heap_init(&heap->heap, mem, bytes);
7000277e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
70002782:	f104 030c 	add.w	r3, r4, #12
70002786:	4620      	mov	r0, r4
	STRUCT_SECTION_FOREACH(k_heap, heap) {
70002788:	3414      	adds	r4, #20
	list->head = (sys_dnode_t *)list;
7000278a:	601b      	str	r3, [r3, #0]
7000278c:	605b      	str	r3, [r3, #4]
	sys_heap_init(&heap->heap, mem, bytes);
7000278e:	f7fd fe97 	bl	700004c0 <sys_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, heap) {
70002792:	42ac      	cmp	r4, r5
70002794:	d3f3      	bcc.n	7000277e <statics_init+0x16>
		{
			k_heap_init(heap, heap->heap.init_mem, heap->heap.init_bytes);
		}
	}
	return 0;
}
70002796:	2000      	movs	r0, #0
70002798:	bd38      	pop	{r3, r4, r5, pc}
7000279a:	bf00      	nop

7000279c <k_sys_work_q_init>:

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
	struct k_work_queue_config cfg = {
7000279c:	f244 61bc 	movw	r1, #18108	; 0x46bc
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
		.essential = true,
	};

	k_work_queue_start(&k_sys_work_q,
700027a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct k_work_queue_config cfg = {
700027a4:	f2c7 0100 	movt	r1, #28672	; 0x7000
{
700027a8:	b510      	push	{r4, lr}
	struct k_work_queue_config cfg = {
700027aa:	c903      	ldmia	r1, {r0, r1}
{
700027ac:	b084      	sub	sp, #16
	k_work_queue_start(&k_sys_work_q,
700027ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
700027b2:	ac02      	add	r4, sp, #8
	k_work_queue_start(&k_sys_work_q,
700027b4:	9400      	str	r4, [sp, #0]
	struct k_work_queue_config cfg = {
700027b6:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_queue_start(&k_sys_work_q,
700027ba:	f24b 7150 	movw	r1, #46928	; 0xb750
700027be:	f644 70a8 	movw	r0, #20392	; 0x4fa8
700027c2:	f2c7 0100 	movt	r1, #28672	; 0x7000
700027c6:	f2c7 0000 	movt	r0, #28672	; 0x7000
700027ca:	f000 f91b 	bl	70002a04 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
700027ce:	2000      	movs	r0, #0
700027d0:	b004      	add	sp, #16
700027d2:	bd10      	pop	{r4, pc}

700027d4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
700027d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
700027d8:	f245 0640 	movw	r6, #20544	; 0x5040
700027dc:	b084      	sub	sp, #16
700027de:	4605      	mov	r5, r0
700027e0:	f2c7 0600 	movt	r6, #28672	; 0x7000
	return node->next;
700027e4:	2700      	movs	r7, #0
	__asm__ volatile(
700027e6:	f3ef 8800 	mrs	r8, CPSR
700027ea:	f008 0880 	and.w	r8, r8, #128	; 0x80
700027ee:	b672      	cpsid	i
	return list->head;
700027f0:	6fac      	ldr	r4, [r5, #120]	; 0x78
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
700027f2:	2c00      	cmp	r4, #0
700027f4:	d060      	beq.n	700028b8 <work_queue_main+0xe4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
700027f6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	return node->next;
700027f8:	6823      	ldr	r3, [r4, #0]
	list->head = node;
700027fa:	67ab      	str	r3, [r5, #120]	; 0x78
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
700027fc:	4294      	cmp	r4, r2
	list->tail = node;
700027fe:	bf08      	it	eq
70002800:	67eb      	streq	r3, [r5, #124]	; 0x7c
	*flagp |= BIT(bit);
70002802:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
70002806:	f043 0302 	orr.w	r3, r3, #2
7000280a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
	*flagp &= ~BIT(bit);
7000280e:	68e3      	ldr	r3, [r4, #12]
			 * of struct k_work object that has been placed at address NULL,
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
70002810:	6862      	ldr	r2, [r4, #4]
	*flagp &= ~BIT(bit);
70002812:	f023 0304 	bic.w	r3, r3, #4
70002816:	f043 0301 	orr.w	r3, r3, #1
7000281a:	60e3      	str	r3, [r4, #12]
	if (key != 0U) {
7000281c:	f1b8 0f00 	cmp.w	r8, #0
70002820:	d100      	bne.n	70002824 <work_queue_main+0x50>
70002822:	b662      	cpsie	i
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
70002824:	4620      	mov	r0, r4
70002826:	4790      	blx	r2
	__asm__ volatile(
70002828:	f3ef 8800 	mrs	r8, CPSR
7000282c:	f008 0880 	and.w	r8, r8, #128	; 0x80
70002830:	b672      	cpsid	i
	*flagp &= ~BIT(bit);
70002832:	68e2      	ldr	r2, [r4, #12]
70002834:	f022 0301 	bic.w	r3, r2, #1
		 * yield to prevent starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_FLUSHING_BIT)) {
70002838:	06d1      	lsls	r1, r2, #27
	*flagp &= ~BIT(bit);
7000283a:	bf58      	it	pl
7000283c:	60e3      	strpl	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_FLUSHING_BIT)) {
7000283e:	d432      	bmi.n	700028a6 <work_queue_main+0xd2>
			finalize_flush_locked(work);
		}
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
70002840:	079a      	lsls	r2, r3, #30
70002842:	d410      	bmi.n	70002866 <work_queue_main+0x92>
	*flagp &= ~BIT(bit);
70002844:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
70002848:	f023 0302 	bic.w	r3, r3, #2
	return (*flagp & BIT(bit)) != 0U;
7000284c:	f3c3 2200 	ubfx	r2, r3, #8, #1
	*flagp &= ~BIT(bit);
70002850:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
	if (key != 0U) {
70002854:	f1b8 0f00 	cmp.w	r8, #0
70002858:	d100      	bne.n	7000285c <work_queue_main+0x88>
7000285a:	b662      	cpsie	i
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
7000285c:	2a00      	cmp	r2, #0
7000285e:	d1c2      	bne.n	700027e6 <work_queue_main+0x12>
70002860:	f7ff fc7a 	bl	70002158 <z_impl_k_yield>
}
70002864:	e7bf      	b.n	700027e6 <work_queue_main+0x12>
	return list->head;
70002866:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
70002868:	f023 0302 	bic.w	r3, r3, #2
7000286c:	60e3      	str	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
7000286e:	2800      	cmp	r0, #0
70002870:	d0e8      	beq.n	70002844 <work_queue_main+0x70>
		if (wc->work == work) {
70002872:	6842      	ldr	r2, [r0, #4]
	return node->next;
70002874:	2100      	movs	r1, #0
70002876:	6803      	ldr	r3, [r0, #0]
70002878:	4294      	cmp	r4, r2
7000287a:	d007      	beq.n	7000288c <work_queue_main+0xb8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
7000287c:	2b00      	cmp	r3, #0
7000287e:	d0e1      	beq.n	70002844 <work_queue_main+0x70>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
70002880:	4601      	mov	r1, r0
70002882:	4618      	mov	r0, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
70002884:	681b      	ldr	r3, [r3, #0]
		if (wc->work == work) {
70002886:	6842      	ldr	r2, [r0, #4]
70002888:	4294      	cmp	r4, r2
7000288a:	d1f7      	bne.n	7000287c <work_queue_main+0xa8>
	return node->next;
7000288c:	6803      	ldr	r3, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
7000288e:	2900      	cmp	r1, #0
70002890:	d042      	beq.n	70002918 <work_queue_main+0x144>
	parent->next = child;
70002892:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
70002894:	6873      	ldr	r3, [r6, #4]
70002896:	4283      	cmp	r3, r0
	list->tail = node;
70002898:	bf08      	it	eq
7000289a:	6071      	streq	r1, [r6, #4]
	parent->next = child;
7000289c:	f840 7b08 	str.w	r7, [r0], #8
	z_impl_k_sem_give(sem);
700028a0:	f7ff f8fc 	bl	70001a9c <z_impl_k_sem_give>
}
700028a4:	e7ce      	b.n	70002844 <work_queue_main+0x70>
	*flagp &= ~BIT(bit);
700028a6:	f022 0211 	bic.w	r2, r2, #17
700028aa:	60e2      	str	r2, [r4, #12]
	z_impl_k_sem_give(sem);
700028ac:	f104 0010 	add.w	r0, r4, #16
700028b0:	f7ff f8f4 	bl	70001a9c <z_impl_k_sem_give>
	return (*flagp & BIT(bit)) != 0U;
700028b4:	68e3      	ldr	r3, [r4, #12]
};
700028b6:	e7c3      	b.n	70002840 <work_queue_main+0x6c>
	return (*flagp & BIT(bit)) != 0U;
700028b8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
	*flagp &= ~BIT(bit);
700028bc:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
700028c0:	075c      	lsls	r4, r3, #29
	*flagp &= ~BIT(bit);
700028c2:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
		} else if (flag_test_and_clear(&queue->flags,
700028c6:	f3c3 0180 	ubfx	r1, r3, #2, #1
700028ca:	d40a      	bmi.n	700028e2 <work_queue_main+0x10e>
		} else if (flag_test(&queue->flags, K_WORK_QUEUE_STOP_BIT)) {
700028cc:	06d0      	lsls	r0, r2, #27
700028ce:	d511      	bpl.n	700028f4 <work_queue_main+0x120>
	*flagp = flags;
700028d0:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
700028d4:	f1b8 0f00 	cmp.w	r8, #0
700028d8:	d100      	bne.n	700028dc <work_queue_main+0x108>
700028da:	b662      	cpsie	i
			k_yield();
		}
	}
}
700028dc:	b004      	add	sp, #16
700028de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
700028e2:	f105 0488 	add.w	r4, r5, #136	; 0x88
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
700028e6:	2200      	movs	r2, #0
700028e8:	2101      	movs	r1, #1
700028ea:	4620      	mov	r0, r4
700028ec:	f7ff fd22 	bl	70002334 <z_sched_wake>
700028f0:	2800      	cmp	r0, #0
700028f2:	d1f8      	bne.n	700028e6 <work_queue_main+0x112>
					   K_FOREVER, NULL);
700028f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
700028f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			(void)z_sched_wait(&lock, key, &queue->notifyq,
700028fc:	f247 704c 	movw	r0, #30540	; 0x774c
70002900:	4641      	mov	r1, r8
70002902:	e9cd 2300 	strd	r2, r3, [sp]
70002906:	2300      	movs	r3, #0
70002908:	f105 0280 	add.w	r2, r5, #128	; 0x80
7000290c:	9302      	str	r3, [sp, #8]
7000290e:	f2c7 0000 	movt	r0, #28672	; 0x7000
70002912:	f7ff fd3d 	bl	70002390 <z_sched_wait>
			continue;
70002916:	e766      	b.n	700027e6 <work_queue_main+0x12>
Z_GENLIST_REMOVE(slist, snode)
70002918:	6872      	ldr	r2, [r6, #4]
	list->head = node;
7000291a:	6033      	str	r3, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
7000291c:	4282      	cmp	r2, r0
	list->tail = node;
7000291e:	bf08      	it	eq
70002920:	6073      	streq	r3, [r6, #4]
70002922:	e7bb      	b.n	7000289c <work_queue_main+0xc8>

70002924 <submit_to_queue_locked>:
{
70002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
70002926:	68c3      	ldr	r3, [r0, #12]
{
70002928:	460d      	mov	r5, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
7000292a:	079a      	lsls	r2, r3, #30
7000292c:	f3c3 0640 	ubfx	r6, r3, #1, #1
70002930:	d407      	bmi.n	70002942 <submit_to_queue_locked+0x1e>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
70002932:	075f      	lsls	r7, r3, #29
	return (*flagp & BIT(bit)) != 0U;
70002934:	f3c3 0280 	ubfx	r2, r3, #2, #1
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
70002938:	d506      	bpl.n	70002948 <submit_to_queue_locked+0x24>
		*queuep = NULL;
7000293a:	2300      	movs	r3, #0
}
7000293c:	4630      	mov	r0, r6
		*queuep = NULL;
7000293e:	602b      	str	r3, [r5, #0]
}
70002940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = -EBUSY;
70002942:	f06f 060f 	mvn.w	r6, #15
70002946:	e7f8      	b.n	7000293a <submit_to_queue_locked+0x16>
		if (*queuep == NULL) {
70002948:	680f      	ldr	r7, [r1, #0]
7000294a:	4604      	mov	r4, r0
7000294c:	2f00      	cmp	r7, #0
7000294e:	d032      	beq.n	700029b6 <submit_to_queue_locked+0x92>
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
70002950:	07db      	lsls	r3, r3, #31
		ret = 1;
70002952:	bf58      	it	pl
70002954:	2601      	movpl	r6, #1
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
70002956:	d504      	bpl.n	70002962 <submit_to_queue_locked+0x3e>
			*queuep = work->queue;
70002958:	68a7      	ldr	r7, [r4, #8]
			ret = 2;
7000295a:	2602      	movs	r6, #2
			*queuep = work->queue;
7000295c:	602f      	str	r7, [r5, #0]
	if (queue == NULL) {
7000295e:	2f00      	cmp	r7, #0
70002960:	d03d      	beq.n	700029de <submit_to_queue_locked+0xba>
70002962:	f247 7328 	movw	r3, #30504	; 0x7728
70002966:	f2c7 0300 	movt	r3, #28672	; 0x7000
	bool chained = (arch_current_thread() == &queue->thread) && !k_is_in_isr();
7000296a:	689b      	ldr	r3, [r3, #8]
7000296c:	42bb      	cmp	r3, r7
7000296e:	d02d      	beq.n	700029cc <submit_to_queue_locked+0xa8>
	return (*flagp & BIT(bit)) != 0U;
70002970:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
70002974:	f3c0 0380 	ubfx	r3, r0, #2, #1
70002978:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
7000297c:	07c0      	lsls	r0, r0, #31
7000297e:	d52b      	bpl.n	700029d8 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
70002980:	f082 0201 	eor.w	r2, r2, #1
70002984:	4213      	tst	r3, r2
70002986:	d1dc      	bne.n	70002942 <submit_to_queue_locked+0x1e>
	} else if (plugged && !draining) {
70002988:	f083 0301 	eor.w	r3, r3, #1
7000298c:	4019      	ands	r1, r3
7000298e:	d1d8      	bne.n	70002942 <submit_to_queue_locked+0x1e>
	parent->next = child;
70002990:	6021      	str	r1, [r4, #0]
	return list->tail;
70002992:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
70002994:	b1bb      	cbz	r3, 700029c6 <submit_to_queue_locked+0xa2>
	parent->next = child;
70002996:	601c      	str	r4, [r3, #0]
	list->tail = node;
70002998:	67fc      	str	r4, [r7, #124]	; 0x7c
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
7000299a:	2200      	movs	r2, #0
7000299c:	f107 0080 	add.w	r0, r7, #128	; 0x80
700029a0:	4611      	mov	r1, r2
700029a2:	f7ff fcc7 	bl	70002334 <z_sched_wake>
	*flagp |= BIT(bit);
700029a6:	68e3      	ldr	r3, [r4, #12]
}
700029a8:	4630      	mov	r0, r6
	*flagp |= BIT(bit);
700029aa:	f043 0304 	orr.w	r3, r3, #4
700029ae:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
700029b0:	682b      	ldr	r3, [r5, #0]
700029b2:	60a3      	str	r3, [r4, #8]
}
700029b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*queuep = work->queue;
700029b6:	6887      	ldr	r7, [r0, #8]
700029b8:	600f      	str	r7, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
700029ba:	68c3      	ldr	r3, [r0, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
700029bc:	07de      	lsls	r6, r3, #31
		ret = 1;
700029be:	bf58      	it	pl
700029c0:	2601      	movpl	r6, #1
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
700029c2:	d5cc      	bpl.n	7000295e <submit_to_queue_locked+0x3a>
700029c4:	e7c8      	b.n	70002958 <submit_to_queue_locked+0x34>
	list->head = node;
700029c6:	67bc      	str	r4, [r7, #120]	; 0x78
700029c8:	67fc      	str	r4, [r7, #124]	; 0x7c
	if (queue != NULL) {
700029ca:	e7e6      	b.n	7000299a <submit_to_queue_locked+0x76>
	bool chained = (arch_current_thread() == &queue->thread) && !k_is_in_isr();
700029cc:	f7ff f89c 	bl	70001b08 <k_is_in_isr>
700029d0:	f080 0201 	eor.w	r2, r0, #1
700029d4:	b2d2      	uxtb	r2, r2
700029d6:	e7cb      	b.n	70002970 <submit_to_queue_locked+0x4c>
		ret = -ENODEV;
700029d8:	f06f 0612 	mvn.w	r6, #18
700029dc:	e7ad      	b.n	7000293a <submit_to_queue_locked+0x16>
		return -EINVAL;
700029de:	f06f 0615 	mvn.w	r6, #21
700029e2:	e7aa      	b.n	7000293a <submit_to_queue_locked+0x16>

700029e4 <z_work_submit_to_queue>:
{
700029e4:	b510      	push	{r4, lr}
700029e6:	b082      	sub	sp, #8
700029e8:	9001      	str	r0, [sp, #4]
700029ea:	4608      	mov	r0, r1
	__asm__ volatile(
700029ec:	f3ef 8400 	mrs	r4, CPSR
700029f0:	f004 0480 	and.w	r4, r4, #128	; 0x80
700029f4:	b672      	cpsid	i
	int ret = submit_to_queue_locked(work, &queue);
700029f6:	a901      	add	r1, sp, #4
700029f8:	f7ff ff94 	bl	70002924 <submit_to_queue_locked>
	if (key != 0U) {
700029fc:	b904      	cbnz	r4, 70002a00 <z_work_submit_to_queue+0x1c>
700029fe:	b662      	cpsie	i
}
70002a00:	b002      	add	sp, #8
70002a02:	bd10      	pop	{r4, pc}

70002a04 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
70002a04:	b5f0      	push	{r4, r5, r6, r7, lr}
70002a06:	4604      	mov	r4, r0
70002a08:	b089      	sub	sp, #36	; 0x24
	list->head = NULL;
70002a0a:	2000      	movs	r0, #0
70002a0c:	67a0      	str	r0, [r4, #120]	; 0x78
70002a0e:	67e0      	str	r0, [r4, #124]	; 0x7c
	sys_dlist_init(&w->waitq);
70002a10:	f104 0080 	add.w	r0, r4, #128	; 0x80
70002a14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->tail = (sys_dnode_t *)list;
70002a16:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
70002a1a:	f104 0088 	add.w	r0, r4, #136	; 0x88
70002a1e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
	__ASSERT_NO_MSG(queue);
	__ASSERT_NO_MSG(stack);
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
	uint32_t flags = K_WORK_QUEUE_STARTED;
70002a22:	2001      	movs	r0, #1

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
70002a24:	b12d      	cbz	r5, 70002a32 <k_work_queue_start+0x2e>
70002a26:	792e      	ldrb	r6, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
70002a28:	f240 1001 	movw	r0, #257	; 0x101
70002a2c:	2e00      	cmp	r6, #0
70002a2e:	bf08      	it	eq
70002a30:	2001      	moveq	r0, #1
	*flagp = flags;
70002a32:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
70002a36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
70002a3a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
70002a3e:	9303      	str	r3, [sp, #12]
70002a40:	2000      	movs	r0, #0
70002a42:	e9cd 6706 	strd	r6, r7, [sp, #24]
70002a46:	f242 73d5 	movw	r3, #10197	; 0x27d5
70002a4a:	9004      	str	r0, [sp, #16]
70002a4c:	f2c7 0300 	movt	r3, #28672	; 0x7000
70002a50:	e9cd 0001 	strd	r0, r0, [sp, #4]
70002a54:	4620      	mov	r0, r4
70002a56:	9400      	str	r4, [sp, #0]
70002a58:	f7ff f894 	bl	70001b84 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
70002a5c:	b155      	cbz	r5, 70002a74 <k_work_queue_start+0x70>
70002a5e:	6829      	ldr	r1, [r5, #0]
70002a60:	b111      	cbz	r1, 70002a68 <k_work_queue_start+0x64>
	return z_impl_k_thread_name_set(thread, str);
70002a62:	4620      	mov	r0, r4
70002a64:	f7ff f85a 	bl	70001b1c <z_impl_k_thread_name_set>
		k_thread_name_set(&queue->thread, cfg->name);
	}

	if ((cfg != NULL) && (cfg->essential)) {
70002a68:	796b      	ldrb	r3, [r5, #5]
70002a6a:	b11b      	cbz	r3, 70002a74 <k_work_queue_start+0x70>
		queue->thread.base.user_options |= K_ESSENTIAL;
70002a6c:	7b23      	ldrb	r3, [r4, #12]
70002a6e:	f043 0301 	orr.w	r3, r3, #1
70002a72:	7323      	strb	r3, [r4, #12]
	z_impl_k_wakeup(thread);
70002a74:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
70002a76:	b009      	add	sp, #36	; 0x24
70002a78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
70002a7c:	f7ff bc12 	b.w	700022a4 <z_impl_k_wakeup>

70002a80 <memcpy>:
  long *aligned_dst;
  const long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
70002a80:	2a0f      	cmp	r2, #15
70002a82:	d913      	bls.n	70002aac <memcpy+0x2c>
70002a84:	ea40 0301 	orr.w	r3, r0, r1
70002a88:	f013 0303 	ands.w	r3, r3, #3
  char *dst = dst0;
70002a8c:	bf1c      	itt	ne
70002a8e:	4603      	movne	r3, r0
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
70002a90:	f102 3cff 	addne.w	ip, r2, #4294967295	; 0xffffffff
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
70002a94:	d010      	beq.n	70002ab8 <memcpy+0x38>
70002a96:	f10c 0c01 	add.w	ip, ip, #1
70002a9a:	3b01      	subs	r3, #1
70002a9c:	448c      	add	ip, r1
    *dst++ = *src++;
70002a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
70002aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
  while (len0--)
70002aa6:	458c      	cmp	ip, r1
70002aa8:	d1f9      	bne.n	70002a9e <memcpy+0x1e>
70002aaa:	4770      	bx	lr
  char *dst = dst0;
70002aac:	4603      	mov	r3, r0
  while (len0--)
70002aae:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
70002ab2:	2a00      	cmp	r2, #0
70002ab4:	d1ef      	bne.n	70002a96 <memcpy+0x16>

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
70002ab6:	4770      	bx	lr
{
70002ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
70002aba:	4684      	mov	ip, r0
70002abc:	f1a2 0710 	sub.w	r7, r2, #16
70002ac0:	468e      	mov	lr, r1
70002ac2:	093f      	lsrs	r7, r7, #4
70002ac4:	3701      	adds	r7, #1
          *aligned_dst++ = *aligned_src++;
70002ac6:	f8de 4008 	ldr.w	r4, [lr, #8]
70002aca:	3301      	adds	r3, #1
70002acc:	f8de 6000 	ldr.w	r6, [lr]
70002ad0:	429f      	cmp	r7, r3
70002ad2:	f8de 5004 	ldr.w	r5, [lr, #4]
70002ad6:	f10c 0c10 	add.w	ip, ip, #16
70002ada:	f84c 4c08 	str.w	r4, [ip, #-8]
70002ade:	f10e 0e10 	add.w	lr, lr, #16
70002ae2:	f85e 4c04 	ldr.w	r4, [lr, #-4]
70002ae6:	f84c 6c10 	str.w	r6, [ip, #-16]
70002aea:	f84c 5c0c 	str.w	r5, [ip, #-12]
70002aee:	f84c 4c04 	str.w	r4, [ip, #-4]
      while (len0 >= BIGBLOCKSIZE)
70002af2:	d8e8      	bhi.n	70002ac6 <memcpy+0x46>
      while (len0 >= LITTLEBLOCKSIZE)
70002af4:	f012 0f0c 	tst.w	r2, #12
          len0 -= BIGBLOCKSIZE;
70002af8:	f002 050f 	and.w	r5, r2, #15
          *aligned_dst++ = *aligned_src++;
70002afc:	eb01 1107 	add.w	r1, r1, r7, lsl #4
          len0 -= BIGBLOCKSIZE;
70002b00:	bf08      	it	eq
70002b02:	462a      	moveq	r2, r5
          *aligned_dst++ = *aligned_src++;
70002b04:	eb00 1307 	add.w	r3, r0, r7, lsl #4
      while (len0 >= LITTLEBLOCKSIZE)
70002b08:	d013      	beq.n	70002b32 <memcpy+0xb2>
70002b0a:	3d04      	subs	r5, #4
70002b0c:	f025 0c03 	bic.w	ip, r5, #3
70002b10:	1f1c      	subs	r4, r3, #4
70002b12:	08ad      	lsrs	r5, r5, #2
          *aligned_dst++ = *aligned_src++;
70002b14:	460e      	mov	r6, r1
70002b16:	449c      	add	ip, r3
          *aligned_dst++ = *aligned_src++;
70002b18:	f856 7b04 	ldr.w	r7, [r6], #4
70002b1c:	f844 7f04 	str.w	r7, [r4, #4]!
      while (len0 >= LITTLEBLOCKSIZE)
70002b20:	4564      	cmp	r4, ip
70002b22:	d1f9      	bne.n	70002b18 <memcpy+0x98>
70002b24:	1c6c      	adds	r4, r5, #1
          len0 -= LITTLEBLOCKSIZE;
70002b26:	f002 0203 	and.w	r2, r2, #3
          *aligned_dst++ = *aligned_src++;
70002b2a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
70002b2e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  while (len0--)
70002b32:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
70002b36:	f10c 0c01 	add.w	ip, ip, #1
70002b3a:	3b01      	subs	r3, #1
70002b3c:	448c      	add	ip, r1
70002b3e:	b12a      	cbz	r2, 70002b4c <memcpy+0xcc>
    *dst++ = *src++;
70002b40:	f811 2b01 	ldrb.w	r2, [r1], #1
70002b44:	f803 2f01 	strb.w	r2, [r3, #1]!
  while (len0--)
70002b48:	458c      	cmp	ip, r1
70002b4a:	d1f9      	bne.n	70002b40 <memcpy+0xc0>
}
70002b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
70002b4e:	bf00      	nop

70002b50 <memset>:
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
70002b50:	0783      	lsls	r3, r0, #30
{
70002b52:	b530      	push	{r4, r5, lr}
  while (UNALIGNED (s))
70002b54:	d04a      	beq.n	70002bec <memset+0x9c>
    {
      if (n--)
70002b56:	1e54      	subs	r4, r2, #1
70002b58:	2a00      	cmp	r2, #0
70002b5a:	d041      	beq.n	70002be0 <memset+0x90>
  char *s = (char *) m;
70002b5c:	4603      	mov	r3, r0
        *s++ = (char) c;
70002b5e:	b2ca      	uxtb	r2, r1
70002b60:	e001      	b.n	70002b66 <memset+0x16>
      if (n--)
70002b62:	3c01      	subs	r4, #1
70002b64:	d33c      	bcc.n	70002be0 <memset+0x90>
        *s++ = (char) c;
70002b66:	f803 2b01 	strb.w	r2, [r3], #1
  while (UNALIGNED (s))
70002b6a:	079d      	lsls	r5, r3, #30
70002b6c:	d1f9      	bne.n	70002b62 <memset+0x12>
      else
        return m;
    }

  if (!TOO_SMALL (n))
70002b6e:	2c03      	cmp	r4, #3
70002b70:	d92f      	bls.n	70002bd2 <memset+0x82>
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
70002b72:	b2cd      	uxtb	r5, r1
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
70002b74:	2c0f      	cmp	r4, #15
70002b76:	eb05 2505 	add.w	r5, r5, r5, lsl #8
70002b7a:	eb05 4505 	add.w	r5, r5, r5, lsl #16
70002b7e:	d938      	bls.n	70002bf2 <memset+0xa2>
70002b80:	f1a4 0210 	sub.w	r2, r4, #16
70002b84:	f022 0c0f 	bic.w	ip, r2, #15
70002b88:	f103 0e10 	add.w	lr, r3, #16
70002b8c:	44e6      	add	lr, ip
70002b8e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
70002b92:	461a      	mov	r2, r3
        {
          *aligned_addr++ = buffer;
70002b94:	6015      	str	r5, [r2, #0]
      while (n >= LBLOCKSIZE*4)
70002b96:	3210      	adds	r2, #16
          *aligned_addr++ = buffer;
70002b98:	f842 5c0c 	str.w	r5, [r2, #-12]
70002b9c:	f842 5c08 	str.w	r5, [r2, #-8]
70002ba0:	f842 5c04 	str.w	r5, [r2, #-4]
      while (n >= LBLOCKSIZE*4)
70002ba4:	4572      	cmp	r2, lr
70002ba6:	d1f5      	bne.n	70002b94 <memset+0x44>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
70002ba8:	f10c 0201 	add.w	r2, ip, #1
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
70002bac:	f014 0f0c 	tst.w	r4, #12
          *aligned_addr++ = buffer;
70002bb0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
          n -= 4*LBLOCKSIZE;
70002bb4:	f004 0c0f 	and.w	ip, r4, #15
      while (n >= LBLOCKSIZE)
70002bb8:	d013      	beq.n	70002be2 <memset+0x92>
70002bba:	f1ac 0304 	sub.w	r3, ip, #4
70002bbe:	f023 0303 	bic.w	r3, r3, #3
70002bc2:	3304      	adds	r3, #4
70002bc4:	4413      	add	r3, r2
        {
          *aligned_addr++ = buffer;
70002bc6:	f842 5b04 	str.w	r5, [r2], #4
      while (n >= LBLOCKSIZE)
70002bca:	429a      	cmp	r2, r3
70002bcc:	d1fb      	bne.n	70002bc6 <memset+0x76>
          n -= LBLOCKSIZE;
70002bce:	f00c 0403 	and.w	r4, ip, #3
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
70002bd2:	b12c      	cbz	r4, 70002be0 <memset+0x90>
        *s++ = (char) c;
70002bd4:	b2c9      	uxtb	r1, r1
70002bd6:	441c      	add	r4, r3
    *s++ = (char) c;
70002bd8:	f803 1b01 	strb.w	r1, [r3], #1
  while (n--)
70002bdc:	429c      	cmp	r4, r3
70002bde:	d1fb      	bne.n	70002bd8 <memset+0x88>

  return m;
}
70002be0:	bd30      	pop	{r4, r5, pc}
          n -= 4*LBLOCKSIZE;
70002be2:	4664      	mov	r4, ip
          *aligned_addr++ = buffer;
70002be4:	4613      	mov	r3, r2
  while (n--)
70002be6:	2c00      	cmp	r4, #0
70002be8:	d1f4      	bne.n	70002bd4 <memset+0x84>
70002bea:	e7f9      	b.n	70002be0 <memset+0x90>
  char *s = (char *) m;
70002bec:	4603      	mov	r3, r0
  while (UNALIGNED (s))
70002bee:	4614      	mov	r4, r2
70002bf0:	e7bd      	b.n	70002b6e <memset+0x1e>
      while (n >= LBLOCKSIZE*4)
70002bf2:	461a      	mov	r2, r3
70002bf4:	46a4      	mov	ip, r4
70002bf6:	e7e0      	b.n	70002bba <memset+0x6a>

70002bf8 <strnlen>:
strnlen (const char *str,
	size_t n)
{
  const char *start = str;

  while (n-- > 0 && *str)
70002bf8:	4603      	mov	r3, r0
70002bfa:	eb00 0c01 	add.w	ip, r0, r1
70002bfe:	b911      	cbnz	r1, 70002c06 <strnlen+0xe>
70002c00:	e00a      	b.n	70002c18 <strnlen+0x20>
70002c02:	4563      	cmp	r3, ip
70002c04:	d006      	beq.n	70002c14 <strnlen+0x1c>
    str++;
70002c06:	461a      	mov	r2, r3
70002c08:	3301      	adds	r3, #1
  while (n-- > 0 && *str)
70002c0a:	7811      	ldrb	r1, [r2, #0]
70002c0c:	2900      	cmp	r1, #0
70002c0e:	d1f8      	bne.n	70002c02 <strnlen+0xa>

  return str - start;
70002c10:	1a10      	subs	r0, r2, r0
}
70002c12:	4770      	bx	lr
  return str - start;
70002c14:	1a18      	subs	r0, r3, r0
70002c16:	4770      	bx	lr
  while (n-- > 0 && *str)
70002c18:	4608      	mov	r0, r1
70002c1a:	4770      	bx	lr

70002c1c <__ultoa_invert>:
#endif
#endif

static __noinline char *
__ultoa_invert(ultoa_unsigned_t val, char *str, int base)
{
70002c1c:	b570      	push	{r4, r5, r6, lr}
70002c1e:	4684      	mov	ip, r0
	char hex = ('a' - '0' - 10 + 16) - base;
70002c20:	f1c3 0437 	rsb	r4, r3, #55	; 0x37
{
70002c24:	4610      	mov	r0, r2
	char hex = ('a' - '0' - 10 + 16) - base;
70002c26:	b2e2      	uxtb	r2, r4

        base &= 31;
70002c28:	f003 041f 	and.w	r4, r3, #31
    switch(base) {
70002c2c:	2c08      	cmp	r4, #8
        *dig = val & 1;
70002c2e:	fa5f fe8c 	uxtb.w	lr, ip
    switch(base) {
70002c32:	d042      	beq.n	70002cba <__ultoa_invert+0x9e>
70002c34:	2c10      	cmp	r4, #16
	q = (n >> 1) + (n >> 2);
70002c36:	ea4f 035c 	mov.w	r3, ip, lsr #1
70002c3a:	ea4f 069c 	mov.w	r6, ip, lsr #2
70002c3e:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
70002c42:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
70002c46:	ea4f 0591 	mov.w	r5, r1, lsr #2
    switch(base) {
70002c4a:	d04c      	beq.n	70002ce6 <__ultoa_invert+0xca>
70002c4c:	2c02      	cmp	r4, #2
70002c4e:	d042      	beq.n	70002cd6 <__ultoa_invert+0xba>
	q = (n >> 1) + (n >> 2);
70002c50:	199b      	adds	r3, r3, r6
70002c52:	eb45 0551 	adc.w	r5, r5, r1, lsr #1
	q = q + (q >> 4);
70002c56:	0919      	lsrs	r1, r3, #4
70002c58:	ea41 7105 	orr.w	r1, r1, r5, lsl #28
70002c5c:	185b      	adds	r3, r3, r1
70002c5e:	eb45 1515 	adc.w	r5, r5, r5, lsr #4
	q = q + (q >> 8);
70002c62:	0a19      	lsrs	r1, r3, #8
70002c64:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
70002c68:	185b      	adds	r3, r3, r1
70002c6a:	eb45 2515 	adc.w	r5, r5, r5, lsr #8
	q = q + (q >> 16);
70002c6e:	0c19      	lsrs	r1, r3, #16
70002c70:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
70002c74:	185b      	adds	r3, r3, r1
70002c76:	eb45 4515 	adc.w	r5, r5, r5, lsr #16
        q = q + (q >> 32);
70002c7a:	195b      	adds	r3, r3, r5
70002c7c:	f145 0500 	adc.w	r5, r5, #0
	q = q >> 3;
70002c80:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
70002c84:	ea4c 7c45 	orr.w	ip, ip, r5, lsl #29
70002c88:	08e9      	lsrs	r1, r5, #3
	r = (char) (n - (((q << 2) + q) << 1));
70002c8a:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
70002c8e:	ebae 0343 	sub.w	r3, lr, r3, lsl #1
70002c92:	b2db      	uxtb	r3, r3
            r -= 10;
70002c94:	f1a3 050a 	sub.w	r5, r3, #10
        if (r > 9) {
70002c98:	2b09      	cmp	r3, #9
            r -= 10;
70002c9a:	b2ed      	uxtb	r5, r5
        if (r > 9) {
70002c9c:	d914      	bls.n	70002cc8 <__ultoa_invert+0xac>
            q++;
70002c9e:	f11c 0c01 	adds.w	ip, ip, #1
70002ca2:	f141 0100 	adc.w	r1, r1, #0
                val = udivmod(val, base, &v);
#else
                v = val % base;
                val /= base;
#endif
		if (v > 9)
70002ca6:	2d09      	cmp	r5, #9
70002ca8:	d92a      	bls.n	70002d00 <__ultoa_invert+0xe4>
                        v += hex;
70002caa:	4415      	add	r5, r2
                v += '0';
70002cac:	3530      	adds	r5, #48	; 0x30
    switch(base) {
70002cae:	2c08      	cmp	r4, #8
		*str++ = v;
70002cb0:	f800 5b01 	strb.w	r5, [r0], #1
        *dig = val & 1;
70002cb4:	fa5f fe8c 	uxtb.w	lr, ip
    switch(base) {
70002cb8:	d1bc      	bne.n	70002c34 <__ultoa_invert+0x18>
        return val >> 3;
70002cba:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
70002cbe:	ea4c 7c41 	orr.w	ip, ip, r1, lsl #29
        *dig = val & 7;
70002cc2:	f00e 0307 	and.w	r3, lr, #7
        return val >> 3;
70002cc6:	08c9      	lsrs	r1, r1, #3
                v += '0';
70002cc8:	3330      	adds	r3, #48	; 0x30
		*str++ = v;
70002cca:	f800 3b01 	strb.w	r3, [r0], #1
	} while (val);
70002cce:	ea5c 0301 	orrs.w	r3, ip, r1
70002cd2:	d1ab      	bne.n	70002c2c <__ultoa_invert+0x10>
	return str;
}
70002cd4:	bd70      	pop	{r4, r5, r6, pc}
        return val >> 1;
70002cd6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
70002cda:	ea4c 7cc1 	orr.w	ip, ip, r1, lsl #31
        *dig = val & 1;
70002cde:	f00e 0301 	and.w	r3, lr, #1
        return val >> 1;
70002ce2:	0849      	lsrs	r1, r1, #1
		if (v > 9)
70002ce4:	e7f0      	b.n	70002cc8 <__ultoa_invert+0xac>
        *dig = val & 15;
70002ce6:	f00e 030f 	and.w	r3, lr, #15
		if (v > 9)
70002cea:	2b09      	cmp	r3, #9
                        v += hex;
70002cec:	bf88      	it	hi
70002cee:	189b      	addhi	r3, r3, r2
        return val >> 4;
70002cf0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
70002cf4:	ea4c 7c01 	orr.w	ip, ip, r1, lsl #28
                        v += hex;
70002cf8:	bf88      	it	hi
70002cfa:	b2db      	uxtbhi	r3, r3
        return val >> 4;
70002cfc:	0909      	lsrs	r1, r1, #4
		if (v > 9)
70002cfe:	e7e3      	b.n	70002cc8 <__ultoa_invert+0xac>
                v += '0';
70002d00:	3326      	adds	r3, #38	; 0x26
        *dig = val & 1;
70002d02:	fa5f fe8c 	uxtb.w	lr, ip
		*str++ = v;
70002d06:	f800 3b01 	strb.w	r3, [r0], #1
    switch(base) {
70002d0a:	e793      	b.n	70002c34 <__ultoa_invert+0x18>

70002d0c <skip_to_arg>:
 * and types to slowly walk the argument vector until it points at the
 * target_argno so that the outer printf code can then extract it.
 */
static void
skip_to_arg(const CHAR *fmt_orig, my_va_list *ap, int target_argno)
{
70002d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    unsigned c;		/* holds a char from the format string */
    uint16_t flags;
    int current_argno = 1;
70002d10:	f04f 0e01 	mov.w	lr, #1
70002d14:	4603      	mov	r3, r0
    int argno;
    int width;
    const CHAR *fmt = fmt_orig;

    while (current_argno < target_argno) {
70002d16:	4572      	cmp	r2, lr
70002d18:	dc02      	bgt.n	70002d20 <skip_to_arg+0x14>
70002d1a:	e006      	b.n	70002d2a <skip_to_arg+0x1e>
        for (;;) {
            c = *fmt++;
            if (!c) return;
            if (c == '%') {
70002d1c:	2c25      	cmp	r4, #37	; 0x25
70002d1e:	d006      	beq.n	70002d2e <skip_to_arg+0x22>
70002d20:	469c      	mov	ip, r3
            c = *fmt++;
70002d22:	f813 4b01 	ldrb.w	r4, [r3], #1
            if (!c) return;
70002d26:	2c00      	cmp	r4, #0
70002d28:	d1f8      	bne.n	70002d1c <skip_to_arg+0x10>
            }
            ++current_argno;
            fmt = fmt_orig;
        }
    }
}
70002d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                c = *fmt++;
70002d2e:	781c      	ldrb	r4, [r3, #0]
                if (c != '%') break;
70002d30:	2c25      	cmp	r4, #37	; 0x25
                c = *fmt++;
70002d32:	f10c 0c02 	add.w	ip, ip, #2
70002d36:	4663      	mov	r3, ip
                if (c != '%') break;
70002d38:	d0f2      	beq.n	70002d20 <skip_to_arg+0x14>
        width = 0;
70002d3a:	2600      	movs	r6, #0
		switch (c) {
70002d3c:	f642 0789 	movw	r7, #10377	; 0x2889
        argno = 0;
70002d40:	46b0      	mov	r8, r6
		switch (c) {
70002d42:	f2c0 0701 	movt	r7, #1
        flags = 0;
70002d46:	4633      	mov	r3, r6
	    if (flags < FL_WIDTH) {
70002d48:	2b1f      	cmp	r3, #31
70002d4a:	d847      	bhi.n	70002ddc <skip_to_arg+0xd0>
		switch (c) {
70002d4c:	f1a4 0520 	sub.w	r5, r4, #32
70002d50:	2d10      	cmp	r5, #16
70002d52:	d856      	bhi.n	70002e02 <skip_to_arg+0xf6>
70002d54:	fa27 f505 	lsr.w	r5, r7, r5
70002d58:	07ed      	lsls	r5, r5, #31
70002d5a:	d434      	bmi.n	70002dc6 <skip_to_arg+0xba>
		if (c >= '0' && c <= '9') {
70002d5c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
70002d60:	2d09      	cmp	r5, #9
70002d62:	d952      	bls.n	70002e0a <skip_to_arg+0xfe>
                if (c == '$') {
70002d64:	2c24      	cmp	r4, #36	; 0x24
70002d66:	d10a      	bne.n	70002d7e <skip_to_arg+0x72>
                    if (argno) {
70002d68:	f1b8 0f00 	cmp.w	r8, #0
70002d6c:	d053      	beq.n	70002e16 <skip_to_arg+0x10a>
                        if (width == current_argno) {
70002d6e:	4576      	cmp	r6, lr
70002d70:	d137      	bne.n	70002de2 <skip_to_arg+0xd6>
                SKIP_FLOAT_ARG(flags, ap->ap);
70002d72:	680d      	ldr	r5, [r1, #0]
                arg_to_unsigned(ap->ap, flags, x);
70002d74:	3504      	adds	r5, #4
                SKIP_FLOAT_ARG(flags, ap->ap);
70002d76:	600d      	str	r5, [r1, #0]
            ++current_argno;
70002d78:	f10e 0e01 	add.w	lr, lr, #1
            fmt = fmt_orig;
70002d7c:	e7ca      	b.n	70002d14 <skip_to_arg+0x8>
		if (c == '*') {
70002d7e:	f024 0504 	bic.w	r5, r4, #4
		if (c == '.') {
70002d82:	2d2a      	cmp	r5, #42	; 0x2a
70002d84:	d02d      	beq.n	70002de2 <skip_to_arg+0xd6>
            CHECK_INT_SIZES(c, flags);
70002d86:	f1a4 054c 	sub.w	r5, r4, #76	; 0x4c
70002d8a:	2d2e      	cmp	r5, #46	; 0x2e
70002d8c:	d81f      	bhi.n	70002dce <skip_to_arg+0xc2>
70002d8e:	e8df f005 	tbb	[pc, r5]
70002d92:	1e18      	.short	0x1e18
70002d94:	1e1e1e1e 	.word	0x1e1e1e1e
70002d98:	1e1e1e1e 	.word	0x1e1e1e1e
70002d9c:	1e1e1e1e 	.word	0x1e1e1e1e
70002da0:	1e1e1e1e 	.word	0x1e1e1e1e
70002da4:	1e1e1e1e 	.word	0x1e1e1e1e
70002da8:	1e1e1e1e 	.word	0x1e1e1e1e
70002dac:	1e2a1e1e 	.word	0x1e2a1e1e
70002db0:	1e311e18 	.word	0x1e311e18
70002db4:	1e1e1e1e 	.word	0x1e1e1e1e
70002db8:	1e1a1e1e 	.word	0x1e1a1e1e
70002dbc:	1e1e1e1e 	.word	0x1e1e1e1e
70002dc0:	1a          	.byte	0x1a
70002dc1:	00          	.byte	0x00
70002dc2:	f443 7320 	orr.w	r3, r3, #640	; 0x280
	} while ( (c = *fmt++) != 0);
70002dc6:	f81c 4b01 	ldrb.w	r4, [ip], #1
70002dca:	2c00      	cmp	r4, #0
70002dcc:	d1bc      	bne.n	70002d48 <skip_to_arg+0x3c>
        if (argno == 0)
70002dce:	f1b8 0f00 	cmp.w	r8, #0
70002dd2:	d0aa      	beq.n	70002d2a <skip_to_arg+0x1e>
        if (argno == current_argno) {
70002dd4:	45f0      	cmp	r8, lr
70002dd6:	d021      	beq.n	70002e1c <skip_to_arg+0x110>
70002dd8:	4663      	mov	r3, ip
70002dda:	e79c      	b.n	70002d16 <skip_to_arg+0xa>
	    if (flags < FL_LONG) {
70002ddc:	2b7f      	cmp	r3, #127	; 0x7f
70002dde:	d8d2      	bhi.n	70002d86 <skip_to_arg+0x7a>
70002de0:	e7bc      	b.n	70002d5c <skip_to_arg+0x50>
                    width = 0;
70002de2:	2600      	movs	r6, #0
70002de4:	e7ef      	b.n	70002dc6 <skip_to_arg+0xba>
            CHECK_INT_SIZES(c, flags);
70002de6:	05dd      	lsls	r5, r3, #23
70002de8:	bf48      	it	mi
70002dea:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
70002dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
70002df2:	e7e8      	b.n	70002dc6 <skip_to_arg+0xba>
70002df4:	061c      	lsls	r4, r3, #24
70002df6:	bf48      	it	mi
70002df8:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
70002dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
70002e00:	e7e1      	b.n	70002dc6 <skip_to_arg+0xba>
		if (c >= '0' && c <= '9') {
70002e02:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
70002e06:	2d09      	cmp	r5, #9
70002e08:	d8b9      	bhi.n	70002d7e <skip_to_arg+0x72>
                    flags |= FL_WIDTH;
70002e0a:	2320      	movs	r3, #32
                    width = 10 * width + c;
70002e0c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
70002e10:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		    continue;
70002e14:	e7d7      	b.n	70002dc6 <skip_to_arg+0xba>
70002e16:	46b0      	mov	r8, r6
                    width = 0;
70002e18:	2600      	movs	r6, #0
70002e1a:	e7d4      	b.n	70002dc6 <skip_to_arg+0xba>
                SKIP_FLOAT_ARG(flags, ap->ap);
70002e1c:	680d      	ldr	r5, [r1, #0]
            if ((TOLOWER(c) >= 'e' && TOLOWER(c) <= 'g')
70002e1e:	f044 0620 	orr.w	r6, r4, #32
                || TOLOWER(c) == 'a'
70002e22:	f1a6 0765 	sub.w	r7, r6, #101	; 0x65
            if ((TOLOWER(c) >= 'e' && TOLOWER(c) <= 'g')
70002e26:	2e61      	cmp	r6, #97	; 0x61
70002e28:	bf18      	it	ne
70002e2a:	2f02      	cmpne	r7, #2
70002e2c:	d92e      	bls.n	70002e8c <skip_to_arg+0x180>
            } else if (c == 'c') {
70002e2e:	3c63      	subs	r4, #99	; 0x63
70002e30:	2c10      	cmp	r4, #16
70002e32:	d825      	bhi.n	70002e80 <skip_to_arg+0x174>
70002e34:	a601      	add	r6, pc, #4	; (adr r6, 70002e3c <skip_to_arg+0x130>)
70002e36:	f856 f024 	ldr.w	pc, [r6, r4, lsl #2]
70002e3a:	bf00      	nop
70002e3c:	70002d75 	.word	0x70002d75
70002e40:	70002e81 	.word	0x70002e81
70002e44:	70002e81 	.word	0x70002e81
70002e48:	70002e81 	.word	0x70002e81
70002e4c:	70002e81 	.word	0x70002e81
70002e50:	70002e81 	.word	0x70002e81
70002e54:	70002e81 	.word	0x70002e81
70002e58:	70002e81 	.word	0x70002e81
70002e5c:	70002e81 	.word	0x70002e81
70002e60:	70002e81 	.word	0x70002e81
70002e64:	70002e81 	.word	0x70002e81
70002e68:	70002e81 	.word	0x70002e81
70002e6c:	70002e81 	.word	0x70002e81
70002e70:	70002e81 	.word	0x70002e81
70002e74:	70002e81 	.word	0x70002e81
70002e78:	70002e81 	.word	0x70002e81
70002e7c:	70002d75 	.word	0x70002d75
                arg_to_unsigned(ap->ap, flags, x);
70002e80:	061c      	lsls	r4, r3, #24
70002e82:	f57f af77 	bpl.w	70002d74 <skip_to_arg+0x68>
70002e86:	059b      	lsls	r3, r3, #22
70002e88:	f57f af74 	bpl.w	70002d74 <skip_to_arg+0x68>
70002e8c:	3507      	adds	r5, #7
70002e8e:	f025 0507 	bic.w	r5, r5, #7
70002e92:	3508      	adds	r5, #8
70002e94:	e76f      	b.n	70002d76 <skip_to_arg+0x6a>
70002e96:	bf00      	nop

70002e98 <__l_vfprintf>:
    return len;
}
#endif

int vfprintf (FILE * stream, const CHAR *fmt, va_list ap_orig)
{
70002e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int (*put)(char, FILE *) = stream->put;
#define my_putc(c, stream) do { ++stream_len; if (put(c, stream) < 0) goto fail; } while(0)
#endif
#endif

    if ((stream->flags & __SWR) == 0)
70002e9c:	7883      	ldrb	r3, [r0, #2]
    int (*put)(char, FILE *) = stream->put;
70002e9e:	f8d0 b004 	ldr.w	fp, [r0, #4]
    if ((stream->flags & __SWR) == 0)
70002ea2:	079e      	lsls	r6, r3, #30
{
70002ea4:	b09b      	sub	sp, #108	; 0x6c
    if ((stream->flags & __SWR) == 0)
70002ea6:	f140 836c 	bpl.w	70003582 <__l_vfprintf+0x6ea>
70002eaa:	4607      	mov	r7, r0
#endif

    for (;;) {

	for (;;) {
	    c = *fmt++;
70002eac:	460b      	mov	r3, r1
    va_copy(ap, ap_orig);
70002eae:	9209      	str	r2, [sp, #36]	; 0x24
	    c = *fmt++;
70002eb0:	4696      	mov	lr, r2
70002eb2:	f813 0b01 	ldrb.w	r0, [r3], #1
	    if (!c) goto ret;
70002eb6:	2800      	cmp	r0, #0
70002eb8:	f000 835a 	beq.w	70003570 <__l_vfprintf+0x6d8>
70002ebc:	460d      	mov	r5, r1
    int stream_len = 0;
70002ebe:	2400      	movs	r4, #0
70002ec0:	e9cd 1203 	strd	r1, r2, [sp, #12]
70002ec4:	e00a      	b.n	70002edc <__l_vfprintf+0x44>
	    if (c == '%') {
		c = *fmt++;
		if (c != '%') break;
	    }
	    my_putc (c, stream);
70002ec6:	4639      	mov	r1, r7
70002ec8:	b2c0      	uxtb	r0, r0
70002eca:	461d      	mov	r5, r3
70002ecc:	47d8      	blx	fp
70002ece:	3401      	adds	r4, #1
70002ed0:	2800      	cmp	r0, #0
70002ed2:	db10      	blt.n	70002ef6 <__l_vfprintf+0x5e>
	    c = *fmt++;
70002ed4:	462b      	mov	r3, r5
70002ed6:	f813 0b01 	ldrb.w	r0, [r3], #1
	    if (!c) goto ret;
70002eda:	b190      	cbz	r0, 70002f02 <__l_vfprintf+0x6a>
	    if (c == '%') {
70002edc:	2825      	cmp	r0, #37	; 0x25
70002ede:	d1f2      	bne.n	70002ec6 <__l_vfprintf+0x2e>
		c = *fmt++;
70002ee0:	f105 0802 	add.w	r8, r5, #2
70002ee4:	786d      	ldrb	r5, [r5, #1]
		if (c != '%') break;
70002ee6:	2d25      	cmp	r5, #37	; 0x25
70002ee8:	d10f      	bne.n	70002f0a <__l_vfprintf+0x72>
	    my_putc (c, stream);
70002eea:	4639      	mov	r1, r7
		c = *fmt++;
70002eec:	4645      	mov	r5, r8
	    my_putc (c, stream);
70002eee:	47d8      	blx	fp
70002ef0:	3401      	adds	r4, #1
70002ef2:	2800      	cmp	r0, #0
70002ef4:	daee      	bge.n	70002ed4 <__l_vfprintf+0x3c>
#endif
    return stream_len;
#undef my_putc
#undef ap
  fail:
    stream->flags |= __SERR;
70002ef6:	78bb      	ldrb	r3, [r7, #2]
    stream_len = -1;
70002ef8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    stream->flags |= __SERR;
70002efc:	f043 0304 	orr.w	r3, r3, #4
70002f00:	70bb      	strb	r3, [r7, #2]
    goto ret;
}
70002f02:	4620      	mov	r0, r4
70002f04:	b01b      	add	sp, #108	; 0x6c
70002f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        argno = 0;
70002f0a:	f04f 0a00 	mov.w	sl, #0
	width = 0;
70002f0e:	46d1      	mov	r9, sl
	flags = 0;
70002f10:	4656      	mov	r6, sl
	prec = 0;
70002f12:	f8cd a004 	str.w	sl, [sp, #4]
	    if (flags < FL_WIDTH) {
70002f16:	2e1f      	cmp	r6, #31
70002f18:	d857      	bhi.n	70002fca <__l_vfprintf+0x132>
		switch (c) {
70002f1a:	f1a5 0320 	sub.w	r3, r5, #32
70002f1e:	2b10      	cmp	r3, #16
70002f20:	d80a      	bhi.n	70002f38 <__l_vfprintf+0xa0>
70002f22:	e8df f003 	tbb	[pc, r3]
70002f26:	0946      	.short	0x0946
70002f28:	09094909 	.word	0x09094909
70002f2c:	09091409 	.word	0x09091409
70002f30:	4f094409 	.word	0x4f094409
70002f34:	0909      	.short	0x0909
70002f36:	4c          	.byte	0x4c
70002f37:	00          	.byte	0x00
		if (c >= '0' && c <= '9') {
70002f38:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
70002f3c:	2b09      	cmp	r3, #9
70002f3e:	f200 80b0 	bhi.w	700030a2 <__l_vfprintf+0x20a>
		    width = 10*width + c;
70002f42:	eb09 0989 	add.w	r9, r9, r9, lsl #2
		    flags |= FL_WIDTH;
70002f46:	f046 0620 	orr.w	r6, r6, #32
		    width = 10*width + c;
70002f4a:	eb03 0949 	add.w	r9, r3, r9, lsl #1
	} while ( (c = *fmt++) != 0);
70002f4e:	f818 5b01 	ldrb.w	r5, [r8], #1
70002f52:	2d00      	cmp	r5, #0
70002f54:	d1df      	bne.n	70002f16 <__l_vfprintf+0x7e>
        if (argno) {
70002f56:	9502      	str	r5, [sp, #8]
70002f58:	2320      	movs	r3, #32
70002f5a:	f1ba 0f00 	cmp.w	sl, #0
70002f5e:	f040 80c9 	bne.w	700030f4 <__l_vfprintf+0x25c>
	if (prec < 0) {
70002f62:	9a01      	ldr	r2, [sp, #4]
70002f64:	2a00      	cmp	r2, #0
	    prec = 0;
70002f66:	bfbf      	itttt	lt
70002f68:	2200      	movlt	r2, #0
	    flags &= ~FL_PREC;
70002f6a:	f026 0640 	biclt.w	r6, r6, #64	; 0x40
	    prec = 0;
70002f6e:	9201      	strlt	r2, [sp, #4]
	    flags &= ~FL_PREC;
70002f70:	b2b6      	uxthlt	r6, r6
	if ((TOLOWER(c) >= 'e' && TOLOWER(c) <= 'g')
70002f72:	9a02      	ldr	r2, [sp, #8]
70002f74:	2a00      	cmp	r2, #0
70002f76:	f040 80f1 	bne.w	7000315c <__l_vfprintf+0x2c4>
            if (c == 'c') {
70002f7a:	f1a5 0263 	sub.w	r2, r5, #99	; 0x63
70002f7e:	2a12      	cmp	r2, #18
70002f80:	f200 8141 	bhi.w	70003206 <__l_vfprintf+0x36e>
70002f84:	e8df f012 	tbh	[pc, r2, lsl #1]
70002f88:	0158018e 	.word	0x0158018e
70002f8c:	013f013f 	.word	0x013f013f
70002f90:	013f013f 	.word	0x013f013f
70002f94:	013f0158 	.word	0x013f0158
70002f98:	013f013f 	.word	0x013f013f
70002f9c:	013f013f 	.word	0x013f013f
70002fa0:	019802cb 	.word	0x019802cb
70002fa4:	013f013f 	.word	0x013f013f
70002fa8:	013f01e5 	.word	0x013f01e5
70002fac:	01e0      	.short	0x01e0
		    flags |= FL_PLUS;
70002fae:	f046 0602 	orr.w	r6, r6, #2
		    flags |= FL_SPACE;
70002fb2:	f046 0604 	orr.w	r6, r6, #4
		    continue;
70002fb6:	e7ca      	b.n	70002f4e <__l_vfprintf+0xb6>
		    flags |= FL_ALT;
70002fb8:	f046 0610 	orr.w	r6, r6, #16
		    continue;
70002fbc:	e7c7      	b.n	70002f4e <__l_vfprintf+0xb6>
		    flags |= FL_ZFILL;
70002fbe:	f046 0601 	orr.w	r6, r6, #1
		    continue;
70002fc2:	e7c4      	b.n	70002f4e <__l_vfprintf+0xb6>
		    flags |= FL_LPAD;
70002fc4:	f046 0608 	orr.w	r6, r6, #8
		    continue;
70002fc8:	e7c1      	b.n	70002f4e <__l_vfprintf+0xb6>
	    if (flags < FL_LONG) {
70002fca:	2e7f      	cmp	r6, #127	; 0x7f
70002fcc:	f240 82eb 	bls.w	700035a6 <__l_vfprintf+0x70e>
            CHECK_INT_SIZES(c, flags);
70002fd0:	f1a5 034c 	sub.w	r3, r5, #76	; 0x4c
70002fd4:	2b2e      	cmp	r3, #46	; 0x2e
70002fd6:	d87e      	bhi.n	700030d6 <__l_vfprintf+0x23e>
70002fd8:	a201      	add	r2, pc, #4	; (adr r2, 70002fe0 <__l_vfprintf+0x148>)
70002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70002fde:	bf00      	nop
70002fe0:	7000309d 	.word	0x7000309d
70002fe4:	700030d7 	.word	0x700030d7
70002fe8:	700030d7 	.word	0x700030d7
70002fec:	700030d7 	.word	0x700030d7
70002ff0:	700030d7 	.word	0x700030d7
70002ff4:	700030d7 	.word	0x700030d7
70002ff8:	700030d7 	.word	0x700030d7
70002ffc:	700030d7 	.word	0x700030d7
70003000:	700030d7 	.word	0x700030d7
70003004:	700030d7 	.word	0x700030d7
70003008:	700030d7 	.word	0x700030d7
7000300c:	700030d7 	.word	0x700030d7
70003010:	700030d7 	.word	0x700030d7
70003014:	700030d7 	.word	0x700030d7
70003018:	700030d7 	.word	0x700030d7
7000301c:	700030d7 	.word	0x700030d7
70003020:	700030d7 	.word	0x700030d7
70003024:	700030d7 	.word	0x700030d7
70003028:	700030d7 	.word	0x700030d7
7000302c:	700030d7 	.word	0x700030d7
70003030:	700030d7 	.word	0x700030d7
70003034:	700030d7 	.word	0x700030d7
70003038:	700030d7 	.word	0x700030d7
7000303c:	700030d7 	.word	0x700030d7
70003040:	700030d7 	.word	0x700030d7
70003044:	700030d7 	.word	0x700030d7
70003048:	700030d7 	.word	0x700030d7
7000304c:	700030d7 	.word	0x700030d7
70003050:	70003117 	.word	0x70003117
70003054:	700030d7 	.word	0x700030d7
70003058:	7000309d 	.word	0x7000309d
7000305c:	700030d7 	.word	0x700030d7
70003060:	70003109 	.word	0x70003109
70003064:	700030d7 	.word	0x700030d7
70003068:	700030d7 	.word	0x700030d7
7000306c:	700030d7 	.word	0x700030d7
70003070:	700030d7 	.word	0x700030d7
70003074:	700030d7 	.word	0x700030d7
70003078:	700030d7 	.word	0x700030d7
7000307c:	700030d7 	.word	0x700030d7
70003080:	70002f4f 	.word	0x70002f4f
70003084:	700030d7 	.word	0x700030d7
70003088:	700030d7 	.word	0x700030d7
7000308c:	700030d7 	.word	0x700030d7
70003090:	700030d7 	.word	0x700030d7
70003094:	700030d7 	.word	0x700030d7
70003098:	70002f4f 	.word	0x70002f4f
7000309c:	f446 7620 	orr.w	r6, r6, #640	; 0x280
700030a0:	e755      	b.n	70002f4e <__l_vfprintf+0xb6>
		if (c == '*') {
700030a2:	2d2a      	cmp	r5, #42	; 0x2a
700030a4:	d03e      	beq.n	70003124 <__l_vfprintf+0x28c>
		if (c == '.') {
700030a6:	2d2e      	cmp	r5, #46	; 0x2e
700030a8:	d052      	beq.n	70003150 <__l_vfprintf+0x2b8>
                if (c == '$') {
700030aa:	2d24      	cmp	r5, #36	; 0x24
700030ac:	d190      	bne.n	70002fd0 <__l_vfprintf+0x138>
                    if (argno) {
700030ae:	f1ba 0f00 	cmp.w	sl, #0
700030b2:	f000 821c 	beq.w	700034ee <__l_vfprintf+0x656>
                        va_copy(ap, ap_orig);
700030b6:	9b04      	ldr	r3, [sp, #16]
                        skip_to_arg(fmt_orig, &my_ap, (flags & FL_PREC) ? prec : width);
700030b8:	0672      	lsls	r2, r6, #25
                        va_copy(ap, ap_orig);
700030ba:	9309      	str	r3, [sp, #36]	; 0x24
                        skip_to_arg(fmt_orig, &my_ap, (flags & FL_PREC) ? prec : width);
700030bc:	f140 823d 	bpl.w	7000353a <__l_vfprintf+0x6a2>
700030c0:	9a01      	ldr	r2, [sp, #4]
700030c2:	a909      	add	r1, sp, #36	; 0x24
700030c4:	9803      	ldr	r0, [sp, #12]
700030c6:	f7ff fe21 	bl	70002d0c <skip_to_arg>
                            prec = va_arg(ap, int);
700030ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
700030cc:	1d1a      	adds	r2, r3, #4
700030ce:	9209      	str	r2, [sp, #36]	; 0x24
700030d0:	681b      	ldr	r3, [r3, #0]
700030d2:	9301      	str	r3, [sp, #4]
700030d4:	e73b      	b.n	70002f4e <__l_vfprintf+0xb6>
	if ((TOLOWER(c) >= 'e' && TOLOWER(c) <= 'g')
700030d6:	f045 0320 	orr.w	r3, r5, #32
            || TOLOWER(c) == 'a'
700030da:	f1a3 0265 	sub.w	r2, r3, #101	; 0x65
700030de:	2b61      	cmp	r3, #97	; 0x61
700030e0:	bf18      	it	ne
700030e2:	2a02      	cmpne	r2, #2
700030e4:	bf94      	ite	ls
700030e6:	2201      	movls	r2, #1
700030e8:	2200      	movhi	r2, #0
700030ea:	9202      	str	r2, [sp, #8]
        if (argno) {
700030ec:	f1ba 0f00 	cmp.w	sl, #0
700030f0:	f43f af37 	beq.w	70002f62 <__l_vfprintf+0xca>
            va_copy(ap, ap_orig);
700030f4:	9305      	str	r3, [sp, #20]
            skip_to_arg(fmt_orig, &my_ap, argno);
700030f6:	4652      	mov	r2, sl
            va_copy(ap, ap_orig);
700030f8:	9b04      	ldr	r3, [sp, #16]
            skip_to_arg(fmt_orig, &my_ap, argno);
700030fa:	a909      	add	r1, sp, #36	; 0x24
700030fc:	9803      	ldr	r0, [sp, #12]
            va_copy(ap, ap_orig);
700030fe:	9309      	str	r3, [sp, #36]	; 0x24
            skip_to_arg(fmt_orig, &my_ap, argno);
70003100:	f7ff fe04 	bl	70002d0c <skip_to_arg>
70003104:	9b05      	ldr	r3, [sp, #20]
70003106:	e72c      	b.n	70002f62 <__l_vfprintf+0xca>
            CHECK_INT_SIZES(c, flags);
70003108:	0633      	lsls	r3, r6, #24
7000310a:	bf48      	it	mi
7000310c:	f446 7600 	orrmi.w	r6, r6, #512	; 0x200
70003110:	f046 0680 	orr.w	r6, r6, #128	; 0x80
70003114:	e71b      	b.n	70002f4e <__l_vfprintf+0xb6>
70003116:	05f5      	lsls	r5, r6, #23
70003118:	bf48      	it	mi
7000311a:	f446 7600 	orrmi.w	r6, r6, #512	; 0x200
7000311e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
70003122:	e714      	b.n	70002f4e <__l_vfprintf+0xb6>
                    if (argno)
70003124:	f1ba 0f00 	cmp.w	sl, #0
70003128:	f47f af11 	bne.w	70002f4e <__l_vfprintf+0xb6>
			prec = va_arg(ap, int);
7000312c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		    if (flags & FL_PREC) {
7000312e:	0670      	lsls	r0, r6, #25
			prec = va_arg(ap, int);
70003130:	f103 0204 	add.w	r2, r3, #4
70003134:	9209      	str	r2, [sp, #36]	; 0x24
		    if (flags & FL_PREC) {
70003136:	d4cb      	bmi.n	700030d0 <__l_vfprintf+0x238>
			width = va_arg(ap, int);
70003138:	f8d3 9000 	ldr.w	r9, [r3]
			if (width < 0) {
7000313c:	f1b9 0f00 	cmp.w	r9, #0
			flags |= FL_WIDTH;
70003140:	bfae      	itee	ge
70003142:	f046 0620 	orrge.w	r6, r6, #32
			    width = -width;
70003146:	f1c9 0900 	rsblt	r9, r9, #0
			    flags |= FL_LPAD;
7000314a:	f046 0628 	orrlt.w	r6, r6, #40	; 0x28
7000314e:	e6fe      	b.n	70002f4e <__l_vfprintf+0xb6>
		    if (flags & FL_PREC)
70003150:	0671      	lsls	r1, r6, #25
70003152:	f53f aed6 	bmi.w	70002f02 <__l_vfprintf+0x6a>
		    flags |= FL_PREC;
70003156:	f046 0640 	orr.w	r6, r6, #64	; 0x40
		    continue;
7000315a:	e6f8      	b.n	70002f4e <__l_vfprintf+0xb6>
            SKIP_FLOAT_ARG(flags, ap);
7000315c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	    pnt = "*float*";
7000315e:	f644 1204 	movw	r2, #18692	; 0x4904
	    size = sizeof ("*float*") - 1;
70003162:	f04f 0a07 	mov.w	sl, #7
	    pnt = "*float*";
70003166:	f2c7 0200 	movt	r2, #28672	; 0x7000
            SKIP_FLOAT_ARG(flags, ap);
7000316a:	3307      	adds	r3, #7
7000316c:	f023 0307 	bic.w	r3, r3, #7
70003170:	3308      	adds	r3, #8
70003172:	9309      	str	r3, [sp, #36]	; 0x24
                    while ((size_t) width > size) {
70003174:	4649      	mov	r1, r9
                if (!(flags & FL_LPAD)) {
70003176:	0730      	lsls	r0, r6, #28
70003178:	d419      	bmi.n	700031ae <__l_vfprintf+0x316>
                    while ((size_t) width > size) {
7000317a:	45ca      	cmp	sl, r9
7000317c:	bf3e      	ittt	cc
7000317e:	465d      	movcc	r5, fp
70003180:	4616      	movcc	r6, r2
70003182:	46cb      	movcc	fp, r9
70003184:	d303      	bcc.n	7000318e <__l_vfprintf+0x2f6>
70003186:	e012      	b.n	700031ae <__l_vfprintf+0x316>
70003188:	459a      	cmp	sl, r3
7000318a:	d208      	bcs.n	7000319e <__l_vfprintf+0x306>
                        width--;
7000318c:	4699      	mov	r9, r3
                        my_putc (' ', stream);
7000318e:	4639      	mov	r1, r7
70003190:	2020      	movs	r0, #32
70003192:	47a8      	blx	r5
                        width--;
70003194:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
                        my_putc (' ', stream);
70003198:	2800      	cmp	r0, #0
7000319a:	daf5      	bge.n	70003188 <__l_vfprintf+0x2f0>
7000319c:	e6ab      	b.n	70002ef6 <__l_vfprintf+0x5e>
7000319e:	4659      	mov	r1, fp
700031a0:	3401      	adds	r4, #1
700031a2:	4632      	mov	r2, r6
700031a4:	440c      	add	r4, r1
700031a6:	46ab      	mov	fp, r5
700031a8:	eba4 0409 	sub.w	r4, r4, r9
                    while ((size_t) width > size) {
700031ac:	4619      	mov	r1, r3
                    while (size--)
700031ae:	4623      	mov	r3, r4
700031b0:	465e      	mov	r6, fp
700031b2:	4614      	mov	r4, r2
700031b4:	eb02 050a 	add.w	r5, r2, sl
700031b8:	4693      	mov	fp, r2
700031ba:	4699      	mov	r9, r3
700031bc:	9101      	str	r1, [sp, #4]
700031be:	e005      	b.n	700031cc <__l_vfprintf+0x334>
                        my_putc (*pnt++, stream);
700031c0:	f814 0b01 	ldrb.w	r0, [r4], #1
700031c4:	47b0      	blx	r6
700031c6:	2800      	cmp	r0, #0
700031c8:	f6ff ae95 	blt.w	70002ef6 <__l_vfprintf+0x5e>
700031cc:	4639      	mov	r1, r7
                    while (size--)
700031ce:	42ac      	cmp	r4, r5
700031d0:	d1f6      	bne.n	700031c0 <__l_vfprintf+0x328>
700031d2:	465a      	mov	r2, fp
700031d4:	464b      	mov	r3, r9
700031d6:	9901      	ldr	r1, [sp, #4]
700031d8:	46a1      	mov	r9, r4
700031da:	46b3      	mov	fp, r6
700031dc:	1a9b      	subs	r3, r3, r2
                width -= size;
700031de:	eba1 060a 	sub.w	r6, r1, sl
700031e2:	4499      	add	r9, r3
                while (prec > buf_len) {
700031e4:	464c      	mov	r4, r9
700031e6:	444e      	add	r6, r9
700031e8:	465d      	mov	r5, fp
700031ea:	e004      	b.n	700031f6 <__l_vfprintf+0x35e>
	    my_putc (' ', stream);
700031ec:	47a8      	blx	r5
700031ee:	3401      	adds	r4, #1
700031f0:	2800      	cmp	r0, #0
700031f2:	f6ff ae80 	blt.w	70002ef6 <__l_vfprintf+0x5e>
700031f6:	4639      	mov	r1, r7
700031f8:	1b33      	subs	r3, r6, r4
700031fa:	2020      	movs	r0, #32
	while (width-- > 0) {
700031fc:	2b00      	cmp	r3, #0
700031fe:	dcf5      	bgt.n	700031ec <__l_vfprintf+0x354>
70003200:	46ab      	mov	fp, r5
70003202:	4645      	mov	r5, r8
70003204:	e666      	b.n	70002ed4 <__l_vfprintf+0x3c>
                    } else if (TOLOWER(c) == 'x') {
70003206:	2b78      	cmp	r3, #120	; 0x78
                        base = ('x' - c) | 16;
70003208:	bf04      	itt	eq
7000320a:	f1c5 0378 	rsbeq	r3, r5, #120	; 0x78
7000320e:	f043 0310 	orreq.w	r3, r3, #16
                    } else if (TOLOWER(c) == 'x') {
70003212:	d055      	beq.n	700032c0 <__l_vfprintf+0x428>
                    } else if (TOLOWER(c) == 'b') {
70003214:	2b62      	cmp	r3, #98	; 0x62
70003216:	f000 81b2 	beq.w	7000357e <__l_vfprintf+0x6e6>
                        my_putc('%', stream);
7000321a:	4639      	mov	r1, r7
7000321c:	2025      	movs	r0, #37	; 0x25
7000321e:	47d8      	blx	fp
70003220:	2800      	cmp	r0, #0
70003222:	f6ff ae68 	blt.w	70002ef6 <__l_vfprintf+0x5e>
                        my_putc(c, stream);
70003226:	4628      	mov	r0, r5
70003228:	4639      	mov	r1, r7
7000322a:	47d8      	blx	fp
7000322c:	2800      	cmp	r0, #0
7000322e:	f6ff ae62 	blt.w	70002ef6 <__l_vfprintf+0x5e>
70003232:	4645      	mov	r5, r8
70003234:	3402      	adds	r4, #2
70003236:	e64d      	b.n	70002ed4 <__l_vfprintf+0x3c>
            SKIP_FLOAT_ARG(flags, ap);
70003238:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    arg_to_signed(ap, flags, x_s);
7000323a:	0632      	lsls	r2, r6, #24
7000323c:	f100 8172 	bmi.w	70003524 <__l_vfprintf+0x68c>
70003240:	1d1a      	adds	r2, r3, #4
70003242:	05f1      	lsls	r1, r6, #23
70003244:	9209      	str	r2, [sp, #36]	; 0x24
70003246:	681a      	ldr	r2, [r3, #0]
70003248:	bf5c      	itt	pl
7000324a:	4610      	movpl	r0, r2
7000324c:	17c2      	asrpl	r2, r0, #31
7000324e:	d507      	bpl.n	70003260 <__l_vfprintf+0x3c8>
70003250:	05b3      	lsls	r3, r6, #22
70003252:	bf4b      	itete	mi
70003254:	b250      	sxtbmi	r0, r2
70003256:	b210      	sxthpl	r0, r2
70003258:	f342 12c0 	sbfxmi	r2, r2, #7, #1
7000325c:	f342 32c0 	sbfxpl	r2, r2, #15, #1
                    if (x_s < 0) {
70003260:	f026 0110 	bic.w	r1, r6, #16
70003264:	2a00      	cmp	r2, #0
70003266:	fa1f fa81 	uxth.w	sl, r1
7000326a:	f2c0 8171 	blt.w	70003550 <__l_vfprintf+0x6b8>
                    if (x_s == 0 && (flags & FL_PREC) && prec == 0)
7000326e:	ea50 0102 	orrs.w	r1, r0, r2
70003272:	f040 8190 	bne.w	70003596 <__l_vfprintf+0x6fe>
70003276:	9a01      	ldr	r2, [sp, #4]
70003278:	f3c6 1380 	ubfx	r3, r6, #6, #1
7000327c:	2a00      	cmp	r2, #0
7000327e:	bf14      	ite	ne
70003280:	2300      	movne	r3, #0
70003282:	f003 0301 	andeq.w	r3, r3, #1
70003286:	f006 0240 	and.w	r2, r6, #64	; 0x40
7000328a:	9202      	str	r2, [sp, #8]
7000328c:	2b00      	cmp	r3, #0
7000328e:	f040 817b 	bne.w	70003588 <__l_vfprintf+0x6f0>
70003292:	4618      	mov	r0, r3
70003294:	4619      	mov	r1, r3
                        buf_len = __ultoa_invert (x_s, buf, 10) - buf;
70003296:	230a      	movs	r3, #10
70003298:	ae0a      	add	r6, sp, #40	; 0x28
7000329a:	4632      	mov	r2, r6
7000329c:	f7ff fcbe 	bl	70002c1c <__ultoa_invert>
700032a0:	1b83      	subs	r3, r0, r6
700032a2:	e03a      	b.n	7000331a <__l_vfprintf+0x482>
                buf[0] = va_arg (ap, int);
700032a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
                size = 1;
700032a6:	f04f 0a01 	mov.w	sl, #1
                pnt = buf;
700032aa:	aa0a      	add	r2, sp, #40	; 0x28
                buf[0] = va_arg (ap, int);
700032ac:	1d19      	adds	r1, r3, #4
700032ae:	9109      	str	r1, [sp, #36]	; 0x24
700032b0:	681b      	ldr	r3, [r3, #0]
700032b2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                goto str_lpad;
700032b6:	e75d      	b.n	70003174 <__l_vfprintf+0x2dc>
                        base = 16;
700032b8:	2310      	movs	r3, #16
                        flags |= FL_ALT;
700032ba:	f046 0610 	orr.w	r6, r6, #16
                        c = 'x';
700032be:	2578      	movs	r5, #120	; 0x78
            SKIP_FLOAT_ARG(flags, ap);
700032c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
                    arg_to_unsigned(ap, flags, x);
700032c2:	f016 0c80 	ands.w	ip, r6, #128	; 0x80
700032c6:	f000 80a2 	beq.w	7000340e <__l_vfprintf+0x576>
700032ca:	f416 7100 	ands.w	r1, r6, #512	; 0x200
700032ce:	bf1d      	ittte	ne
700032d0:	3207      	addne	r2, #7
700032d2:	f022 0207 	bicne.w	r2, r2, #7
700032d6:	f102 0108 	addne.w	r1, r2, #8
700032da:	1d10      	addeq	r0, r2, #4
700032dc:	bf15      	itete	ne
700032de:	9109      	strne	r1, [sp, #36]	; 0x24
700032e0:	9009      	streq	r0, [sp, #36]	; 0x24
700032e2:	e9d2 0100 	ldrdne	r0, r1, [r2]
700032e6:	6810      	ldreq	r0, [r2, #0]
                    if (x == 0)
700032e8:	ea50 0201 	orrs.w	r2, r0, r1
700032ec:	f040 80c5 	bne.w	7000347a <__l_vfprintf+0x5e2>
                    if (x == 0 && (flags & FL_PREC) && prec == 0)
700032f0:	9a01      	ldr	r2, [sp, #4]
                        flags &= ~FL_ALT;
700032f2:	f026 0c16 	bic.w	ip, r6, #22
                    if (x == 0 && (flags & FL_PREC) && prec == 0)
700032f6:	fab2 f282 	clz	r2, r2
                        flags &= ~FL_ALT;
700032fa:	fa1f fa8c 	uxth.w	sl, ip
                    if (x == 0 && (flags & FL_PREC) && prec == 0)
700032fe:	0952      	lsrs	r2, r2, #5
70003300:	f006 0c40 	and.w	ip, r6, #64	; 0x40
70003304:	ea12 1296 	ands.w	r2, r2, r6, lsr #6
70003308:	f8cd c008 	str.w	ip, [sp, #8]
7000330c:	f040 8129 	bne.w	70003562 <__l_vfprintf+0x6ca>
                        buf_len = __ultoa_invert (x, buf, base) - buf;
70003310:	ae0a      	add	r6, sp, #40	; 0x28
70003312:	4632      	mov	r2, r6
70003314:	f7ff fc82 	bl	70002c1c <__ultoa_invert>
70003318:	1b83      	subs	r3, r0, r6
                if (flags & FL_PREC) {
7000331a:	9a02      	ldr	r2, [sp, #8]
7000331c:	f00a 0c10 	and.w	ip, sl, #16
70003320:	b37a      	cbz	r2, 70003382 <__l_vfprintf+0x4ea>
                    if (len < prec) {
70003322:	9901      	ldr	r1, [sp, #4]
                    flags &= ~FL_ZFILL;
70003324:	f02a 0201 	bic.w	r2, sl, #1
                    if (len < prec) {
70003328:	4299      	cmp	r1, r3
                    flags &= ~FL_ZFILL;
7000332a:	b292      	uxth	r2, r2
                    if (len < prec) {
7000332c:	bfdc      	itt	le
7000332e:	f00a 0c10 	andle.w	ip, sl, #16
                    flags &= ~FL_ZFILL;
70003332:	4692      	movle	sl, r2
                    if (len < prec) {
70003334:	dd25      	ble.n	70003382 <__l_vfprintf+0x4ea>
                        if (c == '\0')
70003336:	2d00      	cmp	r5, #0
70003338:	f040 80ea 	bne.w	70003510 <__l_vfprintf+0x678>
                            flags &= ~FL_ALT;
7000333c:	f02a 0211 	bic.w	r2, sl, #17
70003340:	fa1f fa82 	uxth.w	sl, r2
70003344:	9a01      	ldr	r2, [sp, #4]
70003346:	e071      	b.n	7000342c <__l_vfprintf+0x594>
                        base = 10;
70003348:	230a      	movs	r3, #10
                        flags &= ~FL_ALT;
7000334a:	f026 0610 	bic.w	r6, r6, #16
7000334e:	b2b6      	uxth	r6, r6
                        base = 10;
70003350:	e7b6      	b.n	700032c0 <__l_vfprintf+0x428>
                    pnt = va_arg (ap, char *);
70003352:	9a09      	ldr	r2, [sp, #36]	; 0x24
                    pnt = "(null)";
70003354:	f644 03fc 	movw	r3, #18684	; 0x48fc
70003358:	f2c7 0300 	movt	r3, #28672	; 0x7000
                    pnt = va_arg (ap, char *);
7000335c:	1d11      	adds	r1, r2, #4
7000335e:	9109      	str	r1, [sp, #36]	; 0x24
70003360:	6812      	ldr	r2, [r2, #0]
                size = strnlen (pnt, size);
70003362:	9901      	ldr	r1, [sp, #4]
                    pnt = "(null)";
70003364:	2a00      	cmp	r2, #0
70003366:	bf08      	it	eq
70003368:	461a      	moveq	r2, r3
                size = strnlen (pnt, size);
7000336a:	4610      	mov	r0, r2
                size = (flags & FL_PREC) ? (size_t) prec : SIZE_MAX;
7000336c:	f016 0f40 	tst.w	r6, #64	; 0x40
                size = strnlen (pnt, size);
70003370:	9201      	str	r2, [sp, #4]
70003372:	bf08      	it	eq
70003374:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
70003378:	f7ff fc3e 	bl	70002bf8 <strnlen>
7000337c:	9a01      	ldr	r2, [sp, #4]
7000337e:	4682      	mov	sl, r0
70003380:	e6f8      	b.n	70003174 <__l_vfprintf+0x2dc>
                if (flags & FL_ALT) {
70003382:	f1bc 0f00 	cmp.w	ip, #0
70003386:	d050      	beq.n	7000342a <__l_vfprintf+0x592>
                    len += 1;
70003388:	1c5a      	adds	r2, r3, #1
                    if (c != '\0')
7000338a:	b10d      	cbz	r5, 70003390 <__l_vfprintf+0x4f8>
7000338c:	461a      	mov	r2, r3
                        len += 1;
7000338e:	3202      	adds	r2, #2
                if (!(flags & FL_LPAD)) {
70003390:	f01a 0f08 	tst.w	sl, #8
                width -= len;
70003394:	bf18      	it	ne
70003396:	eba9 0602 	subne.w	r6, r9, r2
                if (!(flags & FL_LPAD)) {
7000339a:	d053      	beq.n	70003444 <__l_vfprintf+0x5ac>
                    my_putc ('0', stream);
7000339c:	4639      	mov	r1, r7
7000339e:	2030      	movs	r0, #48	; 0x30
700033a0:	9302      	str	r3, [sp, #8]
700033a2:	47d8      	blx	fp
700033a4:	2800      	cmp	r0, #0
700033a6:	f6ff ada6 	blt.w	70002ef6 <__l_vfprintf+0x5e>
                    if (c != '\0')
700033aa:	9b02      	ldr	r3, [sp, #8]
700033ac:	2d00      	cmp	r5, #0
700033ae:	f040 8094 	bne.w	700034da <__l_vfprintf+0x642>
                    my_putc ('0', stream);
700033b2:	3401      	adds	r4, #1
                while (prec > buf_len) {
700033b4:	9a01      	ldr	r2, [sp, #4]
700033b6:	4293      	cmp	r3, r2
700033b8:	bfa8      	it	ge
700033ba:	4625      	movge	r5, r4
700033bc:	da12      	bge.n	700033e4 <__l_vfprintf+0x54c>
700033be:	9d01      	ldr	r5, [sp, #4]
700033c0:	469a      	mov	sl, r3
700033c2:	4425      	add	r5, r4
700033c4:	1aed      	subs	r5, r5, r3
700033c6:	46a9      	mov	r9, r5
700033c8:	465d      	mov	r5, fp
700033ca:	e001      	b.n	700033d0 <__l_vfprintf+0x538>
700033cc:	45a1      	cmp	r9, r4
700033ce:	d006      	beq.n	700033de <__l_vfprintf+0x546>
                    my_putc ('0', stream);
700033d0:	4639      	mov	r1, r7
700033d2:	2030      	movs	r0, #48	; 0x30
700033d4:	47a8      	blx	r5
700033d6:	3401      	adds	r4, #1
700033d8:	2800      	cmp	r0, #0
700033da:	daf7      	bge.n	700033cc <__l_vfprintf+0x534>
700033dc:	e58b      	b.n	70002ef6 <__l_vfprintf+0x5e>
700033de:	46ab      	mov	fp, r5
700033e0:	4653      	mov	r3, sl
700033e2:	464d      	mov	r5, r9
700033e4:	46aa      	mov	sl, r5
700033e6:	ac0a      	add	r4, sp, #40	; 0x28
700033e8:	465d      	mov	r5, fp
700033ea:	eb04 0903 	add.w	r9, r4, r3
700033ee:	469b      	mov	fp, r3
700033f0:	e005      	b.n	700033fe <__l_vfprintf+0x566>
                    my_putc (buf[--buf_len], stream);
700033f2:	f819 0d01 	ldrb.w	r0, [r9, #-1]!
700033f6:	47a8      	blx	r5
700033f8:	2800      	cmp	r0, #0
700033fa:	f6ff ad7c 	blt.w	70002ef6 <__l_vfprintf+0x5e>
700033fe:	4639      	mov	r1, r7
                while (buf_len)
70003400:	45a1      	cmp	r9, r4
70003402:	d1f6      	bne.n	700033f2 <__l_vfprintf+0x55a>
70003404:	465b      	mov	r3, fp
70003406:	46ab      	mov	fp, r5
70003408:	eb0a 0903 	add.w	r9, sl, r3
7000340c:	e6ea      	b.n	700031e4 <__l_vfprintf+0x34c>
                    arg_to_unsigned(ap, flags, x);
7000340e:	1d11      	adds	r1, r2, #4
70003410:	9109      	str	r1, [sp, #36]	; 0x24
70003412:	f416 7180 	ands.w	r1, r6, #256	; 0x100
70003416:	6810      	ldr	r0, [r2, #0]
70003418:	f43f af66 	beq.w	700032e8 <__l_vfprintf+0x450>
7000341c:	f416 7100 	ands.w	r1, r6, #512	; 0x200
70003420:	bf1a      	itte	ne
70003422:	4661      	movne	r1, ip
70003424:	b2c0      	uxtbne	r0, r0
70003426:	b280      	uxtheq	r0, r0
70003428:	e75e      	b.n	700032e8 <__l_vfprintf+0x450>
7000342a:	461a      	mov	r2, r3
                if (!(flags & FL_LPAD)) {
7000342c:	f240 4106 	movw	r1, #1030	; 0x406
                } else if (flags & (FL_NEGATIVE | FL_PLUS | FL_SPACE)) {
70003430:	ea1a 0101 	ands.w	r1, sl, r1
                    len += 1;
70003434:	bf18      	it	ne
70003436:	3201      	addne	r2, #1
                if (!(flags & FL_LPAD)) {
70003438:	f01a 0c08 	ands.w	ip, sl, #8
                width -= len;
7000343c:	bf18      	it	ne
7000343e:	eba9 0602 	subne.w	r6, r9, r2
                if (!(flags & FL_LPAD)) {
70003442:	d135      	bne.n	700034b0 <__l_vfprintf+0x618>
                    if (flags & FL_ZFILL) {
70003444:	f01a 0f01 	tst.w	sl, #1
70003448:	d158      	bne.n	700034fc <__l_vfprintf+0x664>
                    while (len < width) {
7000344a:	4591      	cmp	r9, r2
7000344c:	f340 80a8 	ble.w	700035a0 <__l_vfprintf+0x708>
70003450:	f8cd 8008 	str.w	r8, [sp, #8]
70003454:	eb09 0604 	add.w	r6, r9, r4
70003458:	e9cd 3205 	strd	r3, r2, [sp, #20]
7000345c:	1ab6      	subs	r6, r6, r2
7000345e:	9407      	str	r4, [sp, #28]
70003460:	46b0      	mov	r8, r6
70003462:	465e      	mov	r6, fp
70003464:	46e3      	mov	fp, ip
70003466:	e001      	b.n	7000346c <__l_vfprintf+0x5d4>
70003468:	45a0      	cmp	r8, r4
7000346a:	d00e      	beq.n	7000348a <__l_vfprintf+0x5f2>
                        my_putc (' ', stream);
7000346c:	4639      	mov	r1, r7
7000346e:	2020      	movs	r0, #32
70003470:	47b0      	blx	r6
70003472:	3401      	adds	r4, #1
70003474:	2800      	cmp	r0, #0
70003476:	daf7      	bge.n	70003468 <__l_vfprintf+0x5d0>
70003478:	e53d      	b.n	70002ef6 <__l_vfprintf+0x5e>
                    flags &= ~(FL_PLUS | FL_SPACE);
7000347a:	f026 0206 	bic.w	r2, r6, #6
7000347e:	f006 0640 	and.w	r6, r6, #64	; 0x40
70003482:	fa1f fa82 	uxth.w	sl, r2
70003486:	9602      	str	r6, [sp, #8]
70003488:	e742      	b.n	70003310 <__l_vfprintf+0x478>
                        len++;
7000348a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
7000348e:	46dc      	mov	ip, fp
70003490:	9907      	ldr	r1, [sp, #28]
70003492:	46b3      	mov	fp, r6
70003494:	f8dd 8008 	ldr.w	r8, [sp, #8]
70003498:	1a56      	subs	r6, r2, r1
7000349a:	4426      	add	r6, r4
                width -= len;
7000349c:	eba9 0606 	sub.w	r6, r9, r6
                if (flags & FL_ALT) {
700034a0:	f1bc 0f00 	cmp.w	ip, #0
700034a4:	f47f af7a 	bne.w	7000339c <__l_vfprintf+0x504>
700034a8:	f240 4106 	movw	r1, #1030	; 0x406
700034ac:	ea0a 0101 	and.w	r1, sl, r1
                } else if (flags & (FL_NEGATIVE | FL_PLUS | FL_SPACE)) {
700034b0:	2900      	cmp	r1, #0
700034b2:	f43f af7f 	beq.w	700033b4 <__l_vfprintf+0x51c>
                    my_putc (z, stream);
700034b6:	4639      	mov	r1, r7
                    if (flags & FL_PLUS) z = '+';
700034b8:	f01a 0f02 	tst.w	sl, #2
700034bc:	bf14      	ite	ne
700034be:	202b      	movne	r0, #43	; 0x2b
700034c0:	2020      	moveq	r0, #32
                    if (flags & FL_NEGATIVE) z = '-';
700034c2:	9302      	str	r3, [sp, #8]
700034c4:	f41a 6f80 	tst.w	sl, #1024	; 0x400
                    my_putc (z, stream);
700034c8:	bf18      	it	ne
700034ca:	202d      	movne	r0, #45	; 0x2d
700034cc:	3401      	adds	r4, #1
700034ce:	47d8      	blx	fp
700034d0:	9b02      	ldr	r3, [sp, #8]
700034d2:	2800      	cmp	r0, #0
700034d4:	f6bf af6e 	bge.w	700033b4 <__l_vfprintf+0x51c>
700034d8:	e50d      	b.n	70002ef6 <__l_vfprintf+0x5e>
                        my_putc (c, stream);
700034da:	4628      	mov	r0, r5
700034dc:	4639      	mov	r1, r7
700034de:	9302      	str	r3, [sp, #8]
700034e0:	47d8      	blx	fp
700034e2:	9b02      	ldr	r3, [sp, #8]
700034e4:	3402      	adds	r4, #2
700034e6:	2800      	cmp	r0, #0
700034e8:	f6bf af64 	bge.w	700033b4 <__l_vfprintf+0x51c>
700034ec:	e503      	b.n	70002ef6 <__l_vfprintf+0x5e>
700034ee:	464b      	mov	r3, r9
                        prec = 0;
700034f0:	4656      	mov	r6, sl
700034f2:	f8cd a004 	str.w	sl, [sp, #4]
                        width = 0;
700034f6:	46d1      	mov	r9, sl
700034f8:	469a      	mov	sl, r3
700034fa:	e528      	b.n	70002f4e <__l_vfprintf+0xb6>
                        if (len < width) {
700034fc:	4591      	cmp	r9, r2
                            prec += width - len;
700034fe:	eba9 0602 	sub.w	r6, r9, r2
70003502:	bfd8      	it	le
70003504:	9301      	strle	r3, [sp, #4]
                        if (len < width) {
70003506:	ddcb      	ble.n	700034a0 <__l_vfprintf+0x608>
                            prec += width - len;
70003508:	199a      	adds	r2, r3, r6
7000350a:	2600      	movs	r6, #0
7000350c:	9201      	str	r2, [sp, #4]
                            len = width;
7000350e:	e7c7      	b.n	700034a0 <__l_vfprintf+0x608>
                if (flags & FL_ALT) {
70003510:	f01a 0c10 	ands.w	ip, sl, #16
70003514:	4692      	mov	sl, r2
                        len = prec;
70003516:	9a01      	ldr	r2, [sp, #4]
                if (flags & FL_ALT) {
70003518:	f47f af39 	bne.w	7000338e <__l_vfprintf+0x4f6>
7000351c:	e786      	b.n	7000342c <__l_vfprintf+0x594>
	if ((TOLOWER(c) >= 'e' && TOLOWER(c) <= 'g')
7000351e:	2308      	movs	r3, #8
70003520:	2500      	movs	r5, #0
70003522:	e6cd      	b.n	700032c0 <__l_vfprintf+0x428>
                    arg_to_signed(ap, flags, x_s);
70003524:	05b0      	lsls	r0, r6, #22
70003526:	d525      	bpl.n	70003574 <__l_vfprintf+0x6dc>
70003528:	3307      	adds	r3, #7
7000352a:	f023 0307 	bic.w	r3, r3, #7
7000352e:	f103 0208 	add.w	r2, r3, #8
70003532:	9209      	str	r2, [sp, #36]	; 0x24
70003534:	e9d3 0200 	ldrd	r0, r2, [r3]
70003538:	e692      	b.n	70003260 <__l_vfprintf+0x3c8>
                        skip_to_arg(fmt_orig, &my_ap, (flags & FL_PREC) ? prec : width);
7000353a:	464a      	mov	r2, r9
7000353c:	a909      	add	r1, sp, #36	; 0x24
7000353e:	9803      	ldr	r0, [sp, #12]
70003540:	f7ff fbe4 	bl	70002d0c <skip_to_arg>
                            width = va_arg(ap, int);
70003544:	9b09      	ldr	r3, [sp, #36]	; 0x24
70003546:	1d1a      	adds	r2, r3, #4
70003548:	9209      	str	r2, [sp, #36]	; 0x24
7000354a:	f8d3 9000 	ldr.w	r9, [r3]
7000354e:	e4fe      	b.n	70002f4e <__l_vfprintf+0xb6>
                    flags &= ~FL_ALT;
70003550:	f006 0340 	and.w	r3, r6, #64	; 0x40
                        x_s = -x_s;
70003554:	4240      	negs	r0, r0
                    flags &= ~FL_ALT;
70003556:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
                    if (x_s == 0 && (flags & FL_PREC) && prec == 0)
7000355a:	9302      	str	r3, [sp, #8]
                        x_s = -x_s;
7000355c:	eb62 0142 	sbc.w	r1, r2, r2, lsl #1
70003560:	e699      	b.n	70003296 <__l_vfprintf+0x3fe>
                        buf_len = 0;
70003562:	2200      	movs	r2, #0
                    flags &= ~FL_ZFILL;
70003564:	f026 0617 	bic.w	r6, r6, #23
                        buf_len = 0;
70003568:	4613      	mov	r3, r2
                    flags &= ~FL_ZFILL;
7000356a:	fa1f fa86 	uxth.w	sl, r6
                if (flags & FL_ALT) {
7000356e:	e75d      	b.n	7000342c <__l_vfprintf+0x594>
    int stream_len = 0;
70003570:	4604      	mov	r4, r0
    return stream_len;
70003572:	e4c6      	b.n	70002f02 <__l_vfprintf+0x6a>
                    arg_to_signed(ap, flags, x_s);
70003574:	1d1a      	adds	r2, r3, #4
70003576:	9209      	str	r2, [sp, #36]	; 0x24
70003578:	6818      	ldr	r0, [r3, #0]
7000357a:	17c2      	asrs	r2, r0, #31
7000357c:	e670      	b.n	70003260 <__l_vfprintf+0x3c8>
                        base = 2;
7000357e:	2302      	movs	r3, #2
70003580:	e69e      	b.n	700032c0 <__l_vfprintf+0x428>
	return EOF;
70003582:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
70003586:	e4bc      	b.n	70002f02 <__l_vfprintf+0x6a>
                        buf_len = 0;
70003588:	2200      	movs	r2, #0
                    flags &= ~FL_ZFILL;
7000358a:	f026 0611 	bic.w	r6, r6, #17
                        buf_len = 0;
7000358e:	4613      	mov	r3, r2
                    flags &= ~FL_ZFILL;
70003590:	fa1f fa86 	uxth.w	sl, r6
                if (flags & FL_ALT) {
70003594:	e74a      	b.n	7000342c <__l_vfprintf+0x594>
                        buf_len = __ultoa_invert (x_s, buf, 10) - buf;
70003596:	4611      	mov	r1, r2
70003598:	f006 0340 	and.w	r3, r6, #64	; 0x40
7000359c:	9302      	str	r3, [sp, #8]
7000359e:	e67a      	b.n	70003296 <__l_vfprintf+0x3fe>
                            prec += width - len;
700035a0:	eba9 0602 	sub.w	r6, r9, r2
700035a4:	e77c      	b.n	700034a0 <__l_vfprintf+0x608>
		if (c >= '0' && c <= '9') {
700035a6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
700035aa:	2b09      	cmp	r3, #9
700035ac:	f63f ad79 	bhi.w	700030a2 <__l_vfprintf+0x20a>
		    if (flags & FL_PREC) {
700035b0:	0675      	lsls	r5, r6, #25
700035b2:	f57f acc6 	bpl.w	70002f42 <__l_vfprintf+0xaa>
			prec = 10*prec + c;
700035b6:	9a01      	ldr	r2, [sp, #4]
700035b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
700035bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
700035c0:	9301      	str	r3, [sp, #4]
			continue;
700035c2:	e4c4      	b.n	70002f4e <__l_vfprintf+0xb6>
700035c4:	0000      	movs	r0, r0
	...

700035c8 <__z_arm_int_exit_from_thumb>:
700035c8:	4778      	bx	pc
700035ca:	e7fd      	b.n	700035c8 <__z_arm_int_exit_from_thumb>
700035cc:	eafff555 	b	70000b28 <z_arm_int_exit>

Disassembly of section .boot_section:

00000000 <__boot_spring>:
 * @brief Initialisation of fault handling
 */
void z_arm_fault_init(void)
{
	/* Nothing to do for now */
}
   0:	e59fd004 	ldr	sp, [pc, #4]	; c <___thread_base_t_user_options_OFFSET>
	arch_system_halt(reason);
   4:	fa000024 	blx	9c <MpuP_init>
	handler = pHandler;
   8:	ea000056 	b	168 <____start_veneer>
};

void rsc_table_get(struct fw_resource_table **table_ptr, int *length)
{
	*table_ptr = &resource_table;
	*length = sizeof(resource_table);
   c:	7000a550 	.word	0x7000a550

00000010 <MpuP_setRegion>:
	cmp	r0, #0
	bne	_irq_disabled
	cpsie	i
_irq_disabled:

	bx	lr
  10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  12:	f893 c004 	ldrb.w	ip, [r3, #4]
{
	uint32_t *ssf_contents = ssf_ptr;
	struct arch_esf oops_esf = { 0 };

	/* TODO: Copy the rest of the register set out of ssf_ptr */
	oops_esf.basic.pc = ssf_contents[3];
  16:	f893 e000 	ldrb.w	lr, [r3]
	z_fatal_error(reason, esf);
  1a:	79de      	ldrb	r6, [r3, #7]
}
  1c:	4604      	mov	r4, r0
  1e:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
   z_vim_irq_enable(irq);
  22:	7998      	ldrb	r0, [r3, #6]
  24:	0200      	lsls	r0, r0, #8
		(void) vfprintf(&console, fmt, ap);
  26:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
}
  2a:	f40c 5c80 	and.w	ip, ip, #4096	; 0x1000
	}

	irq_group_num = VIM_GET_IRQ_GROUP_NUM(irq);
	irq_bit_num = VIM_GET_IRQ_BIT_NUM(irq);

	sys_write32(BIT(irq_bit_num), VIM_RAW(irq_group_num));
  2e:	ea4c 0c00 	orr.w	ip, ip, r0
  32:	7898      	ldrb	r0, [r3, #2]
  34:	f000 0001 	and.w	r0, r0, #1
  38:	ea4c 0c00 	orr.w	ip, ip, r0
}
  3c:	7958      	ldrb	r0, [r3, #5]

int k_mem_slab_runtime_stats_get(struct k_mem_slab *slab, struct sys_memory_stats *stats)
{
	if ((slab == NULL) || (stats == NULL)) {
		return -EINVAL;
  3e:	00c0      	lsls	r0, r0, #3
  40:	f000 0038 	and.w	r0, r0, #56	; 0x38
		return NULL;
  44:	ea4c 0c00 	orr.w	ip, ip, r0
}
  48:	78d8      	ldrb	r0, [r3, #3]
		return NULL;
  4a:	0080      	lsls	r0, r0, #2
}
  4c:	f000 0004 	and.w	r0, r0, #4
	void *ret = sys_heap_aligned_realloc(&z_malloc_heap, ptr,
					     __alignof__(z_max_align_t),
					     requested_size);

	if (ret == NULL && requested_size != 0) {
		errno = ENOMEM;
  50:	f002 021f 	and.w	r2, r2, #31
  54:	ea4c 0c00 	orr.w	ip, ip, r0
	return z_impl_k_mutex_unlock(mutex);
  58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  5c:	1c55      	adds	r5, r2, #1
  5e:	f00e 0e01 	and.w	lr, lr, #1
	}

	malloc_unlock();

	return ret;
}
  62:	40a8      	lsls	r0, r5
  64:	ea01 0500 	and.w	r5, r1, r0
  68:	7858      	ldrb	r0, [r3, #1]
		thread = z_unpend_first_thread(&sem->wait_q);
		if (thread == NULL) {
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
  6a:	0040      	lsls	r0, r0, #1
  6c:	ea4e 2e06 	orr.w	lr, lr, r6, lsl #8
	return list->head == list;
  70:	f000 0002 	and.w	r0, r0, #2
		if (unlikely(thread != NULL)) {
  74:	ea4c 0600 	orr.w	r6, ip, r0
  78:	ea4e 0742 	orr.w	r7, lr, r2, lsl #1

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, realloc, heap, ptr, bytes, timeout, ret);

	k_spin_unlock(&heap->lock, key);
	return ret;
}
  7c:	f000 e85c 	blx	138 <MpuP_isEnableAsm>
  80:	4633      	mov	r3, r6
  82:	463a      	mov	r2, r7
}
  84:	4629      	mov	r1, r5
		wfe();
	}

	cpu_map[cpu_num] = cpu_mpid;

	printk("Secondary CPU core %d (MPID:%#x) is up\n", cpu_num, cpu_mpid);
  86:	4606      	mov	r6, r0
  88:	4620      	mov	r0, r4
  8a:	f000 e860 	blx	14c <MpuP_setRegionAsm>
  8e:	b906      	cbnz	r6, 92 <CONFIG_CONSOLE_INPUT_MAX_LINE_LEN+0x12>
}
  90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_kernel.ready_q.cache = thread;
  92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  96:	f000 b863 	b.w	160 <__MpuP_enableAsm_from_thumb>
	node->prev = prev;
  9a:	bf00      	nop

0000009c <MpuP_init>:
  9c:	b570      	push	{r4, r5, r6, lr}
	prev->next = node;
  9e:	f000 e830 	blx	100 <MpuP_disableBRAsm>
}
  a2:	f64b 36bc 	movw	r6, #48060	; 0xbbbc

         for (uint32_t j = 0; j < gProfileObject.numEvents; j++)
         {
            printk("%s Count: %u\r\n", p->events[j].name, p->events[j].value);
         }
         printk("\r\n");
  a6:	f2c7 0600 	movt	r6, #28672	; 0x7000
  aa:	6833      	ldr	r3, [r6, #0]
  ac:	b163      	cbz	r3, c8 <MpuP_init+0x2c>
  ae:	4c0d      	ldr	r4, [pc, #52]	; (e4 <__data_size+0xc>)
   for (i = 0; i < ITERATION_COUNT; i++)
   {
      // printf("Receive Latency: ");
      // tm_pmu_profile_print(pmu_recv_names[i]);
      printf("Send Latency: ");
      tm_pmu_profile_print(pmu_send_names[i]);
  b0:	2500      	movs	r5, #0
   for (i = 0; i < ITERATION_COUNT; i++)
  b2:	4623      	mov	r3, r4
  b4:	4628      	mov	r0, r5
   }

   tm_thread_suspend(0);
}
  b6:	e954 1202 	ldrd	r1, r2, [r4, #-8]
   tm_thread_suspend(0);
  ba:	3501      	adds	r5, #1
  bc:	f7ff ffa8 	bl	10 <MpuP_setRegion>
  c0:	6833      	ldr	r3, [r6, #0]
  c2:	3410      	adds	r4, #16
  c4:	42ab      	cmp	r3, r5
  c6:	d8f4      	bhi.n	b2 <MpuP_init+0x16>
                gMpuRegionConfig[i].size,
                &gMpuRegionConfig[i].attrs
        );
    }

    if (gMpuConfig.enableBackgroundRegion) {
  c8:	6873      	ldr	r3, [r6, #4]
  ca:	b913      	cbnz	r3, d2 <MpuP_init+0x36>
        MpuP_enableBRAsm();
    }

    if (gMpuConfig.enableMpu) {
  cc:	68b3      	ldr	r3, [r6, #8]
  ce:	b92b      	cbnz	r3, dc <__data_size+0x4>
	    MpuP_enableAsm();
    }
}
  d0:	bd70      	pop	{r4, r5, r6, pc}
        MpuP_enableBRAsm();
  d2:	f000 e82a 	blx	128 <MpuP_enableBRAsm>
    if (gMpuConfig.enableMpu) {
  d6:	68b3      	ldr	r3, [r6, #8]
  d8:	2b00      	cmp	r3, #0
  da:	d0f9      	beq.n	d0 <MpuP_init+0x34>
}
  dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    MpuP_enableAsm();
  e0:	f000 b83e 	b.w	160 <__MpuP_enableAsm_from_thumb>
  e4:	7000bb74 	.word	0x7000bb74

000000e8 <MpuP_disableAsm>:
_ASM_FILE_PROLOGUE

/* FUNCTION DEF: void MpuP_disableAsm(void) */
GTEXT(MpuP_disableAsm)
SECTION_FUNC(boot_section, MpuP_disableAsm)
        mrc     p15, #0, r0, c1, c0, #0  // read SCTLR register
  e8:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
        bic     r0, r0, #0x1             // clear bit 0 in r0
  ec:	e3c00001 	bic	r0, r0, #1
        dsb
  f0:	f57ff04f 	dsb	sy
        mcr     p15, #0, r0, c1, c0, #0  // MPU disabled (bit 0 = 0)
  f4:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
        isb                              // flush instruction pipeline
  f8:	f57ff06f 	isb	sy
        bx      LR
  fc:	e12fff1e 	bx	lr

00000100 <MpuP_disableBRAsm>:

/* FUNCTION DEF: void MpuP_disableBRAsm(void) */
GTEXT(MpuP_disableBRAsm)
SECTION_FUNC(boot_section, MpuP_disableBRAsm)
        mrc     p15, #0, r0, c1, c0, #0  // read SCTLR register
 100:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
        bic     r0, r0, #0x20000         // clear bit 17 in r0
 104:	e3c00802 	bic	r0, r0, #131072	; 0x20000
        mcr     p15, #0, r0, c1, c0, #0  // disable background region
 108:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
        bx      LR
 10c:	e12fff1e 	bx	lr

00000110 <MpuP_enableAsm>:

/* FUNCTION DEF: void MpuP_enableAsm(void) */
GTEXT(MpuP_enableAsm)
SECTION_FUNC(boot_section, MpuP_enableAsm)
        mrc     p15, #0, r0, c1, c0, #0  // read SCTLR register
 110:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
        orr     r0, r0, #0x1             // set bit 0 in r0
 114:	e3800001 	orr	r0, r0, #1
        dsb
 118:	f57ff04f 	dsb	sy
        mcr     p15, #0, r0, c1, c0, #0  // MPU enabled (bit 0 = 1)
 11c:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
        isb                              // flush instruction pipeline
 120:	f57ff06f 	isb	sy
        bx      LR
 124:	e12fff1e 	bx	lr

00000128 <MpuP_enableBRAsm>:

/* FUNCTION DEF: void MpuP_enableBRAsm(void) */
GTEXT(MpuP_enableBRAsm)
SECTION_FUNC(boot_section, MpuP_enableBRAsm)
        mrc     p15, #0, r0, c1, c0, #0  // read SCTLR register
 128:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
        orr     r0, r0, #0x20000         // set bit 17 in r0
 12c:	e3800802 	orr	r0, r0, #131072	; 0x20000
        mcr     p15, #0, r0, c1, c0, #0  // background region enabled
 130:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
        bx      LR
 134:	e12fff1e 	bx	lr

00000138 <MpuP_isEnableAsm>:

/* FUNCTION DEF: uint32_t MpuP_isEnableAsm(void) */
GTEXT(MpuP_isEnableAsm)
SECTION_FUNC(boot_section, MpuP_isEnableAsm)
        mov     r0, #0
 138:	e3a00000 	mov	r0, #0
        mrc     p15, #0, r1, c1, c0, #0  // read SCTLR register to r1
 13c:	ee111f10 	mrc	15, 0, r1, cr1, cr0, {0}
        tst     r1, #0x1                 // test bit 0
 140:	e3110001 	tst	r1, #1
        movne   r0, #1                   // if not 0, MPU is enabled
 144:	13a00001 	movne	r0, #1
        bx      LR
 148:	e12fff1e 	bx	lr

0000014c <MpuP_setRegionAsm>:
 * r2 = sizeAndEnable
 * r3 = regionAttrs
 */
GTEXT(MpuP_setRegionAsm)
SECTION_FUNC(boot_section, MpuP_setRegionAsm)
        mcr     p15, #0, r0, c6, c2, #0  // select MPU region
 14c:	ee060f12 	mcr	15, 0, r0, cr6, cr2, {0}
        mcr     p15, #0, r1, c6, c1, #0  // set region base address
 150:	ee061f11 	mcr	15, 0, r1, cr6, cr1, {0}
        mcr     p15, #0, r2, c6, c1, #2  // set region size and enable it
 154:	ee062f51 	mcr	15, 0, r2, cr6, cr1, {2}
        mcr     p15, #0, r3, c6, c1, #4  // set protection attributes
 158:	ee063f91 	mcr	15, 0, r3, cr6, cr1, {4}
        bx      LR
 15c:	e12fff1e 	bx	lr

00000160 <__MpuP_enableAsm_from_thumb>:
		split_chunks(h, c, c + chunks_need);
 160:	4778      	bx	pc
 162:	e7fd      	b.n	160 <__MpuP_enableAsm_from_thumb>
 164:	eaffffe9 	b	110 <MpuP_enableAsm>

00000168 <____start_veneer>:
		free_chunk(h, c + chunks_need);
 168:	e51ff004 	ldr	pc, [pc, #-4]	; 16c <____start_veneer+0x4>
 16c:	70000804 	.word	0x70000804
